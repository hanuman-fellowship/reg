#!/usr/bin/perl
use strict;
use warnings;
use DBI;
use File::Copy;
use Getopt::Easy;
use lib "../lib";
use Date::Simple qw/date/;

get_options("s-single");

my @seasons;
my $p = shift @ARGV;
while ($p ne 's08') {
    push @seasons, $p;
    last if $O{single};
    if ($p =~ m{^s}) {
        $p =~ s{s}{f};
    }
    else {
        my ($yr) = $p =~ m{(\d+)};
        $yr = ($yr + 1) % 100;
        $p = 's' . sprintf("%02d", $yr);
    }
}
push @seasons, 'cur' unless $O{single};

my $dbh = DBI->connect(undef, "sahadev", "JonB")
    or die "oh no\n";
$dbh->do("delete from program");
$dbh->do("delete from canpol");
$dbh->do("delete from housecost");
$dbh->do("delete from leader");
$dbh->do("delete from leader_program");
$dbh->do("delete from affil_program");

# first cancellation policies
my $cp_sql = "insert into canpol values (?, ?, ?)";
my $cp_sth = $dbh->prepare($cp_sql) or die "no prep cp";
open my $cp, "<", "new/canpol.txt"
    or die "no canpol: !\n";
my ($name, $policy);
my $id = 1;
my %canpol_id = ();
while (<$cp>) {
    s{\r?\n}{};
    my ($k, $v) = split m{\t};
    $v =~ s{^\s*|\s*$}{}g;
    if ($k eq 'text') {
        $policy = "";
        while (<$cp>) {
            s{\r?\n}{};
            last if m{^[.]$};
            $policy .= "$_\n";
        }
        # ready to insert
        $cp_sth->execute($id, $name, $policy) or die "no cp exec";
        $canpol_id{$name} = $id;
        ++$id;
    }
    else {
        $name = ($v eq 'MMC')? "Default": $v;
    }
}
close $cp;
$canpol_id{0} = $canpol_id{MMC} = $canpol_id{Default};

# housing costs
my $hc_sql = "insert into housecost values ("
    . (join ",", ("?") x 16)
    . ")";
my $hc_sth = $dbh->prepare($hc_sql) or die "no prep cp";
open my $hc, "<", "new/housing.txt"
    or die "no housing: $!\n";
my %data;
while (<$hc>) {
    s{\r?\n}{};
    my ($n, $type, $cost) = split m{\t};
    $type =~ s{[ ]}{_};
    $type = "dble" if $type eq "double";
    $type = "dble_bath" if $type eq "double_bath";
    $data{"HC$n"}{$type} = $cost;
}
close $hc;
for my $name (keys %data) {
    my ($hid) = $name =~ m{(\d+)};
    $hc_sth->execute(
        $hid+1,
        ($name eq 'HC0')? "Default": $name,
        $data{$name}{single} + $data{$name}{single_bath},
        $data{$name}{single},
        $data{$name}{dble} + $data{$name}{dble_bath},
        $data{$name}{dble},
        $data{$name}{triple},
        $data{$name}{quad},
        $data{$name}{dormitory},
        $data{$name}{economy},
        $data{$name}{center_tent},
        $data{$name}{own_tent},
        $data{$name}{own_van},
        $data{$name}{commuting},
        $data{$name}{unknown},
        ($hid == 0 || $hid >= 6)? 'Perday': 'Total'
    );
}

my $per_sql = "select id from people where first = ? and last = ?";
my $per_sth = $dbh->prepare($per_sql) or die "no per_sql\n";
my $aper_sql = "insert into people (id, first, last, sex) values (?, ?, ?, ?)";
my $aper_sth = $dbh->prepare($aper_sql) or die "no aper_sql\n";
# id
# person_id
# public_email
# url
# image
# biography
# l_order
my $le_sql = "insert into leader (id, person_id, url, image, biography, l_order) values (?, ?, ?, ?, ?, ?)";
my $le_sth = $dbh->prepare($le_sql) or die "no le_sql\n";

# leaders
# we can use the id from the file
# id	11
# last	Anderson
# first	Tenshin Reb
# puemail	                                        
# web	www.rebanderson.org                                         
# image	anderson.jpg        
# bio	-
#
my %gender;
open my $gender, "<", "sfirsts"
    or die "cannot open sfirsts: $!\n";
while (<$gender>) {
    s{\r?\n}{};
    my ($name, $sex) = split m{\t};
    $gender{$name} = $sex;
}
close $gender;

# mess with the next people id
#
# the issue is that we want to preserve
# the ids and addresses of the people in the
# current mlist database.  
# 
# when loading the old registrations we want to create new people
# and update their addresses as we go from old seasons to
# the current one but people that are currently in the
# mlist database will not have their addresses updated.
# this id in the people database will be the cutoff between
# the old and the new (or the new and the old!).
#
my $next_per_id = 200000;
my $next_pro_id = 3000;
my $next_summary_id = 1;

open my $ld, "<", "new/leaders.txt"
    or die "cannot open leaders.txt: $!\n";
my %hash = ();
while (<$ld>) {
    s{\r?\n}{};
    my ($k, $v) = split m{\t};
    $v =~ s{^\s*|\s*$}{}g;
    $hash{$k} = $v;
    if ($k eq 'bio') {
        $hash{bio} = "";
        while (<$ld>) {
            s{\r?\n}{};
            last if m{^.$};
            $hash{bio} .= "$_\n";
        }
        processLeader();
        %hash = ();
    }
}
close $ld;


sub processLeader {
    # find first, last in People or add them
    # - get an id for use when creating the Leader record.
    return unless ($hash{first} =~ /\S/ || $hash{last} =~ /\S/);
    $per_sth->execute($hash{first}, $hash{last});
    my ($per_id) = $per_sth->fetchrow_array();
    if (!$per_id) {
        $per_id = $next_per_id++;
        #print "creating person $hash{first} $hash{last} id = $per_id\n";
        $aper_sth->execute($per_id,
                           $hash{first},
                           $hash{last},
                           $gender{$hash{first}}
                          );
    }
    my $image = "";
    if ($hash{image} =~ /\S/) {
        if (-f "new/images/$hash{image}" || -f "new/images/b-$hash{image}") {
            $image = "yes";
            my ($suf) = $hash{image} =~ m{[.](\w+)$};
            if (-f "new/images/$hash{image}") {
                copy("new/images/$hash{image}",
                     "../root/static/images/lo-$hash{id}.$suf");
            }
            else {
                copy("new/images/b-$hash{image}",
                     "../root/static/images/lo-$hash{id}.$suf");
            }
            chdir "../root/static/images";
            system("convert -scale 170x lo-$hash{id}.$suf lth-$hash{id}.$suf");
            system("convert -scale 600x lo-$hash{id}.$suf lb-$hash{id}.$suf");
            chdir "../../../migration";
        }
        else {
            print "could not find '$hash{image}'\n";
            $hash{image} = "";
        }
    }
    $le_sth->execute($hash{id}, $per_id, $hash{web}, $image, $hash{bio}, 1);
}

my @fields = qw/
    id
    name
    title
    subtitle
    glnum
    housecost_id
    retreat
    sdate
    edate
    tuition
    confnote
    url
    webdesc
    brdesc
    webready
    image
    kayakalpa
    canpol_id
    extradays
    full_tuition
    deposit
    collect_total
    linked
    unlinked_dir
    ptemplate
    cl_template
    sbath
    quad
    economy
    footnotes
    reg_start
    reg_end
    prog_start
    prog_end
    lunches
    school
    level
    summary_id
/;
my $p_sql = "insert into program ("
    . (join ",", @fields)
. ") values ("
    . (join ",", ("?") x @fields)
. ")";
my $p_sth = $dbh->prepare($p_sql) or die "no prep ins prog\n";

my $summary_sth = $dbh->prepare("insert into summary (id) values (?)");

my $lp_sql = "insert into leader_program values (?, ?)";
my $lp_sth = $dbh->prepare($lp_sql) or die "no prep lp\n";

my $af_pr_sql = "insert into affil_program values (?, ?)";
my $af_pr_sth = $dbh->prepare($af_pr_sql);

# got the order of names backwards so ...
# reverse to the rescue rather than a painful edit.
my %lookup = reverse qw/
    name          pname
    title         desc
    subtitle      subdesc
    economy       econ
    collect_total colltot
    extradays     extdays
    full_tuition  fulltuit
    url           weburl
    glnum         num
    ptemplate     template
/;
my %init = (
    reg_start  => '4:00 pm',
    reg_end    => '7:00 pm',
    prog_start => '7:00 pm',
    prog_end   => '12:30 pm',
);
# get affil ids
my %affil_id;
open my $af_id, "<", "affil_id.txt"
    or die "no affil_id\n";
while (<$af_id>) {
    chomp;
    my ($code, $id) = split;
    $affil_id{$code} = $id;
}
close $af_id;

open my $pr_hoff, ">", "pr_hoff_id.txt"
    or die "no pr_hoff.txt\n";

for my $seas (@seasons) {
    print "prog $seas\n";
    open my $in, "<", "new/${seas}prog.txt"
        or die "no ${seas}progr: $!\n";
    %hash = %init;
    PROGRAM:
    while (<$in>) {
        s{\r?\n$}{};
        my ($k, $v) = split m{\t};
        $v =~ s{^\s*|\s*$}{}g;
        if ($v eq '-') {
            $v = "";
            LINE:
            while (<$in>) {
                s{\r?\n$}{};
                s{^\s*|\s*$}{}g;
                last LINE if m{^\.$};
                $v .= "$_\n";
            }
        }
        $k = $lookup{$k} || $k;
        $hash{$k} = $v;
        if ($k eq 'collect_total') {
            processProg($seas);
            %hash = %init;
        }
    }
    close $in;
    open my $sum_id, ">", "summary_id.txt"
        or die "no summary_id.txt\n";
    print {$sum_id} "$next_summary_id\n";
    close $sum_id;
}

close $pr_hoff;

sub processProg {
    my ($season) = @_;
    if ($hash{name} =~ m{^(personal retreats|hoffman)$}i) {
        # transform these special cases into a new program
        # pid  69 = personal retreat
        # pid 886 = hoffman
        my $orig = $hash{pid};
        $hash{pid} = $next_pro_id;
        # remember this so you won't have to look it up.
        print {$pr_hoff} "$season-$orig $next_pro_id\n";
        $next_pro_id++;
        if ($season eq 'cur') {
            $hash{sdate} = "04/01/2008";
            $hash{edate} = "09/30/2008";
            $hash{name} .= " S08";
        }
        else {
            my ($fs, $year) = $season =~ m{(.)(..)};
            $year += ($year > 70)? 1900: 2000;
            if ($fs eq 'f') {
                $hash{sdate} = "10/01/$year";
                $hash{edate} = "03/31/" . ($year+1);
            }
            else {
                $hash{sdate} = "04/01/$year";
                $hash{edate} = "09/30/$year";
            }
            $hash{name} .= " \U$season";
        }
    }
    if ($hash{name} =~ m{ FULL$}) {
        $hash{webready} = "";
        $hash{image} = "";
        $hash{linked} = "";
        $hash{webdesc} = "";
        $hash{brdesc} = "";
        $hash{ptemplate} = "";
        $hash{url} = "";
        if ($hash{full_tuition} > 0) {
            $hash{tuition} = $hash{full_tuition};
        }
        $hash{deposit} = 0;
        $hash{fulltuition} = 0;
        $hash{extradays} = 0;
    }
    $hash{id} = $hash{pid};
    for my $f (qw/ sdate edate /) {
        $hash{$f} =~ s{(..)/(..)/(....)}{$3$1$2}g;
        $hash{$f} =~ s{[/\s]}{}g;
    }
    if (! $hash{linked} && $hash{webready}) {
        $hash{unlinked_dir} = 't-'      # to not clobber the cur reg
                              . lc(substr($hash{name}, 0, 3)
                              . "-"
                              . substr($hash{name}, -3, 3));
    }
    $hash{ptemplate} =~ s{[.]html}{};
    $hash{ptemplate} = "default" if $hash{ptemplate} =~ m{^\s*$};
    $hash{cl_template} = "default";
    if (! -f "../root/static/templates/web/$hash{ptemplate}.html") {
        print "*** could not open web template $hash{ptemplate}\n";
    }
    $hash{canpol_id} =
        (exists $canpol_id{$hash{canpol}})? $canpol_id{$hash{canpol}}
        :                                   $canpol_id{Default};
    $hash{housecost_id} = $hash{housing}+1;
    $hash{url} =~ s{http://}{};
    # images???
    my $image = "";
    if ($hash{image} =~ /\S/) {
        if (-f "new/images/$hash{image}" || -f "new/images/b-$hash{image}") {
            $image = "yes";
            my ($suf) = $hash{image} =~ m{[.](\w+)$};
            if (-f "new/images/$hash{image}") {
                copy("new/images/$hash{image}",
                     "../root/static/images/po-$hash{id}.$suf");
            }
            else {
                copy("new/images/b-$hash{image}",
                     "../root/static/images/po-$hash{id}.$suf");
            }
            chdir "../root/static/images";
            system("convert -scale 170x po-$hash{id}.$suf pth-$hash{id}.$suf");
            system("convert -scale 600x po-$hash{id}.$suf pb-$hash{id}.$suf");
            chdir "../../../migration";
        }
        else {
            print "could not find '$hash{image}'\n";
            $hash{image} = "";
        }
    }
    my $ndays = date($hash{edate}) - date($hash{sdate}) + 1;
    $hash{lunches} = '0' x $ndays;

    $hash{summary_id} = $next_summary_id;
    $summary_sth->execute($next_summary_id);
    ++$next_summary_id;

    $p_sth->execute(@hash{@fields}) or die "no exec";      # yay!
    if ($hash{pres1} != 0) {
        addLeader($hash{pres1}, $hash{id});
    }
    if ($hash{pres2} != 0) {
        addLeader($hash{pres2}, $hash{id});
    }
    # affiliations
    my @affs = ();
    @affs = split //, $hash{affil} if $hash{affil};
    for my $code (@affs) {
        if (exists $affil_id{$code}) {
            $af_pr_sth->execute($affil_id{$code}, $hash{pid});
        }
    }
}
$cp_sth = $hc_sth = $per_sth = $aper_sth = $le_sth = $p_sth = $lp_sth = $af_pr_sth = $summary_sth = undef;
$dbh->disconnect();

sub addLeader {
    my ($l_id, $p_id) = @_;
    $lp_sth->execute($l_id, $p_id);
}
