#!/usr/bin/perl
use strict;
use warnings;
use DBI;
use lib '../lib';
use Util qw/
    nsquish
/;
use Getopt::Easy;
use Date::Simple qw/
    date
/;

get_options("s-single");

$|++;       # unbuffer output

my $unknown = 1;        # fixed id for unknown user

my %full_prog;          # program ids of full programs loaded in loadprog
open my $full, "<", "fullprog.txt"
    or die "cannot open fullprog.txt\n";
while (<$full>) {
    chomp;
    $full_prog{$_} = 1;
}
close $full;

#
# program ids for personal retreat and hoffman programs
#
my %pr_hoff;
open my $prh, "<", "pr_hoff_id.txt"
    or die "no pr_hoff_id.txt\n";
while (<$prh>) {
    chomp;
    my ($k, $v) = split;
    $pr_hoff{$k} = $v;
}
close $prh;

my @seasons;
my $p = shift @ARGV;
while ($p ne 's08') {
    push @seasons, $p;
    last if $O{single};
    if ($p =~ m{^s}) {
        $p =~ s{s}{f};
    }
    else {
        my ($yr) = $p =~ m{(\d+)};
        $yr = ($yr + 1) % 100;
        $p = 's' . sprintf("%02d", $yr);
    }
}
push @seasons, 'cur' unless $O{single};

my $dbh = DBI->connect(undef, "sahadev", "JonB")
    or die "oh no\n";
$dbh->do("delete from registration");
$dbh->do("delete from reg_payment");
$dbh->do("delete from reg_charge");
$dbh->do("delete from reg_history");
$dbh->do("delete from credit");

#    id          integer primary key,
#    username    text,
#    password    text,
#    email       text,
#    first       text,
#    last        text
my $who_sql = "select id from user where username = ?";
my $who_sth = $dbh->prepare($who_sql) or die "no who_sql\n";
my $who_ins_sql = "
insert into user
(id, username, password, email, first, last)
values
(?, ?, ?, ?, ?, ?)
";
my $who_ins_sth = $dbh->prepare($who_ins_sql) or die "no who_ins_sql\n";

my $p_sql = "select name, sdate, edate, extradays from program where id = ?";
my $p_sth = $dbh->prepare($p_sql) or die "no p_sql\n";

my $per_sql = "select id, date_updat from people where first = ? and last = ?";
my $per_sth = $dbh->prepare($per_sql) or die "no per_sql\n";

my $ins_per_sql = "
insert into people
(id, first, last, sex,
 addr1, addr2, city, st_prov, zip_post, country,
 tel_home, tel_work, tel_cell, email,
 date_entrd, date_updat, comment, akey) 
values
(?, ?, ?, ?,
 ?, ?, ?, ?, ?, ?,
 ?, ?, ?, ?,
 ?, ?, ?, ?)
";
my $ins_per_sth = $dbh->prepare($ins_per_sql) or die "no ins_per_sql\n";

my $pay_ins_sql = "
insert into reg_payment
(id, reg_id, user_id, the_date, time, amount, type, what)
values
(?, ?, ?, ?, ?, ?, ?, ?)
";
my $pay_ins_sth = $dbh->prepare($pay_ins_sql) or die "no pay_ins";

my $chg_ins_sql = "
insert into reg_charge
(id, reg_id, user_id, the_date, time, amount, what, automatic)
values
(?, ?, ?, ?, ?, ?, ?, ?)
";
my $chg_ins_sth = $dbh->prepare($chg_ins_sql) or die "no chg_ins\n";

my $hist_ins_sql = "
insert into reg_history
(id, reg_id, user_id, the_date, time, what)
values
(?, ?, ?, ?, ?, ?)
";
my $hist_ins_sth = $dbh->prepare($hist_ins_sql);

my $upd_per_sql = "
update people
set first = ?, last = ?, sex = ?, addr1 = ?, addr2 = ?,
    city = ?, st_prov = ?, zip_post = ?, country = ?,
    tel_home = ?, tel_work = ?, tel_cell = ?, email = ?,
    comment = ?, akey = ?
where id = ?
";
my $upd_per_sth = $dbh->prepare($upd_per_sql) or die "no upd_per_sql\n";

my $ins_reg_sql = "insert into registration
(id, program_id, person_id, comment, confnote, date_start, date_end, early, late,
 referral, adsource, kids, h_type, h_name, carpool, hascar,
 date_postmark, letter_sent, ceu_license, arrived, cancelled,
 deposit, balance, time_postmark, house_id, cabin_room, leader_assistant,
 pref1, pref2
) 
values
(?, ?, ?, ?, ?, ?, ?, ?, ?,
 ?, ?, ?, ?, ?, ?, ?,
 ?, ?, ?, ?, ?,
 ?, ?, ?, ?, ?, ?, ?, ?)";
my $ins_reg_sth = $dbh->prepare($ins_reg_sql) or die "no ins_reg_sql\n";

my %type_map = qw/
    O Online
    S Cash
    C Check
/;
$type_map{D} = 'Credit Card';

my %map = qw/
    pid      program_id
    psdate   date_start
    pedate   date_end
    home     tel_home
    work     tel_work
    cell     tel_cell
    htype    h_type
    hname    h_name
    car      hascar
    post     date_postmark
    confsent letter_sent
    lic      ceu_license
/;
my %refmap = qw/
    MW word_of_mouth
    FL flyer
    AD ad
    WB web
    BR brochure
    WP web
/;
my %housemap = qw/
    1   single
    2   dble
    3   triple
    COM commuting
    D   dormitory
    OT  own_tent
    T   center_tent
    EC  economy
    QU  quad
    VAN own_van
/;
my %comm_h_type = qw(
    com    commuting
    ov     own_van
    ot     own_tent
    ct     center_tent
    dorm   dormitory
    econ   economy
    quad   quad
    tpl    triple
    dbl    dble
    dbl/ba dble_bath
    sgl    single
    sgl/ba single_bath
);
my @houses = qw/
    108BH
    112B 114B 116B 118B
    212B 214B 216B 218B
/;
my %with_bath = map { s{_}{ }; $_ => 1 } @houses;
my %hash;

my $reg_id = 1;     # sequential primary key id - faster than 
                    # giving 'undef' and have the database
                    # do 'max' every time?
my $person_id;

my $sql = "select max(id) from people";
my $sth = $dbh->prepare($sql);
$sth->execute();
my ($next_person_id) = $sth->fetchrow_array();
$sth = undef;
++$next_person_id;

# for updating the "last_updat" field:
my $upd_upd_sth = $dbh->prepare("
    update people
       set date_updat = ?
     where id = ?
");

for my $seas (@seasons) {
    print "reg $seas\t";
    my $nreg = 0;
    my $start_time = time();
    open my $reg, "<", "new/${seas}reg.txt"
        or die "no ${seas}reg\n";
    while (<$reg>) {
        # if $_ doesn't end in \r\n then
        # trim off the \n trim trailing blanks
        # and keep reading and appending lines
        # until you do find a \r\n
        while (! m{\r\n$}) {
            chomp;
            s{ *$}{};
            $_ .= <$reg>;
        }
        s{\r?\n$}{};
        my ($k, $v) = split m{\t};
        $v = "" unless defined $v;
        $v =~ s{^\s*|\s*$}{}g;
        if ($v eq '-') {
            if ($k ne 'overflow') {
                # this does not mean read to a .
                $v = "";
            }
            else {
                $v = "";
                LINE:
                while (<$reg>) {
                    s{\r?\n$}{};
                    s{^\s*|\s*$}{}g;
                    last LINE if m{^\.$};
                    $v .= "$_\n";
                }
            }
        }
        $k = $map{$k} if exists $map{$k};
        $hash{$k} = $v;
        if ($k eq 'ceusent') {
            processReg($seas);
            ++$nreg;
            %hash = ();
        }
    }
    close $reg;
    printf "%3.1f\n", $nreg/((time()-$start_time) || 1);
}

$p_sth = $per_sth = $ins_per_sth = $upd_per_sth = $ins_reg_sth = undef;
$who_sth = $who_ins_sth = $pay_ins_sth = $chg_ins_sth = $hist_ins_sth = undef;
$upd_upd_sth = undef;
$dbh->disconnect();

sub processReg {
    my ($season) = @_;

    for my $k (qw/ 1comment 2comment 3comment 1note 2note overflow /) {
        $hash{$k} =~ s{\s*$}{} if $hash{$k};
    }
    $hash{cabin_room} = "";
    if ($hash{'1comment'} =~ s{\s+(cabin|room)}{}) {
        $hash{cabin_room} = $1;
    }
    $hash{comment} = "";
    $hash{comment} .= "$hash{'1comment'}\n" if $hash{'1comment'};
    $hash{comment} .= "$hash{'2comment'}\n" if $hash{'2comment'};
    $hash{comment} .= "$hash{'3comment'}\n" if $hash{'3comment'};
    $hash{comment} .= $hash{overflow} if $hash{overflow};
    $hash{time_postmark} = "";
    if ($hash{comment} =~ s{(\d\d:\d\d)  online}{online}) {
        $hash{time_postmark} = $1;
    }
    my ($pref1, $pref2) = ("", "");
    if ($hash{comment} =~ m{1-(\S+)}) {
        $pref1 = $comm_h_type{$1};
    }
    if ($hash{comment} =~ m{2-(\S+)}) {
        $pref2 = $comm_h_type{$1};
    }

    $hash{confnote} = "";
    $hash{confnote} .= "$hash{'1note'}\n" if $hash{'1note'};
    $hash{confnote} .= "$hash{'2note'}\n" if $hash{'2note'};
    $hash{referral} = $refmap{$hash{referral}};
    $hash{kids} = "";
    if ($hash{nkids}) {
        $hash{kids} .= "$hash{agekid1} " if $hash{agekid1};
        $hash{kids} .= "$hash{agekid2} " if $hash{agekid2};
        $hash{kids} .= "$hash{agekid3} " if $hash{agekid3};
        $hash{kids} =~ s{\s+$}{};
    }
    $hash{h_type} = $housemap{$hash{h_type}};
    $hash{h_type} .= "_bath" if $with_bath{$hash{h_name}};
    for my $f (qw/
        date_start date_end date_postmark letter_sent can_date
        pmt1date pmt2date date_add
    /) {
        $hash{$f} =~ s{(..)/(..)/(....)}{$3$1$2};
        $hash{$f} =~ s{^4}{2};      # 4005 => 2005 somehow bogus dates got there
        $hash{$f} = "" if $hash{$f} eq "/  /";
    }
    $hash{cancelled} = "";
    if ($hash{can_date}) {
        $hash{cancelled} = "yes";
    }
    for my $f (qw/ tel_home tel_work tel_cell /) {
        $hash{$f} =~ s{\D}{}g;
        $hash{$f} =~ s{(...)(...)(....)}{$1-$2-$3}g;
    }
    my ($name, $sdate, $edate, $edate2, $extradays);
    if ($hash{program_id}) {
        my $pid = $hash{program_id};
        if ($pid == 69 || $pid == 886) {
            # personal retreat or hoffman
            # map it to the new program id.
            if (exists $pr_hoff{"$season-$pid"}) {
                $hash{program_id} = $pr_hoff{"$season-$pid"};
            }
            else {
                warn "*** missing program id for pr_hoff $season-$pid\n";
                return;
            }
        }
        my $full = 0;
        if ($full_prog{$hash{program_id}}) {
            $full = 1;
            --$hash{program_id};        # get the normal program
        }
        $p_sth->execute($hash{program_id});
        unless (($name, $sdate, $edate, $extradays)
                  = $p_sth->fetchrow_array()) {
            warn "*** missing program id: '$hash{program_id}'\n";
            return;
        }
        $edate2 = $edate;
        if ($full) {
            $edate2 = date($edate) + $extradays;
            $edate2 = $edate2->as_d8();
        }
    }
    else {
        warn "*** no proper program id: $hash{program_id}!\n";
        return;
    }
    #
    # set date_start, date_end to program dates
    # if not set already.   set early, late appropriately.
    #
    $hash{early} = $hash{late} = "";
    if (! $hash{date_start}) {
        $hash{date_start} = $sdate;
    }
    elsif ($hash{date_start} ne $sdate) {
        $hash{early} = 'yes';
    }
    if (! $hash{date_end}) {
        $hash{date_end} = $edate;
    }
    elsif (! ($hash{date_end} eq $edate || $hash{date_end} eq $edate2)) {
        $hash{late} = 'yes';
    }
    # get or create the person record
    # if already exists - update the record - ONLY if the
    # id is >= 200,000.  otherwise the person was added
    # during loadpeople and is current already.
    #
    # include the program start date and program name.
    #
    $per_sth->execute($hash{first}, $hash{last});
    my $upd_date;
    if ((($person_id, $upd_date) = $per_sth->fetchrow_array())
         && defined $person_id
    ) {
        if ($person_id >= 200000) {
            $upd_per_sth->execute(
                $hash{first},
                $hash{last},
                $hash{sex},
                $hash{addr1},
                $hash{addr2},
                $hash{city},
                $hash{st_prov},
                $hash{zip_post},
                $hash{country},
                $hash{tel_home},
                $hash{tel_work},
                $hash{tel_cell},
                $hash{email},
                $name,
                nsquish($hash{addr1}, $hash{addr2}, $hash{zip_post}),
                $person_id
            ) or die "could not update: " . $dbh->errstr;
        }
        # else the person was added during loadpeople
        # and is already current.
        #
        # but ...
        # we still need to update the date_updat with the end
        # date of the program - as long as the previous date_updat
        # is earlier...
        if (!$upd_date || $upd_date < $hash{date_end}) {
            $upd_upd_sth->execute($hash{date_end}, $person_id);
        }
    }
    else {
        $person_id = $next_person_id++;
        $ins_per_sth->execute(
            $person_id,
            $hash{first},
            $hash{last},
            $hash{sex},
            $hash{addr1},
            $hash{addr2},
            $hash{city},
            $hash{st_prov},
            $hash{zip_post},
            $hash{country},
            $hash{tel_home},
            $hash{tel_work},
            $hash{tel_cell},
            $hash{email},
            $hash{date_postmark},   # date added
            $hash{date_end},        # date of last update (last contact)
            $name,
            nsquish($hash{addr1}, $hash{addr2}, $hash{zip_post}),
        );
    }
    $ins_reg_sth->execute($reg_id,
                          $hash{program_id},
                          $person_id,
                          $hash{comment},
                          $hash{confnote},
                          $hash{date_start},
                          $hash{date_end},
                          $hash{early},
                          $hash{late},
                          $hash{referral},
                          $hash{adsource},
                          $hash{kids},
                          $hash{h_type},
                          $hash{h_name},
                          $hash{carpool},
                          $hash{hascar},
                          $hash{date_postmark},
                          $hash{letter_sent},
                          $hash{ceu_license},
                          $hash{arrived},
                          $hash{cancelled},
                          $hash{deposit},
                          $hash{balance},
                          $hash{time_postmark},
                          0,     # house_id
                          $hash{cabin_room},
                          '',        # leader assistant
                          $pref1,
                          $pref2
                         ) or die "no ins reg $DBI::errstr\n";
    # use deposit, pmt1, pmt2 in RegPayment records
    #     and p1cash, pmt1date
    # we don't have who did it...
    payment($hash{deposit}, $hash{dcash}, $hash{date_add}, "Deposit")
        if $hash{deposit};
    payment($hash{pmt1}, $hash{p1cash}, $hash{pmt1date}, "Payment #1")
        if $hash{pmt1};
    payment($hash{pmt2}, $hash{p2cash}, $hash{pmt2date}, "Payment #2")
        if $hash{pmt2};

    # use adj, tuition, roomfood in RegCharge records
    charge($hash{tuition}, $hash{date_add}, "Tuition", "yes")
        if $hash{tuition};
    charge($hash{roomfood}, $hash{date_add}, "Lodging", "yes")
        if $hash{roomfood};
    charge($hash{adj}, $hash{date_add}, "Adjustment", "")
        if $hash{adj};

    # use letter_sent, date_add/who_add, can_date in a RegHist record
    if ($hash{date_add}) {
        $who_sth->execute($hash{who_add});
        my ($user_id) = $who_sth->fetchrow_array();
        if (! $user_id) {
            $who_ins_sth->execute(undef, $hash{who_add}, "-no login-",
                'no@no.com',
                ucfirst $hash{who_add}, "");
            # again...
            $who_sth->execute($hash{who_add});
            ($user_id) = $who_sth->fetchrow_array();
        }
        history($hash{date_add}, $user_id, "Registered")
    }
    history($hash{letter_sent}, $unknown, "Confirmation Sent")
        if $hash{letter_sent};
    history($hash{can_date}, $unknown, "Cancelled")
        if $hash{can_date};

    ++$reg_id;
}

sub payment {
    my ($amt, $type, $date, $msg) = @_;

    if (exists $type_map{$type}) {
        $type = $type_map{$type};
    }
    else {
        $type = "unknown";
    }
    $pay_ins_sth->execute(
        undef, $reg_id, $unknown,
        $date, "12:00", 
        $amt, $type, $msg
    );
}
sub charge {
    my ($amt, $date, $msg, $auto) = @_;

    $chg_ins_sth->execute(
        undef, $reg_id, $unknown,
        $date, "12:00", 
        $amt, $msg, $auto
    );
}
sub history {
    my ($date, $who, $what) = @_;

    $hist_ins_sth->execute(
        undef, $reg_id, $who,
        $date, "12:00",
        $what,
    );
}
