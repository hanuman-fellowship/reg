drop table if exists program;
create table program (
    id          integer primary key autoincrement,
    name        text,
    title       text,
    subtitle    text,
    glnum       text,
    housecost_id integer,
    retreat     text,
    sdate       text,
    edate       text,
    tuition     integer,
    confnote    text,
    url         text,
    webdesc     text,
    webready    text,
    image       text,
    kayakalpa   text,
    canpol_id   integer,
    extradays   integer,
    full_tuition integer,
    deposit     integer,
    collect_total text,
    linked      text,
    unlinked_dir text,
    ptemplate   text,
    cl_template text,
    single      text,
    sbath       text,
    economy     text,
    commuting   text,
    footnotes   text,
    reg_start   text,
    reg_end     text,
    prog_start  text,
    prog_end    text,
    reg_count   integer,
    lunches     text,
    school_id   integer,
    level_id    integer,
    max         text,
    notify_on_reg text,
    summary_id  integer,
    rental_id   integer,
    do_not_compute_costs text,
    dncc_why    text,
    color       text,
    allow_dup_regs text,
    percent_tuition integer,
    refresh_days text,
    category_id integer,
    facebook_event_id text,
    not_on_calendar text,
    tub_swim text default 'yes',
    cancelled text not null default '',
    pr_alert text default '',
    mmi_finance text default '',
    waiver_needed text default ''
);
drop table if exists category;
create table category (
    id integer primary key autoincrement,
    name text
);
drop table if exists school;
create table school (
    id integer primary key autoincrement,
    name text,
    mmi text
);
insert into school values (1, 'MMC', '');
insert into school values (2, 'MMI School of Yoga', 'yes');
insert into school values (3, 'MMI College of Ayurveda', 'yes');
insert into school values (4, 'MMI School of Professional Massage', 'yes');
insert into school values (5, 'MMI School of Community Studies', 'yes');
drop table if exists level;
create table level (
    id integer primary key autoincrement,
    name text,
    long_term text,
    public text,
    school_id integer,
    name_regex text,
    glnum_suffix text
);
insert into level values (1, 'Course', '', '', 0, '', ''); -- school_id of 0?
insert into level values (2, 'Public Course', '', 'yes', 0, '', ''); -- ditto
insert into level values (3, 'CS YSC1', 'yes', '', 5, 'YSC\\s*1', '4YSC1');
insert into level values (4, 'CS YSC2', 'yes', '', 5, 'YSC\\s*2', '4YSC2');
insert into level values (5, 'CS YSL1', 'yes', '', 5, 'YSL\\s*1', '4YSL1');
insert into level values (6, 'CS YSL2', 'yes', '', 5, 'YSL\\s*2', '4YSL2');
insert into level values (7, 'YTT 200M', 'yes', '', 2, 'YTT\\s*200\\s*M', '1200M');
insert into level values (8, 'YTT 200S', 'yes', '', 2, 'YTT\\s*200\\s*S', '1200S');
insert into level values (9, 'YTT 300', 'yes', '', 2, 'YTT\\s*300', '1300M');
insert into level values (10, 'AHC', 'yes', '', 3, 'AHC', '2AHC1');
insert into level values (11, 'CAP', 'yes', '', 3, 'CAP', '2CAP1');
insert into level values (12, 'Diploma', 'yes', '', 0, '', '');
insert into level values (13, 'Certificate', 'yes', '', 0, '', '');
insert into level values (14, 'Masters', 'yes', '', 3, 'masters', '2MAS1'); -- only Ayurveda?
insert into level values (15, 'AHC Bridge', 'yes', '', 3, 'ahci\\s*bridge', '2MAS1'); -- only Ayurveda?

drop table if exists canpol;
create table canpol (
    id integer primary key autoincrement,
    name   text,
    policy text
);
drop table if exists housecost;
create table housecost (
    id              integer primary key autoincrement,
    name            text,
    single_bath     integer,
    single          integer,
    dble_bath       integer,
    dble            integer,
    triple          integer,
    dormitory       integer,
    economy         integer,
    center_tent     integer,
    own_tent        integer,
    own_van         integer,
    commuting       integer,
    type            text,
    inactive        text
);
drop table if exists affil_program;
create table affil_program (
    a_id integer,
    p_id integer
);
drop table if exists leader;
create table leader (
    id integer primary key autoincrement,
    person_id integer,
    public_email text,
    url text,
    image text,
    biography text,
    assistant text,
    l_order integer,     -- can't use 'order'
    just_first text
);
drop table if exists leader_program;
create table leader_program (
    l_id integer,       -- leader id
    p_id integer        -- program id
);
drop table if exists program_cluster;
create table program_cluster (
    program_id integer,
    cluster_id integer,
    seq        integer  -- can't be 'order'
);
drop table if exists summary;
create table summary (
    id integer primary key autoincrement,
    date_updated text,
    time_updated text,
    who_updated integer,        -- foreign key to User
    gate_code text,
    registration_location text,
    signage text,
    orientation text,
    wind_up text,
    alongside text,
    back_to_back text,
    leader_name text,
    staff_arrival text,
    staff_departure text,
    leader_housing text,
    food_service text,
    flowers text,
    miscellaneous text,
    feedback text,
    field_staff_setup text,
    sound_setup text,
    check_list text,
    converted_spaces text,
    needs_verification text,
    prog_person text,
    workshop_schedule text,
    workshop_description text,
    field_staff_std_setup text
);
drop table if exists confnote;
create table confnote (
    id integer primary key autoincrement,
    abbr      text,
    expansion text
);
drop table if exists program_doc;
create table program_doc (
    id integer primary key autoincrement,
    program_id integer not null,
    title     text,
    suffix    text
);
