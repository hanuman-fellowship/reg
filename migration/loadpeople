#!/usr/bin/perl
use strict;
use warnings;
use lib "../lib";
use Util qw/
    nsquish
/;
use DBI;

my $mysql = 0;
if (shift) {
    $mysql = 1;
}

my $dbh = DBI->connect(undef, "sahadev", "JonB")
    or die "no connection\n";
$dbh->do("delete from affil_people");
$dbh->do("delete from people");

my $ins_sql = "insert into people values(". ("?," x 24) . "'' )";
                                                # last '' is for inactive
my $ins_sth = $dbh->prepare($ins_sql)
    or die "no prep ins people\n";

my $ap_sql = "insert into affil_people values(?, ?)";
my $ap_sth = $dbh->prepare($ap_sql)
    or die "no prep affil_people\n";

my @flds;

# get affil ids
my %affil_id;
open my $af_id, "<", "affil_id.txt"
    or die "no affil_id\n";
while (<$af_id>) {
    chomp;
    my ($code, $id) = split;
    $affil_id{$code} = $id;
}
close $af_id;

open my $people, "<", "new/people.txt"
    or die "cannot open people: $!\n";
my $n = 0;
$|++;
my %no_affil;

while (<$people>) {
    next unless /\S/;       # first line
    s{\r?\n}{}g;            # DOS chomps
    ++$n;
    print "$n\r" if $n % 100 == 0;
    @flds = split /\|/;
    for my $f (@flds) {
        $f =~ s{\cM}{}g;        # internal 
    }
    if (@flds == 24) {
        push @flds, "";
    }
    # recalc the akey field
    $flds[9] = nsquish($flds[3], $flds[4], $flds[7]);
    for my $dt (@flds[18,19]) {
        if ($dt eq "  /  /  ") {
            $dt = "";
        }
        else {
            my ($m, $d, $y) = $dt =~ m{(..)/(..)/(..)};
            if ($y < 70) {
                $y = "20$y";
            }
            else {
                $y = "19$y";
            }
            $dt = "$y$m$d";
        }
    }
    if ($flds[18] eq "") {
        $flds[18] = $flds[19];
        # date_updat = date_entrd if no last update
    }
    if ($flds[19] eq "") {
        $flds[19] = $flds[18];
        # date_entrd = date_updat if no entry date
    }

    # what mailings are requested?
    my $affils = $flds[20];
    my ($e_mailings, $snail_mailings, $share_mailings);
    $e_mailings     = ($affils =~ m{[9x]}  )? "": "yes";
    $snail_mailings = ($affils =~ m{x}     )? "": "yes";
    $share_mailings = ($affils =~ m{[xdXq]})? "": "yes";
    if ($affils =~ m{@}) {
        $e_mailings = "yes";
        $snail_mailings = "";
        $share_mailings = "";
    }
    my $deceased = ($affils =~ m{\*})? "yes": "";
    $affils =~ s{[dXqx98\@\*]}{}g;

    for my $i (10..12) {    # force standard format of US phone numbers
        next if $flds[$i] =~ m{\d\d\d-\d\d\d-\d\d\d\d};
        my $tmp = $flds[$i];
        $tmp =~ s{\D}{}g;
        if (length($tmp) == 10) {
            $flds[$i] = substr($tmp, 0, 3) . "-"
                      . substr($tmp, 3, 3) . "-"
                      . substr($tmp, 6, 4)
        }
    }
    $ins_sth->execute(@flds[0..14], @flds[16..19, 24],
                    $e_mailings, $snail_mailings, $share_mailings,
                    $deceased);
    my %seen;
    for my $a (grep {!$seen{$_}++} split //, $affils) {
        if (exists $affil_id{$a}) {
            $ap_sth->execute($affil_id{$a}, $flds[16]);
        }
        elsif (! exists $no_affil{$a}) {
            print "no affil letter $a??\n";
            $no_affil{$a} = 1;
        }
    }
}
if ($mysql) {
    $dbh->do("create index i_last on people(last)");
    $dbh->do("create index i_akey on people(akey)");
    $dbh->do("create index i_sps  on people(id_sps)");
}
else {
    $dbh->do("create index if not exists i_last on people(last)");
    $dbh->do("create index if not exists i_akey on people(akey)");
    $dbh->do("create index if not exists i_sps  on people(id_sps)");
}
print "\n";
close $people;
__DATA__
    ? Cap(alltrim(last))  + t + ;       0
	  Cap(alltrim(first)) + t + ;
      Cap(alltrim(sanskrit)) + t + ;
	  Cap(alltrim(addr1)) + t + ;
	  Cap(alltrim(addr2)) + t + ;
	  Cap(alltrim(city)) + t + ;        5
	  Cap(alltrim(st_prov)) + t + ;
	  alltrim(zip_post) + t + ;
	  Cap(alltrim(country)) + t + ;
	  alltrim(akey) + t + ;
	  alltrim(tel_home) + t + ;         10
	  alltrim(tel_work) + t + ;
	  alltrim(tel_cell) + t + ;
	  alltrim(email) + t + ;
	  alltrim(sex) + t + ;
	  alltrim(name_pref) + t + ;        15
	  alltrim(str(id)) + t + ;
	  alltrim(str(id_sps)) + t + ;
	  dtoc(date_updat) + t + ;
	  dtoc(date_entrd) + t + ;
	  alltrim(affil) + t + ;            20
	  dtoc(date_hf) + t + ;
	  dtoc(date_path) + t + ;
	  dtoc(date_lm) + t + ;
	  Cap(alltrim(comment))
