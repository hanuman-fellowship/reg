#!/usr/bin/env perl
#
# test plan - click on meal_information link
#
#
#
use strict;
use warnings;
use lib '../lib';

use CGI;
use CGI::Carp qw/fatalsToBrowser/;
my $q = CGI->new();
print $q->header();

use Util qw/
    db_init
    model
/;
my $c = db_init();
use Global qw/
    %string
    init_string
/;
init_string($c);

use Template;
use Date::Simple qw/
    date
    today
/;
Date::Simple->default_format("%B %e '%q");

my @meals = qw/
    breakfast
    lunch
    dinner
/;

my %stash;
my $today = today();
my $start = $today + 2;
$stash{startDate} = $start->format("%m/%d/%Y");

sub pennies {
    my ($amt) = @_;
    $amt = sprintf "%.2f", $amt;
    $amt =~ s{[.]00$}{}xms;
    $amt;
}

sub oops {
    my ($msg) = @_;
    Template->new(
        INTERPOLATE => 1,
    )->process(
        "mr_err.tt2",
        { err => $msg },
    );
    exit;
}

my %cookie = $q->cookie(-name => 'user_data');
for my $w (qw/
    first last addr1 addr2
    city st_prov zip_post country
    cell
    email1
/) {
    $stash{$w} = $cookie{$w} || "";
}
my @date_ranges;
my @disabled;
for my $type (qw/ Meal Lunch /) {
    my (@events) = model($c, 'Event')->search(
        {
            name  => { 'regexp' => "No.*$type" },
            edate => { '>='   => today()->as_d8() },
        },
        {
            order_by => 'sdate',
        }
    );
    for my $e (@events) {
        my ($sdate, $edate) = ($e->sdate_obj, $e->edate_obj);
        my $lunch = $type eq 'Lunch'? 1: 0;
        push @date_ranges, [ $sdate, $edate, $lunch ];
        if (! $lunch) {
            my $d = $sdate;
            while ($d <= $edate) {
                push @disabled, $d->format("%m/%d/%Y");
                ++$d;
            }
        }
    }
}
$stash{date_ranges} = \@date_ranges;
$stash{disabled} = join ', ', map { qq!'$_'! } @disabled;

my %params = $q->Vars();

sub no_lunch {
    my ($dt, $dates_aref) = @_;
    for my $dr (@$dates_aref) {
        if ($dr->[0] <= $dt && $dt <= $dr->[1]) {
            return 1;
        }
    }
    return 0;
}

my $type = delete $params{type};
$stash{dow_disabled} = '';
if ($type) {
    # $type is either 'family' or 'guest'
    $stash{type} = $type;
    if ($type eq 'family') {
        $stash{dow_disabled} = "daysOfWeekDisabled: '0',";
    }
    # overwrite the strings we use below with the
    # proper family or guest cost.
    for my $m (@meals) {
        $string{"$m\_cost"} = $string{"$m\_cost_$type"};
        $string{"$m\_cost_5_12"} = $string{"$m\_cost_5_12_$type"};
    }
}
if (! %params) {
    Template->new(
        INTERPOLATE => 1,
    )->process(
        "meal_request.tt2",
        {
            %string,
            %stash
        },
    );
    exit;
}

my %totals;
my @requests;
DATE:
for my $i (1 .. 3) {
    my $d = $params{"date$i"};
    if (! $d) {
        next DATE;
    }
    my $dd = date($d);
    if (! $dd) {
        oops "Illegal date format: $d";
    }
    my $dow = $dd->day_of_week();
    my $saturday = $dow == 6;
    my $r_href = {};
    $r_href->{date_obj} = $dd;
    $r_href->{d8} = $dd->as_d8();
    $r_href->{child} = $params{"child$i"};
    my $got_one = 0;
    for my $m (@meals) {
        my $v = $params{"$m$i"};
        if ($v && $v !~ m{^\s* \d+ \s* $}xms) {
            oops "Illegal number: $v";
        }
        if ($m eq 'lunch' && $v && $saturday) {
            oops "Sorry, No lunch on Saturday $dd.";
        }
        if ($m eq 'lunch' && $v && no_lunch($dd, \@date_ranges)) {
            oops "Sorry, No lunch is served on $dd.";
        }
        $r_href->{$m} = $v || 0;
        if ($v) {
            $got_one = 1;
            $totals{$r_href->{d8}}{$m} += $v;
        }
    }
    if ($got_one) {
        push @requests, $r_href;
    }
    else {
        oops "No meals were requested on $dd.";
    }
}
if (! @requests) {
    oops "No dates!";
}

#
# would we exceed a maximum?
#
for my $d8 (keys %totals) {
    my %cur_total;
    for my $mr (model($c, 'MealRequests')->search({
                    date => $d8,
                })
    ) {
        for my $m (@meals) {
            $cur_total{$m} += $mr->$m;
        }
    }
    for my $m (@meals) {
        if ($cur_total{$m} + $totals{$d8}{$m} > $string{"$m\_daily_max"}) {
            oops "Sorry, we have reached the maximum number"
               . " of meal requests for $m on "
               . date($d8)->format("%B %e '%q")
               . ".";
        }
    }
}

my $tot_cost = 0;
my $summary = '';
my @encoded_requests;
for my $r_href (@requests) {
    my $ch = $r_href->{child}? '_5_12': '';
    my $cost = 0;
    for my $m (@meals) {
        $cost += $r_href->{$m}*$string{"$m\_cost$ch"}
    }
    $cost = pennies($cost);
    $summary .= 'On '
             .  $r_href->{date_obj}->format("%B %e '%q")
             . ': '
             ;
    my $who = $r_href->{child}? ' - for a child aged 5-12': '';
    $summary .= join ', ',
                map {
                    $r_href->{$_}? "$r_href->{$_} for $_": ()
                } 
                @meals
                ;
    $summary .= "$who: &nbsp;&nbsp; Cost \$$cost<br>";
    $tot_cost += $cost;
    push @encoded_requests, $r_href->{d8},
                            @{$r_href}{@meals},     # :)
                            ($r_href->{child}? 1: 0)
                            ;
}

$tot_cost = pennies($tot_cost);
$stash{total_cost} = $tot_cost;
if (@requests > 1) {
    $summary .= "<p>Total cost is \$$tot_cost";
}
$stash{summary} = $summary;
$stash{encoded_requests} = join ',', @encoded_requests;

# if there is cookie information, it will also be used.
my %cookie = $q->cookie(
    -domain => '.mountmadonna.org',
    -name   => 'user_data',
);
for my $w (qw/
    first last sanskrit addr1 addr2
    city st_prov zip_post country
    cell
    email1
/) {
    $stash{$w} = $cookie{$w} || "";
}
Template->new(
    INTERPOLATE => 1,
)->process(
    "meal_request2.tt2",
    \%stash,
);
