#!/usr/bin/env perl
use strict;
use warnings;
use lib '../lib';
use Util qw/
    db_init
    model
    commify
    trim
    housing_types
    add_activity
    fee_types
    JON
    styled
    check_read_only
/;

my $new_way = 1;        # to be removed when the time is right

use CGI;
my $q = CGI->new;

my $c = db_init();
use Template;
my %P = %{ $q->Vars() };

use CGI::Carp qw/fatalsToBrowser/;

use Global qw/
    %string
    init_string
/;
init_string($c);

use Date::Simple qw/
    date
/;
Date::Simple->default_format("%B %e '%q");

my $bin = '/var/www/src/cgi-bin';

my $grid_cgi = $0;
my $email_check = $grid_cgi !~ m{grid_ne}xms;
$grid_cgi =~ s{/var/www/src}{}xms;

my $code = $P{code};
my ($rental) = model($c, 'Rental')->search({
                   grid_code => $code,
               });
if (! $rental) {
    print "Sorry, there is no rental for code $code.";    
    exit;
}
my $rental_id = $rental->id;
#if ($rental_id != 2031) {       # the Art of Living id (2031)
#    check_read_only();          # can disable this on Dec 1
#}                               # when they leave
print $q->header;

sub dump_grid {
    my ($fname) = @_;
    open my $out, '>', $fname;
    for my $g (model($c, 'Grid')->search(
                   { rental_id => $rental_id },
                   { order_by  => 'name'     }
               )
    ) {
        print {$out} join(' ', $g->name, $g->notes, $g->house_id,
                               $g->bed_num, $g->occupancy), "\n";
    }
    close $out;
}
my $coord = $rental->coordinator() || $rental->contract_signer();
if (! $coord) {
    print "Sorry, there is no Contact Person for this rental.";
    exit;
}
my $rental_name = $rental->name_trimmed;

my (@houses, %fixed_cost_for_house);

# fixed cost houses
for my $line (split /\|/, $rental->fch_encoded()) {
    my ($cost, @house_ids) = split ' ', $line;
    for my $hid (@house_ids) {
        $fixed_cost_for_house{$hid} = $cost;
    }
}

# housing types and cost
my $hc = $rental->housecost();
my %hcost = $hc->get_columns();
my $sd = substr($rental->sdate(), 4, 4);        # MMDD
my $winter = ! (   $string{center_tent_start} <= $sd
                && $sd                        <= $string{center_tent_end});

my $htypes;
if ($new_way) {
    $htypes = fee_types($c, $hc);
}
else {
    # OLD WAY
    my @htypes;
    HTYPE:
    for my $t (housing_types(1)) {
        if ($winter && $t eq 'center_tent') {
            next HTYPE;
            # see comment below about center_tent sites
            # being used during the winter.
        }
        my $cost = $hc->$t;
        if (! $cost) {
            # don't display house cost if it's zero
            next HTYPE;
        }
        $hcost{$t} = $cost;     # for reference below
        push @htypes, {
            cost => $cost,
            desc => $string{$t},
        };
    }
    $htypes = [ sort { $b->{cost} <=> $a->{cost} } @htypes ];
}

# houses that have been assigned to this rental
for my $b ($rental->rental_bookings()) {
    my $house = $b->house;
    push @houses, {
        id    => $house->id,
        name  => $house->name_disp,
        max   => $house->max,
        bath  => $house->bath,
        cabin => $house->cabin,
        tent  => $house->tent,
        own   => 1,
        cottage => $house->cottage,
        class => ($fixed_cost_for_house{$house->id}? 'fixed': 'normal'),
    };
}

#
# pay attention... this is bizarre and tricky.
#
# Own Van and Commuting is not kept track of in the rental
# since the maximum # of beds is dynamic - and it is controlled by the user
# not Reg.   If the user has changed
# the maximum # of beds they will appear in the grid table.
# So look there (if it exists) for the max and append to @houses.
# BUT... the expanded number of Own Van and Commuting is
# _not_ in the grid table yet... :)
# so look in the %P data!
#
my %max = ();
$max{1001} = 5;
$max{1002} = 5;
my @grid = model($c, 'Grid')->search({
    rental_id => $rental_id,
    house_id => { -in => [ 1001, 1002 ] },
});
for my $g (@grid) {
    my $h_id = $g->house_id;
    my $bed_num = $g->bed_num;
    if ($max{$h_id} < $bed_num) {
        $max{$h_id} = $bed_num;
    }
}
for my $k (1001, 1002) {
    push @houses,
    {
        id   => $k,
        name => $k == 1001? 'Own Van'
                :           'Commuting',
        max  => $max{$k},
        bath => 0,
        tent => 0,
        own  => 0,
    };
}

my $sdate = $rental->sdate_obj;
my $edate = $rental->edate_obj;
my $nnights = ($edate - $sdate) || 1;
    # || 1 for one day rentals where everyone is commuting
my @days;
my $days = join '',
           map { "<th align=center>" . ($sdate + $_)->format("%s") . "</th>" }
           0 .. $nnights-1;

if ($P{by_name}) {
    my %house_name_for;
    for my $href (@houses) {
        my $s = $href->{name};
        if ($href->{bath}) {
            $s .= " - b";
        }
        $house_name_for{$href->{id}} = $s;
    }
    my @people;
    my $gtotal = 0;
    GRID:
    for my $g (model($c, 'Grid')->search({
                   rental_id => $rental_id,
               })
    ) {
        my $house_id = $g->house_id; 
        my $name = $g->name;
        my $notes = $g->notes;
        my @days = $g->occupancy =~ m{(\d)}xmsg;
        my $cost = $g->cost;
        if (! int($cost)) {
            # we don't want zero cost rows
            next GRID;
        }
        # check for late arrivals and early departures
        # we won't worry about missing days in the middle.
        my $ds = $sdate;
        my $de = $edate;
        my $i = 0;
        while ($days[$i] == 0) {
            ++$i;
        }
        $ds += $i;
        my $j = -1;
        while ($days[$j] == 0) {
            --$j;
        }
        $de += $j+1;
        my $dates = ($i != 0 || $j != -1)? $ds->day . '-' . $de->day: '';
        push @people, {
            name => $name,
            house => $house_name_for{$house_id},
            cost => $cost,
            dates => $dates,
            notes => $notes,
        };
        $gtotal += $cost;
    }
    # trim off the .00
    for my $p (@people) {
        $p->{cost} =~ s{[.]00}{}xms;
    }
    @people = sort {
                  lc $a->{name} cmp lc $b->{name}
              }
              @people;
    my $stash = {
        new_way => $new_way,
        cgi     => $string{cgi},
        first   => $coord->first,
        last    => $coord->last,
        name    => $rental_name,
        housecost_type => $hc->type,
        fixed_cost_houses => $rental->fixed_cost_houses,
        sdate   => $sdate,
        edate   => $edate,
        people  => \@people,
        houses  => \@houses,
        nnights => $nnights,
        days    => $days,
        total   => commify($gtotal),
        code    => $code,
        htypes  => $htypes,
        action  => $grid_cgi,
    };
    my $tt = Template->new({
        INTERPOLATE => 1,
        EVAL_PERL    => 0,
    });
    $tt->process(
        styled('ngrid.tt2'),
        $stash,
    ) or die $tt->error;
    exit;
}

if ($P{process}) {
    # get all the input data
    # and prepare to add rows to the grid table

    my @records;        # an array of arrayrefs
                        # records to add.
    my $alert = '';

    my @counts = (0) x $nnights;        # population each night
    my @need_email;
    my ($cot1, $cot3) = (0, 0);
    my $cot3_name;
    my $gtotal = 0;
    my @fields;
    my %cost_issue;
    HOUSE:
    for my $h (@houses) {
        my $id = $h->{id};
        if ($id >= 1001) {      # own van/commuting
            my $per_night = $hcost{$id == 1001? "own_van": "commuting"};
            my $bed = 1;
            BED:
            while (exists $P{"p$id\_$bed"}) {
                @fields = ();
                push @fields, house_id => $id;
                push @fields, bed_num => $bed;
                my $name = trim($P{"p$id\_$bed"} || "");
                my $notes = trim($P{"x$id\_$bed"} || "");
                my $no_email;
                if ($email_check
                    &&
                    ! ($notes =~ m{no \s+ email}xmsi
                       ||
                       $notes =~ m{[\w_.-]+[@][\w+.]+}xms
                )) {
                    # what to do?
                    # $name has no email address (or 'no email')
                    $no_email = 1;
                }
                push @fields, name => $name;
                push @fields, notes => $notes;
                # how many people?
                my @peeps = split m{\&|\band\b}i, $name;
                my $npeeps = @peeps;
                my $totn = 0;
                my $occupancy = '';
                for my $n (1 .. $nnights) {
                    my $occ = $P{"n$id\_$bed\_$n"} || 0;
                    if ($occ) {
                        # add to the counts on this night
                        $counts[$n-1] += $npeeps;
                    }
                    $occupancy .= "$occ ";
                    $totn += $occ;
                }
                if ($name && $totn == 0) {
                    my $type = $id == 1001? "Own Van": "Commuting";
                    $alert .= "$name in $type has no nights checked!\\n";
                    $P{"cl$id\_$bed"} = 1;
                }
                push @fields, occupancy => $occupancy;
                my $cost = $totn * $per_night * $npeeps;

                if ($name && ($cost || $totn == 0)) {
                    # include records where there were
                    # no nights checked.
                    push @fields, cost => $cost;
                    $P{"c$id\_$bed"} = $cost || "";
                    $gtotal += $cost;
                    if ($cost && $no_email) {
                        push @need_email,
                             ($id == 1001? 'Own Van': 'Commuting') . " - $name";
                    }
                    # save the fields for adding later
                    push @records, [ @fields ] ;
                }
                ++$bed;
            }
            --$bed;     # we went one beyond
            next HOUSE;
        }

        # Now we deal with actual rooms - not own van or commuting
        #
        my $suffix = $h->{bath}?  '_bath'
                    :$h->{cabin}? '_cabin'
                    :              '';
                    ;
        BED:
        for my $bed (1 .. $h->{max}) {
            my $override_np = 0;
            if ($P{"p$id\_$bed"} =~ m{-\s*([12347])\s*$}) {
                # what's this???
                # a suffix of -\d
                # more people in a room than expected??
                # or less.   this forces the number of people.
                # it ignores who is actually sharing the room.
                # it applies to all nights regardless of
                # people coming or going.
                $override_np = $1;
            }
            @fields = ();
            push @fields, house_id => $id;
            push @fields, bed_num => $bed;
            my $name = trim($P{"p$id\_$bed"} || "");
            my @peeps = split m{\&|\band\b}i, $name;
            my $npeeps = @peeps;

            my $notes = trim($P{"x$id\_$bed"} || "");
            push @fields, name => $name;
            push @fields, notes => $notes;

            my $no_email;
            if ($email_check
                &&
                ! ($notes =~ m{no \s+ email}xmsi
                   ||
                   $notes =~ m{[\w_.-]+[@][\w+.]+}xms
            )) {
                # what to do?
                # $name has no email address (or 'no email')
                $no_email = 1;
            }
            my $cost = 0;       # this is the cost of the house itself
            my $occupancy = '';
            NIGHT:
            for my $n (1 .. $nnights) {
                my $occ = $P{"n$id\_$bed\_$n"} || 0;
                my $Ncost = 0;  # night cost
                $occupancy .= "$occ ";
                if ($occ) {
                    #
                    # bump the population for this night
                    $counts[$n-1] += $npeeps;

                    #
                    # quick hack for fixed cost house
                    #
                    if ($fixed_cost_for_house{$id}) {
                        $cost += $fixed_cost_for_house{$id};
                        next NIGHT;
                    }
                    if ($h->{tent}) {
                        $Ncost = ($h->{own})? $hcost{own_tent}
                                :             $hcost{center_tent}
                                ;
                        if (! $Ncost) {
                            $alert .= "Zero cost for tent $h->{name}.\\n";
                            $cost_issue{$name} = 1;
                            $Ncost = 10000;
                        }
                        $cost += $Ncost;
                        next NIGHT;
                    }
                    # how many people in this room this night?
                    #
                    my $np = 0;
                    for my $b (1 .. $h->{max}) {
                        if ($P{"n$id\_$b\_$n"}) {
                            ++$np;
                        }
                    }
                    if ($override_np) {
                        $np = $override_np;
                    }
                    if (my $cot = $h->{cottage}) {
                        if ($cot == 1) {
                            $cot1 = 1;
                            $Ncost = ($np == 1)? $hcost{single_cottage1}
                                    :            $hcost{dble_cottage1}
                                    ;
                        }
                        elsif ($cot == 2) {
                            $Ncost = ($np == 1)? $hcost{single_cottage2}
                                    :            $hcost{dble_cottage2}
                                    ;
                        }
                        elsif ($cot == 4) {
                            $Ncost = ($np == 1)? $hcost{single_cottage3}
                                    :            $hcost{dble_cottage3}
                                    ;
                        }
                        elsif ($cot == 3) {
                            $cot3 = 1;
                            $cot3_name = $name; # the person's name
                            $Ncost = $hcost{whole_cottage};
                        }
                        else {
                            # ???
                        }
                    }
                    else {
                        $Ncost = ($np == 1            )? $hcost{"single$suffix"}
                                :($np == 2            )? $hcost{"dble$suffix"}
                                :($np == 3            )? $hcost{triple}
                                :(4 <= $np && $np <= 7)? $hcost{dormitory}
                                :                        $hcost{economy}
                                ;
                    }
                    if ($np && ! $Ncost) {
                        my $day = ($sdate + $n - 1)->format("%A");
                        $alert .= "There is a problem with the housing type cost for $name in house $h->{name} on $day.\\n";
                        $cost_issue{$name} = 1;
                        $Ncost = 10000;
                    }
                    $cost += $Ncost;
                }
            }
            # If no occupancy ...
            # if a name is present - give a warning
            # if no name or note and no occupancy
            #     skip it.
            # name, email no days - it looks saved
            # but on re-edit that name is gone.
            #
            if ($name && $occupancy !~ /1/) {
                $alert .= "$name in house $h->{name} has no nights checked!\\n";
            }
            push @fields, occupancy => $occupancy;
            #
            # handle more than one person in a tent
            # and children.
            #
            my $tot = 0;
            for my $p (@peeps) {
                $tot += ($p =~ m{\bchild\b}i)? $cost/2
                        :                      $cost
                        ;
            }
            if ($tot && $no_email) {
                push @need_email, $h->{name} . " - $name";
            }
            if ($name && ($tot || $occupancy !~ /1/)) {
                # include records where there were
                # no nights checked.
                push @fields, cost => $tot; # this 'cost' is the *total* cost
                push @records, [ @fields ];
            }

            $gtotal += $tot;
            if ($name !~ m{\S} && ! $tot) {
                $tot = "";
            }
            # we don't want .5 rather .50
            if ($tot =~ m{[.]\d$}xms) {
                $tot = sprintf("%.2f", $tot);
            }
            $P{"c$id\_$bed"} = $tot;        # to be displayed
            if (($tot == 0 && $name)
                || $cost_issue{"$name"}
                || $override_np
                || $name =~ m{\&|\band\b}i
                || $name =~ m{\b/\b}
                || $name =~ m{\bchild\b}i
                || $notes =~ m{\bchild\b}i
            ) {
                # it will be shown in RED as a special case
                # worthy of attention
                $P{"cl$id\_$bed"} = 1;
            }
            else {
                $P{"cl$id\_$bed"} = 0;
            }
        }
    }
    if ($cot1 && $cot3) {
        my $html = "";
        my $tt = Template->new({
            INTERPOLATE => 1,
            EVAL_PERL   => 0,
        });
        $tt->process(
            styled('ram_conflict.tt2'),
            {
                name => $cot3_name,
            },
        ) or die $tt->error;
        exit;
    }
    if (@need_email) {
        my $tt = Template->new({
            INTERPOLATE => 1,
            EVAL_PERL    => 0,
        });
        my $stash = {
            need_email => \@need_email,
        };
        $tt->process(
            styled('need_email.tt2'),
            $stash,       # variables
        ) or die $tt->error;
        exit;
    }

    #
    # all is okay.
    # time to add the accumulated records to the Grid table.

    model($c, 'Grid')->search({
        rental_id => $rental_id,
    })->delete_all();

    for my $aref (@records) {
        model($c, 'Grid')->create({
            rental_id => $rental_id,
            @$aref,
        });
    }

    # now to update three fields in the Rental
    #
    # on the last day
    # the people who slept the night before will have breakfast
    # and maybe lunch.
    #
    push @counts, $counts[-1];

    my $max = 0;
    for my $c (@counts) {
        if ($max < $c) {
            $max = $c;
        }
    }
    $rental->update({
        counts         => (join ' ', @counts),
        grid_max       => $max,
        housing_charge => $gtotal,
    });
    $rental->compute_balance();     # complicated!

    add_activity($c, "grid <a href='/rental/view/$rental_id'>$rental_name</a>");

    #
    # now display it along with the costs
    #
    my $tt = Template->new({
        INTERPOLATE => 1,
        EVAL_PERL    => 0,
    });
    if ($alert) {
        $alert = "Please call the Guest Services Director to resolve the following issues.  Phone number: (408) 846-4009\\n\\n$alert";
    }
    my $stash = {
        alert   => $alert,
        new_way => $new_way,
        cgi     => $string{cgi},
        first   => $coord->first,
        last    => $coord->last,
        name    => $rental_name,
        housecost_type => $hc->type,
        fixed_cost_houses => $rental->fixed_cost_houses,
        sdate   => $sdate,
        edate   => $edate,

        data    => \%P,
            # we pass %P to display, however...
            # it may contain erroneous data
            # like notes and days checked but no name
            # oh well.
            # this will show on the next page
            # but will disappear when re-editing.
        houses  => \@houses,
        nnights => $nnights,
        days    => $days,
        total   => commify($gtotal),
        code    => $code,
        htypes  => $htypes,
        action  => $grid_cgi,
    };
    $tt->process(
        styled('sgrid.tt2'),
        $stash,
    ) or die $tt->error;
    exit;
}

#
# present the input form populated from the data file, if present
#
my %data = ();

for my $g (model($c, 'Grid')->search({
               rental_id => $rental_id,
           })
) {
    my $id     = $g->house_id;
    my $bed    = $g->bed_num;
    my $name   = $g->name;
    my $notes  = $g->notes;
    my @nights = $g->occupancy =~ m{(\d)}xmsg;
    $data{"p$id\_$bed"} = $name;
    $data{"x$id\_$bed"} = $notes;
    for my $n (1 .. $nnights) {
        $data{"n$id\_$bed\_$n"} = $nights[$n-1];
    }
}

my $tt = Template->new({
    INTERPOLATE => 1,
    EVAL_PERL    => 0,
});
my $stash = {
    new_way => $new_way,
    cgi     => $string{cgi},
    # from the rental object:
    sdate   => $rental->sdate_obj,
    edate   => $rental->edate_obj,
    name    => $rental_name,
    first   => $coord->first,
    last    => $coord->last,
    fixed_cost_houses => $rental->fixed_cost_houses,
    housecost_type => $hc->type,
    htypes  => $htypes,

    # from the data file:
    data    => \%data,
    houses  => \@houses,
    nnights => $nnights,
    days    => $days,
    code    => $code,
    action  => $grid_cgi,
};
$tt->process(
    styled('grid.tt2'),
    $stash,
) or die $tt->error;
