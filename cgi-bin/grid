#!/usr/bin/env perl
use strict;
use warnings;

use lib '../lib';
use Util qw/
    db_init
    model
    commify
    trim
    housing_types
    JON
/;
use Template;
use CGI;
my $q = CGI->new;
my %P = %{ $q->Vars() };

use CGI::Carp qw/fatalsToBrowser/;
print $q->header;

my $c = db_init();
use Global qw/
    %string
/;
Global->init($c, 1, 1);     # to get %strings:
use Date::Simple qw/
    date
/;
Date::Simple->default_format("%B %e '%q");

my $grid_cgi = $0;
$grid_cgi =~ s{.*/}{}xms;

my $email_check = $grid_cgi eq 'grid';

my $code = $P{code};
my ($rental) = model($c, 'Rental')->search({
                   grid_code => $code,
               });
if (! $rental) {
    print "Sorry, there is no rental for code $code.";    
    exit;
}
my $rental_id = $rental->id;
my $coord = $rental->coordinator() || $rental->contract_signer();

my (@houses, @htypes, %fixed_cost_for_house);

# fixed cost houses
for my $line (split /\|/, $rental->fch_encoded()) {
    my ($cost, @house_ids) = split ' ', $line;
    for my $hid (@house_ids) {
        $fixed_cost_for_house{$hid} = $cost;
    }
}

# housing types and cost
my $hc = $rental->housecost();
my %hc;
my $sd = substr($rental->sdate(), 4, 4);        # MMDD
my $winter = ! (   $string{center_tent_start} <= $sd
                && $sd                        <= $string{center_tent_end});
HTYPE:
for my $t (housing_types(1)) {
    if ($winter && $t eq 'center_tent') {
        next HTYPE;
        # see comment below about center_tent sites
        # being used during the winter.
    }
    my $cost = $hc->$t;
    $hc{$t} = $cost;     # for reference below
    push @htypes, {
        name => $t,
        cost => $cost,
        desc => $string{$t},
    };
}
@htypes = sort { $a->{cost} <=> $b->{cost} } @htypes;

# houses that have been assigned to this rental
for my $b ($rental->rental_bookings()) {
    my $house = $b->house;
    push @houses, {
        id    => $house->id,
        name  => $house->name_disp,
        max   => $house->max,
        bath  => $house->bath,
        tent  => $house->tent,
        own   => 1,
        cottage => $house->cottage,
        class => ($fixed_cost_for_house{$house->id}? 'fixed': 'normal'),
    };
}

#
# pay attention... this is bizarre and tricky.
#
# Own Van and Commuting is not kept track of in the rental
# since the maximum # of beds is dynamic - and it is controlled by the user
# not Reg.   If the user has changed
# the maximum # of beds they will appear in the grid table.
# So look there (if it exists) for the max and append to @houses.
#
my %max = ();
$max{1001} = 5;
$max{1002} = 5;
my @grid = model($c, 'Grid')->search({
    rental_id => $rental_id,
    house_id => { -in => [ 1001, 1002 ] },
});
for my $g (@grid) {
    my $h_id = $g->house_id;
    my $bed_num = $g->bed_num;
    if ($max{$h_id} < $bed_num) {
        $max{$h_id} = $bed_num;
    }
}
for my $k (1001, 1002) {
    push @houses,
    {
        id   => $k,
        name => $k == 1001? 'Own Van'
                :           'Commuting',
        max  => $max{$k},
        bath => 0,
        tent => 0,
        own  => 0,
    };
}

my $sdate = $rental->sdate_obj;
my $edate = $rental->edate_obj;
my $nnights = ($edate - $sdate) || 1;
    # || 1 for one day rentals where everyone is commuting
my @days;
my $days = join '',
           map { "<th align=center>" . ($sdate + $_)->format("%s") . "</th>" }
           0 .. $nnights-1;

if ($P{by_name}) {
    my %house_name_for;
    for my $href (@houses) {
        $house_name_for{$href->{id}} = $href->{name};
    }
    my @people;
    my $gtotal = 0;
    for my $g (model($c, 'Grid')->search({
                   rental_id => $rental_id,
               })
    ) {
        my $house_id = $g->house_id; 
        my $name = $g->name;
        my $notes = $g->notes;
        my @days = $g->occupancy =~ m{(\d)}xmsg;
        my $cost = $g->cost;
        if (! int($cost)) {
            # maybe not have zero cost rows???
            next LINE;
        }
        # check for late arrivals and early departures
        # we won't worry about missing days in the middle.
        my $ds = $sdate;
        my $de = $edate;
        my $i = 0;
        while ($days[$i] == 0) {
            ++$i;
        }
        $ds += $i;
        my $j = -1;
        while ($days[$j] == 0) {
            --$j;
        }
        $de += $j+1;
        my $dates = ($i != 0 || $j != -1)? $ds->day . '-' . $de->day: '';
        push @people, {
            name => $name,
            house => $house_name_for{$house_id},
            cost => $cost,
            dates => $dates,
            notes => $notes,
        };
        $gtotal += $cost;
    }
    @people = sort {
                  lc $a->{name} cmp lc $b->{name}
              }
              @people;
    my $stash = {
        first   => $coord->first,
        last    => $coord->last,
        name    => $rental->name,
        housecost_type => $hc->type,
        fixed_cost_houses => $rental->fixed_cost_houses,
        sdate   => $sdate,
        edate   => $edate,
        people  => \@people,
        houses  => \@houses,
        nnights => $nnights,
        days    => $days,
        total   => commify($gtotal),
        code    => $code,
        htypes  => \@htypes,
        action  => $grid_cgi,
    };
    my $html;
    my $tt = Template->new({
        INTERPOLATE => 1,
        EVAL_PERL    => 0,
    });
    $tt->process(
        "ngrid.tt2",  # template
        $stash,       # variables
        \$html,       # output
    ) or die $tt->error;
    print $html;
    exit;
}

if ($P{process}) {
    # get the input data
    # and add rows to the grid table
    #
    # but first clear all rows for this rental
    model($c, 'Grid')->search({
        rental_id => $rental_id,
    })->delete_all();

    my @need_email;
    my ($cot1, $cot3) = (0, 0);
    my $cot3_name;
    my $gtotal = 0;
    my @fields;
    HOUSE:
    for my $h (@houses) {
        my $id = $h->{id};
        if ($id >= 1001) {      # own van/commuting
            my $per_night = $hc{$id == 1001? "own_van": "commuting"};
            my $bed = 1;
            BED:
            while (exists $P{"p$id\_$bed"}) {
                @fields = ();
                push @fields, house_id => $id;
                push @fields, bed_num => $bed;
                my $name = trim($P{"p$id\_$bed"} || "");
                my $notes = trim($P{"x$id\_$bed"} || "");
                my $no_email;
                if ($email_check
                    &&
                    ! ($notes =~ m{no \s+ email}xmsi
                       ||
                       $notes =~ m{[\w_.-]+[@][\w+.]+}xms
                )) {
                    # what to do?
                    # $name has no email address (or 'no email')
                    $no_email = 1;
                }
                push @fields, name => $name;
                push @fields, notes => $notes;
                # how many people?
                my @peeps = split m{\&|\band\b}i, $name;
                my $npeeps = @peeps;
                my $totn = 0;
                my $occupancy = '';
                for my $n (1 .. $nnights) {
                    my $occ = $P{"n$id\_$bed\_$n"} || 0;
                    $occupancy .= "$occ ";
                    $totn += $occ;
                }
                push @fields, occupancy => $occupancy;
                my $cost = $totn * $per_night * $npeeps;

                # very special handling of a housing cost of type Total
                # ???
                #if ($npeeps && $hash{housecost_type} eq 'Total') {
                #    $cost = $hash{single};
                #}

                push @fields, cost => $cost;
                $P{"c$id\_$bed"} = $cost || "";
                $gtotal += $cost;
                if ($cost && $no_email) {
                    push @need_email,
                         ($id == 1001? 'Own Van': 'Commuting') . " - $name";
                }
                model($c, 'Grid')->create({
                    rental_id => $rental_id,
                    @fields,
                });
                ++$bed;
            }
            --$bed;     # we went one beyond
            next HOUSE;
        }

=comment 

???
            #
            # we have $bed 'beds' in this category
            # this may be different from what is in $fname
            # in case the user added 'more'.   so we need
            # to update $fname appropriately. - actually, no.
            #
            if ($bed > $h->{max}) {
                # is this even needed??? do we actually
                # alter the file?  the -data file, yes,
                # but not the other (what's it called?).
                # it's called fname.  the dname is where
                # the number of own tent/van is kept not in fname.
                # come back here and study it more carefully.
                # and then delete it.
                open my $in, "<", $fname
                    or die "cannot open $fname: $!\n";
                open my $out, ">", "/tmp/grid"
                    or die "cannot open /tmp/grid: $!\n";
                while (my $line = <$in>) {
                    if ($line =~ m{^$id\|}) {
                        # this will not happen - 1001, 1002 will
                        # not match!
                        $line =~ s{^($id\|[^\|]*)\|\d+}{$1|$bed};
                    }
                    print {$out} $line;
                }
                close $in;
                close $out;
                rename "/tmp/grid", $fname;
                chmod 0666, $fname;
                $h->{max} = $bed;       # don't forget this!
            }

=cut
        # Non own van/commuting
        my $bath = ($h->{bath})? "_bath"
                  :              ""
                  ;
        for my $bed (1 .. $h->{max}) {
            my $override_np = 0;
            if ($P{"p$id\_$bed"} =~ m{-\s*([12347])\s*$}) {
                $override_np = $1;
            }
            @fields = ();
            push @fields, house_id => $id;
            push @fields, bed_num => $bed;
            my $name = trim($P{"p$id\_$bed"} || "");
            my $notes = trim($P{"x$id\_$bed"} || "");
            push @fields, name => $name;
            push @fields, notes => $notes;

            my $no_email;
            if ($email_check
                &&
                ! ($notes =~ m{no \s+ email}xmsi
                   ||
                   $notes =~ m{[\w_.-]+[@][\w+.]+}xms
            )) {
                # what to do?
                # $name has no email address (or 'no email')
                $no_email = 1;
            }
            my $cost = 0;
            my $occupancy = '';
            NIGHT:
            for my $n (1 .. $nnights) {
                my $occ = $P{"n$id\_$bed\_$n"} || 0;
                $occupancy .= "$occ ";
                if ($occ) {
                    # quick hack for fixed cost house
                    #
                    if ($fixed_cost_for_house{$id}) {
                        $cost += $fixed_cost_for_house{$id};
                        next NIGHT;
                    }
                    if ($h->{tent}) {
                        $cost += ($h->{own})? $hc{own_tent}
                                :             $hc{center_tent}
                                ;
                        next NIGHT;
                    }
                    # how many people in this room this night?
                    #
                    my $np = 0;
                    for my $b (1 .. $h->{max}) {
                        if ($P{"n$id\_$b\_$n"}) {
                            ++$np;
                        }
                    }
                    if ($override_np) {
                        $np = $override_np;
                    }
                    if (my $cot = $h->{cottage}) {
                        if ($cot == 1) {
                            $cot1 = 1;
                            $cost += ($np == 1)? $hc{single_cottage1}
                                    :            $hc{dble_cottage1}
                                    ;
                        }
                        elsif ($cot == 2) {
                            $cost += ($np == 1)? $hc{single_cottage2}
                                    :            $hc{dble_cottage2}
                                    ;
                        }
                        elsif ($cot == 3) {
                            $cot3 = 1;
                            $cot3_name = $name;
                            $cost += $hc{whole_cottage};
                        }
                        else {
                            # ???
                        }
                    }
                    else {
                        $cost += ($np == 1            )? $hc{"single$bath"}
                                :($np == 2            )? $hc{"dble$bath"}
                                :($np == 3            )? $hc{triple}
                                :(4 <= $np && $np <= 7)? $hc{dormitory}
                                :                        $hc{economy}
                                ;
                    }
                }
            }
            push @fields, occupancy => $occupancy;
            #
            # handle more than one person in a tent
            # and children.
            #
            my $tot = 0;
            for my $p (split m{\&|\band\b}i, $name) {
                $tot += ($p =~ m{\bchild\b}i)? $cost/2
                        :                      $cost
                        ;
            }
            # the word child was put in the notes field instead
            # AND there's only one person in the name field.
            if ($notes =~ m{\bchild\b}i && $name !~ m{\&|\band\b}i) {
                $tot = $tot/2;
            }
            $cost = $tot;       # not int()
            if ($cost && $no_email) {
                push @need_email, $h->{name} . " - $name";
            }

            # very special handling of a housing cost of type Total
            # ???
            if ($cost && $hc->type eq 'Total') {
                $cost = $hc{single};
            }
            push @fields, cost => $cost;
            model($c, 'Grid')->create({
                rental_id => $rental_id,
                @fields,
            });

            $gtotal += $cost;
            if ($name !~ m{\S} && ! $cost) {
                $cost = "";
            }
            $P{"c$id\_$bed"} = $cost;
            if (($cost == 0 && $name)
                || $override_np
                || $name =~ m{\&|\band\b}i
                || $name =~ m{\b/\b}
                || $name =~ m{\bchild\b}i
                || $notes =~ m{\bchild\b}i
            ) {
                # it will be shown in RED as a special case
                # worthy of attention
                $P{"cl$id\_$bed"} = 1;
            }
            else {
                $P{"cl$id\_$bed"} = 0;
            }
        }
    }
    if ($cot1 && $cot3) {
        my $html = "";
        my $tt = Template->new({
            INTERPOLATE => 1,
            EVAL_PERL   => 0,
        });
        $tt->process(
            "ram_conflict.tt2",  # template
            {
                name => $cot3_name,
            },
            \$html,       # output
        ) or die $tt->error;
        print $html;
        exit;
    }
    if (@need_email) {
        my $html = "";
        my $tt = Template->new({
            INTERPOLATE => 1,
            EVAL_PERL    => 0,
        });
        my $stash = {
            need_email => \@need_email,
        };
        $tt->process(
            "need_email.tt2",  # template
            $stash,       # variables
            \$html,       # output
        ) or die $tt->error;
        print $html;
        exit;
    }

    # display it with costs
    #
    my $html = "";
    my $tt = Template->new({
        INTERPOLATE => 1,
        EVAL_PERL    => 0,
    });
    my $stash = {
        first   => $coord->first,
        last    => $coord->last,
        name    => $rental->name,
        housecost_type => $hc->type,
        fixed_cost_houses => $rental->fixed_cost_houses,
        sdate   => $sdate,
        edate   => $edate,

        data    => \%P,
        houses  => \@houses,
        nnights => $nnights,
        days    => $days,
        total   => commify($gtotal),
        code    => $code,
        htypes  => \@htypes,
        action  => $grid_cgi,
    };
    $tt->process(
        "sgrid.tt2",  # template
        $stash,       # variables
        \$html,       # output
    ) or die $tt->error;
    print $html;
    exit;
}

#
# present the input form populated from the data file, if present
#
my %data = ();

for my $g (model($c, 'Grid')->search({
               rental_id => $rental_id,
           })
) {
    my $id     = $g->house_id;
    my $bed    = $g->bed_num;
    my $name   = $g->name;
    my $notes  = $g->notes;
    my @nights = $g->occupancy =~ m{(\d)}xmsg;
    $data{"p$id\_$bed"} = $name;
    $data{"x$id\_$bed"} = $notes;
    for my $n (1 .. $nnights) {
        $data{"n$id\_$bed\_$n"} = $nights[$n-1];
    }
}

#
#    LINE:
#
#    while (my $line = <$in>) {
#        chomp $line;
# ????
#        if ($line =~ m{^(own_van|commuting)\|(\d+)}) {
#            $data{$1} = $2;
#            next LINE;
#        }
# ????
#        my ($id, $bed, $name_notes, @nights) = split m{\|}, $line;
#        my $name = $name_notes;
#        my $notes = "";
#        if ($name =~ m{~~}xms) {
#            ($name, $notes) = split m{\s* ~~ \s*}xms, $name_notes;
#        }
#
#=cut

my $html = "";
my $tt = Template->new({
    INTERPOLATE => 1,
    EVAL_PERL    => 0,
});
my $stash = {
    # from the rental object:
    sdate   => $rental->sdate_obj,
    edate   => $rental->edate_obj,
    name    => $rental->name,
    first   => $coord->first,
    last    => $coord->last,
    fixed_cost_houses => $rental->fixed_cost_houses,
    housecost_type => $hc->type,

    # from the data file:
    data    => \%data,
    houses  => \@houses,
    nnights => $nnights,
    days    => $days,
    htypes  => \@htypes,
    code    => $code,
    action  => $grid_cgi,
};
$tt->process(
    "grid.tt2",   # template
    $stash,       # variables
    \$html,       # output
) or die $tt->error;
print $html;
