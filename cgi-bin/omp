#!/usr/bin/env perl
use strict;
use warnings;
use CGI;
my $q = CGI->new();
print $q->header();
use CGI::Carp qw/fatalsToBrowser/;
use Template;
use lib '.', '../lib';
use Util qw/
    db_init
    model
    get_string
/;
my $c = db_init();
use Stripe qw/
    stripe_payment
/;
my $code = $q->param('code');
my $hfs_contact = "Contact the Hanuman Fellowship Membership Secretary.";
if (! $code) {
    print "Missing secure code.<br>$hfs_contact";
    exit;
}
my ($person) = model($c, 'Person')->search({
                   secure_code => $code,
               });
if (! $person) {
    print "Could not find a person with code $code.<br>$hfs_contact";
    exit;
}
my $member = $person->member;
if (! $member) {
    print "You are not an HFS Member.<br>$hfs_contact";
    exit;
}
my $addr = $person->addr1;
if ($person->addr2) {
    $addr .= '<br>' . $person->addr2;
}
my @payments = model($c, 'SponsHist')->search(
                   {
                       member_id => $member->id,
                   },
                   { order_by => "date_payment desc" },
               );
my ($date_payment, $last_amount) = ('', 0);
if (@payments) {
    $date_payment = $payments[0]->date_payment;
    $last_amount = $payments[0]->amount;
}
$date_payment =~ s{\A (\d\d\d\d)(\d\d)(\d\d) \z}{$2/$3/$1}xms;

my $category = $member->category;

my $amount_due = $category eq 'General'? get_string($c, 'mem_gen_amt')
                :                        get_string($c, 'mem_spons_year')
                ;

my %stash = (
    amount       => $amount_due,
    last_amount  => $last_amount,
    date_payment => $date_payment,
    total_paid   => $member->total_paid,
    person       => $person,
    addr         => $addr,
    phone        => ($person->tel_cell || $person->tel_home || ''),
    country      => $person->country || 'USA',
    member_id    => $member->id,    # hidden
    category     => $member->category,
);

$stash{stripe_payment} = stripe_payment(
    name        => $person->name,
    description => 'HFS ' . ucfirst($member->category) . " Membership",
    amount      => $amount_due,
    metadata    => {
                       first     => $person->first,
                       category  => $member->category,
                       amount    => $amount_due,
                       member_id => $member->id,
                   },
    email       => $person->email,
);

Template->new(
    INTERPOLATE => 1,
)->process(
    "omp.tt2",
    \%stash,
);
