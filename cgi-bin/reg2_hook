#!/usr/bin/env perl
use strict;
use warnings;
use CGI;
my $q = CGI->new();
print $q->header();
use lib '.', '../lib';
use Stripe qw/
    metadata
/;
use Template;
my $tt = Template->new(
             INTERPOLATE => 1
         );
use Util qw/
    add_activity
    email_letter
    db_init
    get_string
    model
    JON
    styled
/;
my $c = db_init();

use Date::Simple qw/
    date
    today
/;
use Time::Simple qw/
    get_time
/;
use Data::Dumper;
$Data::Dumper::Sortkeys = 1;

my %P;
my $metadata = $q->param('metadata');
if ($metadata) {
    # there was no payment via Stripe
    my $VAR1;   # inside the $metadata...
    my $href = eval $metadata;
    %P = %$href;
    $P{transaction_id} = time();  # no dups, right?
}
else {
    %P = metadata($q);
}
# timestamp it
$P{date} = today()->format("%D");
$P{time} = get_time()->t24();

my $d = Dumper(\%P);

my $f = "N$P{transaction_id}";
open my $out, '>', "/var/Reg/online/$f";
print {$out} $d;
close $out;

add_activity($c,
      "Online reg <a href='/registration/get_online/$f'>"
      . "$P{first} $P{last}</a>"
      . " for <a href='/program/view/$P{pid}'>$P{title}</a>"
);

if ($P{pid}) {
    # not a personal retreat or mountain experience
    # we need to set sdate and edate from the program
    my $prog = model($c, 'Program')->find($P{pid});
    $P{sdate} = $prog->sdate;
    $P{edate} = $prog->edate;
}
# make them objects so we can format them
$P{sdate} = date($P{sdate});
$P{edate} = date($P{edate});

# send email to the person to confirm
my $html;
$P{sending_email} = 1;
$P{cgi} = get_string($c, 'cgi');
$tt->process(
    styled('reg_message.tt2'),
    \%P,
    \$html,
) or JON $tt->template_error;
email_letter($c,
    to      => "$P{first} $P{last} <$P{email}>",
    from    => 'programs@mountmadonna.org',
    subject => "Online Registration for $P{title}",
    html    => $html,
);

# and a similar message on the screen
$P{sending_email} = 0;
$tt->process(
    styled('reg_message.tt2'),
    \%P,
) or JON $tt->template_error;
