#!/usr/bin/env perl
# Look for 'x_
use strict;
use warnings;
use CGI;
my $q = CGI->new();
use CGI::Carp qw/fatalsToBrowser/;
use lib '.', '../lib';

use Template;
use Date::Simple qw/
    today
    date
/;
use HousingNames qw/
    %housing_name
/;
use File::Copy qw/
    copy
/;
use Util qw/
    db_init
    model
    get_string
    JON
/;
my $c = db_init();

use Stripe qw/
    stripe_payment
/;

#
# gather all the form elements into a hash
#
my %form = $q->Vars();
my $ME = $form{mountain_experience};
for my $w (keys %form) {
    $form{$w} =~ s{^\s*|\s*$}{}g;       # trim the fields
}
# form defaults
#
if (! ($form{hascar} || $form{carpool})) {
    $form{from_where} = 'Home';
}
if ($form{hascar}) {
    $form{carpool} = "yes";
}
if ($form{country} !~ /\S/) {
    $form{country} = "USA";     # default
}

# prepare the cookie with the form values
# to include in the header.  Remove the
# special requests from the cookie.
# It could be too long and make trouble.
# Delete others as well.
#
my %cookie = %form;
# plink??
delete @cookie{qw/
    request
    plink
    name
    dates
    progchoice
    pid
    title
    Submit
    advertiserName
    leader_names
    green_amount
    email2
/};
my $cookie = $q->cookie(
    -name    => 'user_data',
    -value   => \%cookie,
    -expires => '+10y',     # i.e. don't expire
    -domain  => 'akash2.mountmadonna.org',      # ??
);
print $q->header(-cookie => $cookie);

sub oops {
    my ($err, $back) = @_;
    Template->new(INTERPOLATE => 1)->process(
        'err.tt2',
        {
            back => $back,
            err  => $err 
        },
    );
    exit;
}

my $pid = $form{pid};
my $prog;
if ($pid) {
    $prog = model($c, 'Program')->find($pid);
}
else {
    # PR or ME
    # find the Personal Retreat program containing the date $arr_date
    my $sdate = date($form{sdate});
    my $d8 = $sdate->as_d8();
    ($prog) = model($c, 'Program')->search({
                name  => { -like => '%personal%retreat%' },
                sdate => { '<=' => $d8 },
                edate => { '>=' => $d8 },
            });
}
if (! $prog) {
    oops "Sorry, program not found.\n";
}

#
# look in the form elements for errors.
# most were caught in reg1 javascript.
#
my $err;

my $covid_vax = $q->param('covid_vax');
my $card;
if ($covid_vax) {
    $card = $q->upload('card');       # can't get via Vars?
    if (! $card) {
        $err .= "<li>Missing COVID-19 Vaccination card image";
    }
}
my ($sdate, $edate, $ndays);		# only for Personal Retreats 
my $PR = $form{name} =~ m{personal\s+retreat}xmsi;
if ($PR) {
    $sdate = date($form{sdate});
    $edate = date($form{edate});
    $ndays = $edate - $sdate;
}
my $house1 = $form{house1};
my $house2 = $form{house2};
if (! $ME
    && $sdate && $edate && $ndays == 0
    && (   $house1 ne 'commuting'
        || $house2 ne 'commuting')
) {
    $err .= "<li>For same day Personal Retreats both housing choices"
         .  " must be 'Commuting'.";
}
my $shared_housing_regex = qr{dormitory|dble|triple}xmsi;
my $first_last_regex     = qr{[a-z]{2}}xmsi;
if ($covid_vax
    &&
    (   $house1 =~ $shared_housing_regex
     || $house2 =~ $shared_housing_regex)
    &&
    (   $form{withwhom_first} !~ $first_last_regex
     || $form{withwhom_last}  !~ $first_last_regex)
) {
    $err .= "<li>You requested shared housing"
         .  " (Dormitory, Triple, or Double)<br>"
         .  "but did not give the name of the person"
         .  " with whom you will share the room.";
}
if ($prog->footnotes =~ m{\*}
    && $form{ceu_license}
    && $form{ceu_license} !~ m{^comp$}i
) {
    my $begin = "<li>To qualify for a CEU certificate for this program"
              . " you must have a license number beginning with";
    if ($prog->footnotes =~ m{\*\*}) {
        if ($form{ceu_license} !~ m{^(RN|LSW|MFT|LCS)}i) {
            $err .= "$begin RN, LSW, MFT, or LCS.";
        }
    }
    else {
        if ($form{ceu_license} !~ m{^RN}i) {
            $err .= "$begin RN.<br>If you only want a certificate of completion enter COMP for the license #.";
        }
    }
}
my $green_amount = $form{green_amount};
if ($green_amount && $green_amount !~ m{^\s*\$?\s*\d+([.]\d\d)?\s*$}) {
    $err .= "<li>Illegal amount for MMC General Fund Donation: $green_amount";
}
$green_amount =~ s{[\s\$]}{}g;

# if payment is by donation
# we either have 'donation' or 'donation_tier'.
my $tname = $prog->tuition_name || 'tuition';
my $donation_amt;
my $slide_tuition = 0;
if (exists $form{donation_tier}) {
    my $s = $form{donation_tier};
    if ($s eq 'other') {
        $donation_amt = $form{donation_tier_other_amount};
        if ($donation_amt && $donation_amt !~ m{^\s*\$?\s*\d+([.]\d\d)?\s*$}) {
            $err .= "<li>Illegal amount for $tname: $donation_amt";
        }
        $donation_amt =~ s{[\s\$]}{}g;
    }
    else {
        $donation_amt = $s;
    }
    $slide_tuition = $donation_amt;
}
else {
    $donation_amt = $form{donation} || 0;
    if ($donation_amt && $donation_amt !~ m{^\s*\$?\s*\d+([.]\d\d)?\s*$}) {
        $err .= "<li>Illegal amount for $tname: $donation_amt";
    }
    $donation_amt =~ s{[\s\$]}{}g;
}
if (! $err && $prog->donation) {
    my $min = $prog->donation_minimum || 0;
    if ($donation_amt < $min) {
        $err .= "<li>The minimum $tname contribution is \$$min.";
    }
}

if ($form{aname} =~ m{\b$form{fname}\b}xmsi) {
    # not really an alternate name (or Sanskrit)
    # take it away so that it doesn't mess up the badges
    $form{aname} = '';
}

#
# Gift Card?
#
my ($gc_code, $gc_total, $gc_used, $gc_balance);
$gc_code = $form{gift_card};
if ($gc_code) {
    my (@gc) = model($c, 'GiftCards')->search({
                   code => $gc_code,
               });
    if (! @gc) {
        $err .= "Cannot find a Gift Card with a code of '$gc_code'.";
    }
    else {
        for my $gc (@gc) {
            $gc_total += $gc->amount;
        }
        if ($gc_total == 0) {
            $err .= "Sorry, the Gift Card '$gc_code' has a zero balance.";
        }
    }
}

# Discount Code
my $discount_pct = 0;
if ($prog->discount_code) {
    # note that the only way to get a non-blank $form{disc_code}
    # is to have a $prog->discount_code
    #
    if ($form{disc_code} =~ m{\S}xms) {
        if ($form{disc_code} ne $prog->discount_code) {
            $err .= "Sorry, invalid Discount Code.";
        }
        else {
            $discount_pct = $prog->discount_pct;
        }
    } 
}

if ($err) {
    Template->new(INTERPOLATE => 1)->process(
        'err.tt2',
        { err => $err },
    );
    exit;
}

# all is well.  (except maybe for the uploaded covid vax file suffix)
# prepare the confirmation page.
#

# save the vaccination card image.
# name it after the person
# put this name in a hidden field.
#
my $name;
if ($covid_vax) {

=comment

    # ?? we get the param again??
    # we're not getting the file itself, just its name
    my $fname = $q->param('card');
    #
    # get the suffix (.jpg .png .gif or .pdf)
    # it will usually be a .jpg file but ...
    #
    my ($suffix) = $fname =~ m{[.](\w+)\z}xms;
    $suffix ||= "jpg";
    $suffix = lc $suffix;
    $suffix = "jpg" if $suffix eq "jpeg";
    if ($suffix !~ m{\A (jpg|png|gif|pdf) \z}xms) {
        Template->new(INTERPOLATE => 1)->process(
            'err.tt2',
            {
                err => "The vaccination card picture must be a"
                     . "proper image file.<br>"
                     . "The suffix must be jpg, png, gif, or pdf.",
            },
        );
        exit;
    }
    $name = "$form{fname}_$form{lname}.$suffix";
    $name =~ s{[ ]}{_}xmsg;

    # Upgrade the handle to one compatible with IO::Handle:
    my $io = $card->handle;

    my $cov_dir = '/var/Reg/documents/covid_vax';
    my $cov_file = "$cov_dir/$name";
    open my $out, '>', $cov_file;
    my $buffer;
    while (my $bytesread = $io->read($buffer, 1024)) {
        print {$out} $buffer;
    }
    close $out;
    # forget resizing and compressing
    # it proved unreliable for some reason
    #
    if ($suffix eq 'jpg') {
        # resize and compress the image file and put it in the /covid_vax dir
        #
        system "/usr/bin/convert -resize 1000x $cov_file /tmp/card$$";
        system "/usr/bin/convert -strip -interlace Plane -quality 65%"
             . " /tmp/card$$ $cov_file";
        unlink "/tmp/card$$";
    }
    elsif ($suffix eq 'pdf') {
        # convert to a jpg and resize/compress it
        # couldn't do this on mountmadonna.org or
        # here with ImageMagic version 6.
        # we installed pdftoppm and it does work okay
        #
        my $new = $cov_file;
        $new =~ s{.pdf}{}xms;
        system "/usr/bin/pdftoppm $cov_file $new -jpeg -f 1 -singlefile";
            # the above added .jpg to $new
        $new .= ".jpg";

        # resizing and compressing
        my $tmp = "/tmp/card$$";
        system "/usr/bin/convert -resize 1000x $new $tmp";
        system "/usr/bin/convert -strip -interlace Plane -quality 65%"
             . " $tmp $new";
        chmod 0666, $new;       # so it can be rotated
        unlink $tmp;
        #?? $f =~ s{pdf}{jpg}xms;
        #?? $cf =~ s{pdf}{jpg}xms;
        $cov_file =~ s{pdf}{jpg}xms;
        $suffix = 'jpg';
        # we leave the .pdf there? sure.
    }
    # now to craft an email and an activity message
    my $person_name;
    my ($person_id) = $cov_file =~ m{\A (\d+)[.]}xms;
    if ($person_id) {
        my $person = model($c, 'Person')->find($person_id);
        $person_name = $person->name;
        my $cf = "$person_name.$suffix";
        $cf =~ s{[ ]}{_}xmsg;   # for the space between first and last
                                # and for first names like Mary Beth
        rename $cov_file, "$cov_dir/$cf";
        if ($person) {
            $person->update({
                covid_vax => $cf,
                vax_okay  => '',
            });
        }
        else {
            # a stray file from somewhere
            # with an unknown person id?
            unlink "$get_dir/$cf";
            return;
        }
    }
    else {
        #
        # the file is named "FIRST_LAST.suffix"
        # because it was uploaded during an online registration.
        # the filename is stored in the x_covid_vax field.
        # just get the file (in $get_dir) for later use
        # when the registration is "brought in".
        # extract the person name from the filename
        #
        # we can't update the person yet because the
        # Person record may not have been created yet.
        #
        # BUT ... if an _existing_ person is REuploading a card
        # we should clear out vax_okay on the Person record...
        #
        $person_name = $f;
        $person_name =~ s{[.]$suffix}{}xms;
        $person_name =~ s{_}{ }xmsg;
        for my $p (model($c, 'Person')->search({
                       covid_vax => $cf,
                   })
        ) {
            $p->update({
                vax_okay => '',
            });
        }
    }
    chmod 0666, "$get_dir/$cf";     # so we can rotate it?
    $person_name = "<a target=_blank href='https://akash.mountmadonna.org"
                 . "/person/view_covid/$cf'>"
                 . "$person_name</a>"
                 ;
    email_letter($c,
        to      => get_string($c, 'covid_notify'),
        from    => 'Mount Madonna Center <reservations@mountmadonna.org>',
        subject => 'COVID-19 Vaccination Card',
        html    => "Got COVID-19 vaccination card for $person_name",
        activity_msg => "Received COVID-19 Vaccination card for $person_name.",
    );

=cut

}

# how much to charge??
# it's complicated
#
# if mountain_experience there is no housing
# and it's a fixed cost - in the string 'me_cost'
#
# it depends on their house1 choice, progchoice (basic/full), 
# collect_total, percent_tuition, and deposit values.
# oh, and housing_not_needed - in which case the cost
# is simply the tuition.
#
# for Personal Retreats
# the date range determines how many days they're staying
# and there's also M-Th discount ranges.
#
# and the possible use of a gift card
#
# and a discount code
#

#
# How much for housing?
#
my ($hc, $h_cost);
if (! ($ME || ! $prog->housing_not_needed)) {
    $hc = $prog->housecost;
    $h_cost = $hc->$house1;
    # assume they'll get their first choice
}

my $total;
my $payment = "";

# as the charges accumulate we add to $total
# and append an explanation to $payment
#
if ($ME) {
    $h_cost = get_string($c, 'mountain_experience_cost');
    $total += $h_cost;
    $payment .= "The Mountain Experience costs \$${h_cost}.<br>";
    if ($form{children_name_age}) {
        my @kids = split ',', $form{children_name_age};
        my $nkids = @kids;
        my $kid_cost = int($nkids*($h_cost/2));
        $total += $kid_cost;
        my $plural = $nkids == 1? 'child': 'children';
        $payment .= "You are bringing $nkids $plural.  This adds \$$kid_cost.<br>";
        $payment .= "The total is now \$$total.<br>";
    }
}
elsif ($PR) {
    $ndays ||= 1;
	$total = $ndays*$h_cost;
    my $pl = $ndays == 1? '': 's';
    $payment .= "For your Personal Petreat you are staying $ndays day$pl.<br>\n";
    $payment .= "The cost per day is \$$h_cost.<br>\n";
    $payment .= "The total is \$$total.<br>\n";

    # PR discount for M-Th?
    #
    my $disc_start = date(get_string($c, 'disc_pr_start'));
    my $disc_end   = date(get_string($c, 'disc_pr_end'));
    if ($disc_start <= $edate && $sdate <= $disc_end) {
        # there is some overlap
        #
        my $d = $sdate;
        my $n_m_th_days = 0;
        while ($d < $edate) {
            my $dow = $d->day_of_week();
            if (   1 <= $dow         && $dow <= 4        # Mon-Thu
                && $disc_start <= $d && $d <= $disc_end  # in discount PR period
            ) {
                ++$n_m_th_days;
            }
            ++$d;
        }
        if ($n_m_th_days > 0) {
            my $dpr = get_string($c, 'disc_pr');
            my $disc = int(($dpr/100)*$n_m_th_days*$h_cost+.5);
            my $pl   = ($n_m_th_days == 1)? ""    : "s";
            my $th   = ($n_m_th_days == 1)? "that": "those";
            my $verb = ($n_m_th_days == 1)? "is"  : "are";
            $total -= $disc;
            $payment .= "Since you are staying for $n_m_th_days day$pl that $verb Monday-Thursday you get a ${dpr}% discount for $th day$pl.  This adds up to \$$disc.<br>\n";
            $payment .= "Your total is reduced to \$$total.<br>\n";
        }
    }
}
elsif (! $prog->housing_not_needed) {
    if ($prog->extradays) {
        my $ndays = date($prog->edate) - date($prog->sdate);
        if ($form{progchoice} eq 'full') {
            $ndays += $prog->extradays;
        }
        $payment .= "You are staying $ndays days at a cost of \$$h_cost Per Day.<br>";
        $total = $h_cost * $ndays;
        $payment .= "The total is \$$total.<br>";
    }
    else {
        # the housing cost is not dependent on sdate, edate.
        # we have the total amount.
        #
        $total = $h_cost;
        $payment .= "Your total cost for meals and lodging is \$$total.<br>\n";
    }
}

# how much for tuition?
#
if (my $tuition = $prog->tuition) {
    if ($form{progchoice} eq 'full') {
        $tuition = $prog->full_tuition;
    }
    if ($prog->tuition_rolled) {
        $payment .= "A $tname charge of"
                 .  " \$$tuition is <i>included</i> in the total.<br>";
    }
    else {
        my $increased = $total;
        $total += $tuition;
        $payment .= "The $tname charge is \$$tuition";
        if ($increased) {
            $payment .= " so your total is increased to \$$total";
        }
        $payment .= ".<br>\n";
    }
}
elsif ($prog->donation) {   # aka tuition by donation
    if ($donation_amt) {
        my $increased = $total;
        $total += $donation_amt;
        $payment .= "For $tname you are contributing \$$donation_amt";
        if ($increased) {
            $payment .= " so your total is increased to \$$total";
        }
        $payment .= ".<br>\n";
    }
    else {
        $payment .= $prog->donation_zero_msg . "<br>\n";
    }
}

my %stash;

#
# discount code?
#
if ($discount_pct) {
    $payment .= "You entered the valid discount code of "
             .  $prog->discount_code
             .  " so there is\n"; 
    my $discount_amt = int(($discount_pct/100)*$total + 0.5);
        # rounded up
    $payment .= " a discount of $discount_pct% = \$$discount_amt.<br>\n";
    $total -= $discount_amt;
    $payment .= "Your total cost is reduced to \$$total.<br>\n";
    $stash{discount_amt} = $discount_amt; 
}

#
#
# MMC General Fund Donation
if ($green_amount) {
    $total += $green_amount;
    $payment .= "You wish to contribute \$$green_amount to the MMC General Fund.  The total is increased to \$$total.<br>\n";
}

#
# apply a gift card?
#
if ($gc_total) {
    if ($gc_total < $total) {
        $gc_used = $gc_total;
        $gc_balance = 0;
        $total -= $gc_total;
    }
    else {
        $gc_used = $total;
        $gc_balance = $gc_total - $total;
        $total = 0;
    }
    $payment .= "You wish to use the Gift Card code of '$form{gift_card}' which has a current value of \$$gc_total.<br>\n";
    $payment .= "We will use \$$gc_used from the gift card which leaves \$$gc_balance on the gift card.<br>\n";
    $payment .= "Using the gift card reduces the total payment today from"
             . " \$"
             .  ($total+$gc_used)
             . " to \$$total.<br>\n";
}

my ($amount_now, $due);
# how much of this total is to be collected now?
#
if ($prog->collect_total) {
	$amount_now = $total;
    if ($total) {
        $payment .= "The total of \$$total needs to be collected now.<br>\n";
    }
}
elsif (my $pct = $prog->percent_tuition) {
    my $tuition = $prog->tuition;
    my $pct = (100 - $pct)/100;
    $amount_now = int($tuition * $pct);
    $payment .= "For this program we need to collect ${pct}% of the $tname of \$$tuition which comes to \$$amount_now.<br>\n";
}
else {
    $amount_now = $prog->deposit || 100;
    if ($amount_now > $total) {
        $amount_now = $total;
    }
    if ($amount_now) {
        $payment .= "For this program we need to collect a deposit of \$$amount_now.<br>\n";
    }
}
if (! $prog->collect_total && $green_amount) {
    $amount_now += $green_amount;
    $payment .= "The MMC General Fund donation of \$$green_amount is added to the amount to collect today.<br>\n";
}
$due = $total - $amount_now;
if ($due) {
    $payment .= "The balance of \$$due will be due when you arrive.<br>\n";
    $payment .= "If you wish, you can pay the full amount of \$$total now.  This will simplify your registration on arrival.<br>\n";
    # ??? how with Stripe
}

#
# now to fill in the rest of the stash for the template variables
#
$stash{amount_now} = $amount_now;
$stash{due} = $due;
$stash{total} = $total;

for my $name (qw/
    fname lname aname street1 street2 city state zip
    country cell email1 car_license carpool hascar from_where
    e_mailings snail_mailings
    share_mailings kayakalpa
    house1 house2 request withwhom_first withwhom_last
    pid title leader_names name progchoice
    request plink
    mountain_experience meals activities children_name_age
/) {
    $stash{$name} = $form{$name};
}
$stash{green_amount} = $green_amount;   # we may have removed a dollar sign...
$stash{slide_tuition} = $slide_tuition;

# ?? No leader images...

$stash{x_firstname} = $form{fname};
$stash{x_lastname} = $form{lname};
if ($covid_vax) {
    $stash{covid_vax} = 'covid_vax';
    $stash{x_covid_vax} = $name;    # $name okay??
}
$stash{x_address} = "$form{street1} $form{street2}";

#
# create a readable description for the user
#
my %gender_desc = (
    female     => 'Woman',
    male       => 'Man',
    non_binary => 'Non-binary/non-conforming',
    trans      => 'Transgender',
    no_resp    => 'Prefer not to respond',
);
$stash{gender} = $gender_desc{$form{gender}};

$stash{pronouns} = $form{pronouns};
$stash{diet}     = $form{diet};

$stash{phone} = $form{cell};    # used to have home work cell... 
if ($form{ceu_license}) {
    $stash{ceu} = <<"EOH";
<tr>
<th align=right>License #:</th>
<td>$form{ceu_license}<span style="margin-left: 50mm">For a CEU certificate.</span></td>
</tr>
EOH
	$stash{ceu_license} = $form{ceu_license};		# for passing on to reg...
}
else {
    $stash{ceu} = "";
	$stash{ceu_license} = "";
}

$stash{cabin_room} = $form{cabin_room} || 'room';
$stash{other_cabin_room} = ($stash{cabin_room} eq 'room')? 'cabin'
                           :                               'room'
                           ;

my $howHeardResponse = "";
if ($form{howHeard} eq "web") {
     $howHeardResponse = "the web";
} elsif ($form{howHeard} eq "ad") {
     $howHeardResponse = "an ad";
     if ($form{advertiserName}) {
         $howHeardResponse .= " in " . $form{advertiserName};
     } 
} elsif ($form{howHeard} eq "brochure") {
     $howHeardResponse = "the Mount Madonna Center Brochure";
} elsif ($form{howHeard} eq "flyer") {
     $howHeardResponse = "a flyer";
} 

$stash{howheard} = $form{howHeard};
$stash{advertisername} = $form{advertiserName};
if ($howHeardResponse) {
    $stash{howheard_verbose}
        = "<p>You heard about this program through $howHeardResponse.";
} else {
    $stash{howheard_verbose} = "";
}
# ?? is the above correct with the new ways of hearing??

if ($form{carpool}) {
    if ($form{hascar}) {
        $stash{carpool_verbose} =
            "<p>You wish to carpool from $form{from_where} and can offer a ride.";
    }
    else {
        $stash{carpool_verbose} = 
            "<p>You wish to carpool from $form{from_where} and would like a ride.";
    }
} else {
    $stash{carpool_verbose} = "";
}

my $mailings_verbose = "";
if ($form{e_mailings} || $form{snail_mailings}) {
     $mailings_verbose = "<p>We will include you on occasional mailings via ";
     if ($form{e_mailings}) {
        $mailings_verbose .= "e-mail";
     }
     if ($form{snail_mailings}) {
        if ($form{e_mailings}) {
            $mailings_verbose .= " and ";
        }
        $mailings_verbose .= "snail mail";
     }
     $mailings_verbose .= ".";
}
else {
    $mailings_verbose .= "<p>We will <b>not</b> include you on occasional mailings about MMC.";
}
$mailings_verbose .= "<p>We will "
     . ($form{share_mailings}? "": "<b>not</b> ")
     . "share your contact information with MMC affiliates.";

$stash{mailings_verbose} = $mailings_verbose;

my $kayakalpa_verbose = "";
if ($form{kayakalpa}) {
    $kayakalpa_verbose .= "<p>We will contact you regarding massage or other bodywork during your stay.";
}
$stash{kayakalpa_verbose} = $kayakalpa_verbose;

if ($hc) {
    $stash{house1} = $house1;
    $stash{house2} = $house2;
    $stash{house1_verbose} = $housing_name{$house1};
    $stash{house1_cost} = $hc->$house1;
    $stash{house2_verbose} = $housing_name{$house2};
    $stash{house2_cost} = $hc->$house2;
}

if ($form{withwhom_first} =~ /\S/) {
    $stash{withwhom_verbose}
        = "<p>You have requested to share housing with $form{withwhom_first} $form{withwhom_last}.&nbsp;&nbsp;&nbsp;He/she needs to register separately.";
}
else {
    $stash{withwhom_verbose} = "";
}

if ($form{request}) {
    my $s = $form{request};
    $s =~ s{\n}{<br>\n}g;
    $stash{request_verbose}
        = "<h2>Additional Requests</h2><ul>$s</ul>";
} else {
    $stash{request_verbose} = "";
}
#
# in addition to the street1, street2 above
# which are for the hidden fields we also have
# street_addr which is a special case.
# for authorize.net??
#
my $street_addr = $form{street1};
if ($form{street2} =~ /\S/) {
    $street_addr .= "<br>$form{street2}";
}
$stash{street_addr} = $street_addr;

if ($PR) {
    $stash{title} = $ME? "Mountain Experience": "Personal Retreat";
	$stash{sdate} = $sdate->format("%m/%d/%Y");
	$stash{edate} = $edate->format("%m/%d/%Y");
} else {
	$stash{sdate} = "";
	$stash{edate} = "";
}
#
# what dates?
#
if ($form{dates} =~ m{,}) {
    #
    # we need to look at the choice of program
    #
    my ($bdate, $fdate) = split m{,}, $form{dates};
    $bdate =~ s{^\s*|\s*$}{}g;
    $fdate =~ s{^\s*|\s*$}{}g;
    if ($fdate =~ m{^\d}) {
        my ($month) = $bdate =~ m{^(\w+)}; 
        $fdate = $month . " " . $fdate;
    }
    $stash{dates} = ($form{progchoice} eq "basic")? $bdate
                    :                               $fdate;
}
elsif ($ME) {
    $stash{dates} = $sdate->format("%A, %B %e, %Y");
}
elsif ($PR) {
	my $date = "$ndays day" . (($ndays > 1)? "s": "");
	$date .= " from ";
	$date .= $sdate->format("%A %B %e, %Y");
	$date .= " to ";
	$date .= $edate->format("%A %B %e, %Y");
	$stash{dates} = $date;
    $stash{pr} = 1;
}
else {
    $stash{dates} = $form{dates};
}

if ($gc_used) {
    $stash{gc_code} = $gc_code;
    $stash{gc_total} = $gc_total;
    $stash{gc_used} = $gc_used;
    $stash{gc_balance} = $gc_balance;
}

#
# special action for testing purposes
# to bypass authorize.net
#
if ($form{lname} =~ m{\A zz}xmsi) {
    # how with Stripe?
}

$stash{payment} = $payment;
$stash{waiver_needed} = $prog->waiver_needed;
$stash{housing_not_needed} = $prog->housing_not_needed;

$stash{stripe_payment}
    = stripe_payment(
          name        => $prog->name_trimmed,         
          description => "Registration for $form{fname} $form{lname}",
          amount      => $total,
          metadata    => {
            hello => 4,
            # many more
          },
          email       => $form{email1},
      );

Template->new(
    INTERPOLATE => 1,
)->process(
    'reg2.tt2',
    \%stash,
);
