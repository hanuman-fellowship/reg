#!/usr/bin/perl
use strict;
use warnings;
use CGI;
my $q = CGI->new();
my $href = $q->Vars();
my $type = $href->{mem_type};
# cookie info from a registration
my %cookie = $q->cookie(-name => 'user_data');

use Template;
my $tt = Template->new(
    INTERPOLATE => 1,
);

use lib '.';
use Authorize qw/
    html_for_authorize_dot_net
/;

use HTML::Entities qw/
    encode_entities
/;

my %stash;
for my $w (qw/
    fname lname aname street1 street2
    city state zip country
    cell
    email1
/) {
    $stash{$w} = $cookie{$w} || "";
}
if (! $href->{fname}) {
    # show the initial page describing the
    # mission, benefits, and costs.
    print $q->header();
    $tt->process(
        'new_hfs_membership.tt2',
        \%stash,
    );
    exit;
}
# check the submitted values
my %disp_name_of = (
    fname   => "First",
    lname   => "Last",
    street1 => "Street",
    city    => "City",
    state   => "State/Province",
    zip     => "Zip/Postal Code",
    email1  => "Email",
    cell    => "Phone",
    intro   => "Your Introduction",
);
my $mess;
for my $f (qw/
    fname lname street1 city state zip email1 cell 
    intro
/) {
    if ($href->{$f} !~ m{\S}xms) {
        $mess .= $disp_name_of{$f} . "<br>";
    }
}
if ($type eq 'general_ky' && ! $href->{ky}) {
    $mess .= "Your preferred Karma Yoga areas";
}
if ($mess) {
    print $q->header(), <<"EOH";
<style>
body {
    font-size: 18pt;
    font-family: Arial;
    margin-top: .5in;
    margin-left: .5in;
}
</style>
The following required fields are missing:
<p>
<ul>
$mess
</ul>
<p>
Please <a href=# style="text-decoration: none" id=back onclick='history.go(-1); return false;'>&nbsp;go back&nbsp;</a> and fix this.
<script>document.getElementById('back').focus()</script>
EOH
    exit;
}
# show verification page and get
# ready to go to authorize.net
# and grab any photo they uploaded
$href->{Mem_Type} = $type eq 'general' || $type eq 'sponsor'?
                        (ucfirst $type) . " Member"
                   : "General Member with karma yoga";
$href->{amount} = $type eq 'general'   ? 50
                 :$type eq 'general_ky'? 25
                 :                       600
                 ;
$href->{desc} = "HFS $type membership"; 
$href->{gender} = '';
$href->{authorize_data} = html_for_authorize_dot_net($href);
for my $f (qw/ intro ky /) {
    my $k = $f . "_disp";
    $href->{$k} = $href->{$f};
    $href->{$k} =~ s{\cM\n}{<br>}xmsg; 
    $href->{$f} =~ s{\cM}{}xmsg;
    $href->{$f} = encode_entities($href->{$f}, qq!\n"!);
}
my $photo = $q->upload('photo');
my $pic_name = $q->param('photo');
# pic_name will be first_last.jpg (jpg or whatever type the file is)
$pic_name =~ s{\A .*[.]([a-z]+) \z}{$href->{fname}_$href->{lname}.$1}xms;
if ($photo) {
    # Upgrade the handle to one compatible with IO::Handle:
    my $io = $photo->handle;
    open my $out, '>', "/tmp/pic$$";
    my $buffer;
    while (my $bytesread = $io->read($buffer, 1024)) {
        print {$out} $buffer;
    }
    close $out;
    my $pic_dir = "../reg-pics";
    system("/usr/bin/convert /tmp/pic$$ -resize 800x $pic_dir/$pic_name");
    system("/usr/bin/convert $pic_dir/$pic_name -resize 300x $pic_dir/th-$pic_name");
    unlink "/tmp/pic$$";
    $href->{pic_thumb} = "http://www.mountmadonna.org/reg-pics/th-$pic_name";
    $href->{pic_url}   = "http://www.mountmadonna.org/reg-pics/$pic_name";
}
# get ready to send a cookie for storage
%cookie = %$href;
delete $cookie{intro};
delete $cookie{mem_type};
delete $cookie{ky};
my $cookie = $q->cookie(
    -name    => 'user_data',
    -value   => \%cookie,
    -expires => '+10y',     # i.e. don't expire
    -domain  => 'www.mountmadonna.org',
);
print $q->header(-cookie => $cookie);
$tt->process(
    'new_hfs_membership2.tt2',
    $href,
);
