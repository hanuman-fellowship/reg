#!/usr/bin/env perl
use strict;
use warnings;
use CGI;
my $q = CGI->new();
print $q->header();
use lib '.', '../lib';
use Template;
my $tt = Template->new(
    INTERPOLATE => 1,
);
use Stripe qw/
    metadata
/;
my %P = metadata($q);
use Util qw/
    db_init
    model
    email_letter
    get_string
    commify
    add_or_update_deduping
    add_activity
    email_letter
    JON
/;
my $c = db_init();
use Date::Simple qw/
    date
    today
/;
my $today_d8 = today()->as_d8();
use Time::Simple qw/
    get_time
/;
my $now = get_time();
my $now_t24 = $now->t24;

# we're not a full mlist thingy
$P{sex} = '';
for my $k (qw/ e_mailings snail_mailings share_mailings /) {
    $P{$k} = -1;
}
$P{tel_cell} = $P{cell};
$P{tel_home} = $P{home};
$P{tel_work} = $P{work};
$P{email} = $P{email1};
my ($person_id, $person, $status) = add_or_update_deduping(
    $c, \%P,
);
my @terms = split ',', $P{encoded_requests};
my @mr_ids;
my $mr_desc = "";
while (@terms) {
    my ($date, $breakfast, $lunch, $dinner, $child) = splice @terms, 0, 5;
    $mr_desc .= date($date)->format("%b %e '%q") . ' - ';
    $mr_desc .= "$breakfast for breakfast, " if $breakfast;
    $mr_desc .= "$lunch for lunch, "         if $lunch;
    $mr_desc .= "$dinner for dinner"         if $dinner;
    $mr_desc =~ s{,\s+ \z}{}xms;    # chop a trailing ,
    $mr_desc .= ($child? ' for a child': '');
    $mr_desc .= '<br>';
    my $mr = model($c, 'MealRequests')->create({
        person_id => $person_id,
        date      => $date,
        breakfast => $breakfast,
        lunch     => $lunch,
        dinner    => $dinner,
        child     => $child,
        date_requested => $today_d8,
        time_requested => get_time($P{time})->t24(),
    });
    push @mr_ids, $mr->id;
}
my @xaccounts = model($c, 'XAccount')->search({
                    descr => 'Meals',
                });
my $meals_xaccount_id = $xaccounts[0]->id;

model($c, 'XAccountPayment')->create({
    person_id   => $person_id,
    xaccount_id => $meals_xaccount_id,
    what        => "online meal request<br>$mr_desc<!-- mr_ids @mr_ids -->",
        # we hide the ids (with an HTML comment)
        # so we can find them later
        # in case this payment is deleted.
    amount      => $P{amount},
    type        => 'O',               # online
    user_id     => 0,                 # what other user id?
    the_date    => $today_d8,
    time        => $now_t24,
    transaction_id => $P{transaction_id},
});
$mr_desc =~ s{<br> \z}{}xms;        # chop the last <br>
$mr_desc =~ s{<br>}{ | }xmsg;
if ($P{meal_type}) {
    $mr_desc .= " - $P{meal_type}";
}
add_activity($c,
    'meal request for <a href=/person/view/' . $person->id . '>'
  . $person->name . '</a>, '
  . $mr_desc
);
$mr_desc =~ s{\s+[|]\s+}{<br>}xmsg;
$P{display_requests} = $mr_desc;
my $html;
$tt->process(
    'meal_request_receipt.tt2',
    { %P, message => 1 },
    \$html,
);
print $html;

# send the same via email without the message at the bottom
my $mail_msg;
$tt->process(
    'meal_request_receipt.tt2',
    \%P,
    \$mail_msg,
);
email_letter($c,
    to      => "$P{first} $P{last} <$P{email}>",
    from    => 'programs@mountmadonna.org',
    subject => 'MMC Meal Request',
    html    => $mail_msg,
);

# notify the office of this meal request
my $office = get_string($c, 'meal_req_notify');
if ($office) {
    email_letter($c,
        to      => $office,
        from    => 'programs@mountmadonna.org',
        subject => 'Meal Request for ' . $person->name",
        html    => $mr_desc,
    );
}
