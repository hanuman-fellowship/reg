#!/usr/bin/perl
use strict;
use warnings;
=comment

1) Ftp-get all transaction files from www.mountmadonna.org
created by the 'relay' program.  The names of these files
are the ids of the most recent authorize.net transactions.
Put the files in root/static/online.

2) Get recently modified rental grid files.

3) Get mailing list requests into root/static/mlist.

4) Get ride requests into root/static/rides.

5) Get all email from authorize@hanumanfellowship.org.
This address is one of the recipients of the "Merchant Email Receipts"
sent by authorize.net after every transaction.

A. If a transaction id found within the email is NOT
among the transaction ids we got in 1) AND it is not in 
root/static/online/<trans_id> (or the online_done/ dirs)
THEN synthesize a transaction file from the info in the email
and mark it as such.

B. report the following untoward things via an email
to jon@logicalpoetry.com:  

    - unable to make a connection via ftp or pop3
    - misformatted emails

6) For registrations that indicated they would like
to be contacted about massage send Kaya Kalpa a letter
with their contact information and which program and when
they'll be here.

7) Get people that recently registered on the temple
reservation site and import them directly into the People table.

=cut
use lib 'lib';
use DBI;
use Net::FTP;
use Template;
use Date::Simple qw{
    date
    today
};
use FindBin;
chdir "$FindBin::Bin/..";

my $Msg = "";       # globals (capitalized to emphasize this)
my $Error = 0;
my $Run_File = "grab_running";

if (-f $Run_File) {
    my $t = (stat($Run_File))[9];
    if (time() - $t > 5*60) {
        #
        # a stale run file (older than 5 minutes).
        # it somehow got left behind from a previous run.
        # remove it and continue.
        #
        unlink $Run_File;
    }
    else {
        #
        # we have been invoked via "Grab New" in Reg.
        # but we are still validly running via cron!
        #
        exit;
    }
}
open my $run, ">", $Run_File;
close $run;

#
# we need some values from the database
# to know where to connect to the web site.
#
my $dbh = DBI->connect(undef, "sahadev", "JonB")
    or my_die("oh no DBI");
my $sth = $dbh->prepare("
    select the_key, value
    from string
    where the_key like 'ftp_%'
       or the_key like 'smtp_%'
       or the_key like 'ride_%'
       or the_key like 'reception_email'
       or the_key like 'kayakalpa_email'
       or the_key like 'mmi_email'
");
$sth->execute();
my %string;
while (my ($the_key, $value) = $sth->fetchrow_array()) {
    $string{$the_key} = $value;
}
$string{mmc_email} = $string{reception_email};      # sorry - see below

my $sth_gaff = $dbh->prepare("
    select id
      from affils
     where descrip like '%temple%guest%'
");
$sth_gaff->execute();
my ($temple_guest_affil_id) = $sth_gaff->fetchrow_array();

my $sth_ins_aff = $dbh->prepare("
    insert into affil_people
    (a_id, p_id)
    values
    (?, ?)
");

my $sth_search_people = $dbh->prepare("
    select id, tel_cell, email
      from people
     where first = ? and last = ?
");
my $sth_insert_people = $dbh->prepare("
    insert into people (
        first, last, email,
        tel_cell, addr1, addr2,
        city, st_prov, zip_post
    )
    values (
        ?, ?, ?,
        ?, ?, ?,
        ?, ?, ?
    )
");
my $sth_update_people = $dbh->prepare("
    update people set
        first = ?,
        last  = ?,
        email = ?,
        tel_cell  = ?,
        addr1 = ?,
        addr2 = ?,
        city  = ?,
        st_prov = ?,
        zip_post   = ?
    where id = ?
");

#
# now we can connect
#
my $ftp = Net::FTP->new($string{ftp_site}, Passive => $string{ftp_passive})
    or my_die("cannot connect to $string{ftp_site}");    # not die???
$ftp->login($string{ftp_login}, $string{ftp_password})
    or my_die("cannot login " . $ftp->message);
$ftp->cwd($string{ftp_transactions})
    or my_die("cannot cwd to $string{ftp_transactions} " . $ftp->message);
$ftp->ascii();

# 
# get ready to send email
#
use Mail::Sender;
sub email_letter {
    my (%args) = @_;

    my @auth = ();
    if ($string{smtp_auth}) {
        @auth = (
            auth    => $string{smtp_auth},
            authid  => $string{smtp_user},
            authpwd => $string{smtp_pass},
        );
    }
    my $mail_sender = Mail::Sender->new({
        smtp => $string{smtp_server},
        port => $string{smtp_port},
        @auth,
    }) or my_die("no mail sender");
    $args{to} =~ s{mountmadonna.org}{mountmadonnainstitute.org}; 
    $mail_sender->Open({
        to       => $args{to},
        from     => $args{from},
        #bcc      => 'jon@logicalpoetry.com',
        subject  => $args{subject},
        ctype    => "text/html",
        encoding => "7bit",
    }) or my_die("no mail sender Open");
    $mail_sender->SendLineEnc($args{html});
    $mail_sender->Close() or my_die("no mail sender Close");
}

my %ids = ();
my @kayakalpa;

my $online = "root/static/online";
my $mlist = "root/static/mlist";
my $rides = "root/static/rides";
my $temple = "root/static/temple";
mkdir $online unless -d $online;
mkdir $mlist unless -d $mlist;
mkdir $rides unless -d $rides;
mkdir $temple unless -d $temple;

#
# get transaction files from www.mountmadonna.org/cgi-bin/transactions
#
TRANSACTION:
for my $f ($ftp->ls()) {
    if ($f eq '.' || $f eq '..') {
        next TRANSACTION;
    }
    if (! $ftp->get($f, "$online/$f")) {
        my_warn("no get of online reg $f");
        next TRANSACTION;
    }
    $ids{$f} = 1;
    my ($last, $first) = ("", "");
    if (open my $in, "<", "$online/$f") {
        LINE:
        while (my $line = <$in>) {
            if ($line =~ m{x_kayakalpa => yes}) {
                push @kayakalpa, $f;    
            }
            elsif ($line =~ m{x_fname => (.*)}) {
                $first = $1;
            }
            elsif ($line =~ m{x_lname => (.*)}) {
                $last = $1;
            }
        }
        close $in;
    }
    $Msg .= "ftp: $f - $last, $first\n";
    $ftp->delete($f);
}

#
# get (and delete) any newly modified rental grid files
#
$ftp->cwd($string{ftp_rental_dir})
    or my_die("cannot cwd to $string{ftp_rental_dir} " . $ftp->message);
GRID_FILE:
for my $f ($ftp->ls()) {
    if ($f eq '.' || $f eq '..') {
        next GRID_FILE;
    }
    if (! $ftp->get($f, "root/static/grid/$f")) {
        my_warn("no get of grid file $f");
        next GRID_FILE;
    }
    $Msg .= "got rental file $f\n";
    $ftp->delete($f);
}

#
# mlist requests
#
$ftp->cwd($string{ftp_mlist_requests});
my $nmlist = 0;
my %for_whom;
MLIST_FILE:
for my $f ($ftp->ls()) {
    if ($f eq '.' || $f eq '..') {
        next MLIST_FILE;
    }
    if (! $ftp->get($f, "$mlist/$f")) {
        my_warn("no get of mlist file $f");
        next MLIST_FILE;
    }
    ++$nmlist;
    $Msg .= "got mlist file $f\n";
    $ftp->delete($f);
    # was it for mmi or mmc?
    if (open my $in, "<", $f) {
        while (my $line = <$in>) {
            if ($line =~ m{^type (.*)}) {
                $for_whom{$1} = 1;                
            }
        }
        close $in;
    }
}
if ($nmlist) {
    for my $k (keys %for_whom) {
        my $uk = uc $k;
        my $email = $string{$k . '_email'};
        email_letter(
            to      => "$uk Mail Admin <$email>",
            from    => 'Mount Madonna Center <reservations@mountmadonna.org>',
            subject => "Online Mailing List Request",
            html    => "There is an online mailing list request waiting"
                     . " for you in Reg."
        );
    }
}

#
# ride requests
#
$ftp->cwd($string{ftp_ride_dir});
my $nrides = 0;
RIDE_FILE:
for my $f ($ftp->ls()) {
    if ($f eq '.' || $f eq '..') {
        next RIDE_FILE;
    }
    if (! $ftp->get($f, "$rides/$f")) {
        my_warn("no get of rides file $f");
        next RIDE_FILE;
    }
    ++$nrides;
    $Msg .= "got rides file $f\n";
    $ftp->delete($f);
}
if ($nrides) {
    email_letter(
        to      => "MMC Transportation <$string{ride_email}>",
        from    => 'Mount Madonna Center <reservations@mountmadonna.org>',
        subject => "Online Ride Request",
        html    => "There is an online ride request waiting"
                 . " for you in Reg."
    );
}

#
# all done with mmc
#
$ftp->quit();
my %mnum = qw/
    Jan 1
    Feb 2
    Mar 3
    Apr 4
    May 5
    Jun 6
    Jul 7
    Aug 8
    Sep 9
    Oct 10
    Nov 11
    Dec 12
/;

#
# get all email sent to authorize@hanumanfellowship.org.
#
use Mail::POP3Client;
my $pop = new Mail::POP3Client(
    USER     => "authorize+hanumanfellowship.org",
    PASSWORD => "Ashtanga!",
    HOST     => "mail.hanumanfellowship.org"
);
if (! $pop) {
    my_die("no pop")
}
LETTER:
for (my $i = 1; $i <= $pop->Count(); ++$i) {
    my ($from, $subj) = ("", "");
    for my $h ($pop->Head($i)) {
        if ($h =~ m{^From:\s+(.*)}i) {
            $from = $1;
        }
        elsif ($h =~ m{^Subject:\s+(.*)}i) {
            $subj = $1;
        }
    }
    if (! (
        $from && $from =~ m{emailreceipts\@authorize.net}
        &&
        $subj && $subj =~ m{Merchant Email Receipt}
        )
    ) {
        dump_it($i, "from/subj error");
        next LETTER;
    }
    my @lines = $pop->Body($i);
    #
    # First get the transaction id, email,
    # city, state, zip, country and the amount.
    # also get the last and first names for the status message.
    # They're in a different section from the x_ vars.
    # We DO unnecessarily go through the @lines twice.  It could
    # be optimized a little - but speed is not the issue here.
    #
    my ($trans_id, $email, $city, $state, $zip, $country, $amount);
    my ($last, $first) = ("", "");
    my ($day, $mon, $year, $hour, $min, $sec, $ampm);

    for my $l (@lines) {
        if ($l =~ m{Transaction\s+ID\s*:\s*(.*)}i) {
            $trans_id = $1;
        }
        elsif ($l =~ m{E-Mail\s*:\s*(.*)}i) {
            $email = $1;
        }
        elsif ($l =~ m{City\s*:\s*(.*)}i) {
            $city = $1;
        }
        elsif ($l =~ m{State/Province\s*:\s*(.*)}i) {
            $state = $1;
        }
        elsif ($l =~ m{Zip/Postal\s+Code\s*:\s*(.*)}i) {
            $zip = $1;
        }
        elsif ($l =~ m{Country\s*:\s*(.*)}i) {
            $country = $1;
            if ($country eq "USA") {
                $country = "";
            }
        }
        elsif ($l =~ m{Amount\s*:\s*([\d.]+)}i) {
            $amount = $1;
        }
        elsif ($l =~ m{Date/Time\s*:\s*(.*)}i) {
            my $date_time = $1;
            ($day, $mon, $year) = $date_time =~ m{(\d+)-(...)-(\d+)};
            $mon = $mnum{$mon};
            ($hour, $min, $sec, $ampm)
                = $date_time =~ m{(\d\d):(\d\d):(\d\d) (..)$};
            $hour = 0   if $hour == 12 && $ampm eq 'AM';
            $hour += 12 if $hour  < 12 && $ampm eq 'PM';
            --$hour if $hour > 0;       # not quite right but
                                    # I don't want to mess with a new day
                                    # in case we cross a day boundary.
                                    # shouldn't matter, right?

        }
        elsif ($l =~ m{x_lname\s*:\s*(.*)}i) {
            $last = $1;
        }
        elsif ($l =~ m{x_fname\s*:\s*(.*)}i) {
            $first = $1;
        }
    }
    for my $x (
        $trans_id, $email, $city, $state, $zip,
        $country, $amount, $first, $last,
        $day, $mon, $year, $hour, $min, $sec, $ampm
    ) {
        if (! defined $x) {
            dump_it($i, "flaw in format: $x");
            next LETTER;
        }
    }

    if (exists $ids{$trans_id}) {
        #
        # already gotten above.
        # no problem - normal behavior.
        # this is what we hope.
        #
        $Msg .= "email: $trans_id - $last, $first"
             .  " - just got above\n";
        $pop->Delete($i);
        next LETTER;
    }
    if (-f "$online/$trans_id") {
        #
        # already gotten on a previous call to grab_new
        #
        $Msg .= "email: $trans_id - $last, $first"
             .  " - gotten previously\n";
        $pop->Delete($i);
        next LETTER;
    }
    my ($now_mon, $now_year) = (localtime())[4, 5];
    ++$now_mon;
    $now_year += 1900;
    my $now = sprintf("%d-%02d", $now_year, $now_mon);
    if (-f "root/static/online_done/$now/$trans_id") {
        #
        # already gotten on a previous call to grab_new
        # AND already processed and moved aside.
        #
        $Msg .= "email: $trans_id - $last, $first"
             .  " - gotten previously and processed\n";
        $pop->Delete($i);
        next LETTER;
    }
    #
    # we have found a 'missing' online registration.
    # without this email it would not have been seen at all.
    # synthesize a transaction file.
    #
    my $fname = "$online/$trans_id";
    my $out;
    if (! open $out, ">", $fname) {
        dump_it($i, "could not open $fname");
        next LETTER;
    }
    printf {$out} "x_date => %d/%d/%d\n", $mon, $day, $year;
    printf {$out} "x_time => %02d:%02d\n", $hour, $min;
    print  {$out} "x_trans_id => $trans_id\n";
    print  {$out} "x_amount => $amount\n";
    print  {$out} "x_state => $state\n";
    print  {$out} "x_city => $city\n";
    print  {$out} "x_country => $country\n";
    print  {$out} "x_zip => $zip\n";
    print  {$out} "x_email => $email\n";
    print  {$out} "x_synthesized => 1\n";        # to mark it for Reg
    my %P;      # all other x_ named values
    for my $l (@lines) {
        if ($l =~ m{^(x_\w+) : (.*)}) {
            my $type = $1;
            my $val = $2;
            $P{$type} = $val;
            $l =~ s{:}{=>};
            if ($type =~ m{home|work|cell}) {
                my ($phone) = $l =~ m{=> (.*)};
                my $n = $phone =~ tr/0-9/0-9/;      # count digits
                if ($n == 10 && $phone =~ m{^[0-9\(\)-. /]+$}) {
                    #
                    # an American phone number
                    # reformat it in a standard way
                    #
                    $phone =~ s{[^0-9]}{}g;
                    $phone = substr($phone, 0, 3) . "-"
                           . substr($phone, 3, 3) . "-"
                           . substr($phone, 6, 4);
                    $l =~ s{=>.*}{=> $phone};
                }
            }
            print {$out} "$l\n";
            if ($l =~ m{x_kayakalpa => yes}) {
                push @kayakalpa, $trans_id;    
            }
        }
    }
    close $out;
    $Msg .= "email: $trans_id - $last, $first\n";
    $pop->Delete($i);
    #
    # send an email with the info to assure the registrant.
    #
    my $html;
    my $tt = Template->new()
        or my_die("template new error: " . Template->error());
    $tt->process(
        'email.tt2',
        {
            first    => $first,
            amount   => $amount,
            trans_id => $trans_id,
            %P,
        },
        \$html,
    ) or my_die("template error: " . $tt->error());
    email_letter(
        to       => "$first $last <$email>",
        from     => 'Mount Madonna Center <reservations@mountmadonna.org>',
        subject  => "Online registration for $P{x_title}",
        html     => $html,
    );
}
$pop->Close();
kayakalpa();
temple();
finalities();
exit;

#
# five utility functions
#

sub my_die {
    $Error = 1;
    $Msg .= "@_\n";
    finalities();
    exit;
}

sub my_warn {
    $Error = 1;
    $Msg .= "@_\n";
}

sub dump_it {
    my ($i, $err) = @_;

    $Error = 1;
    $Msg .= "$err\n\n" . scalar($pop->HeadAndBody($i));
    $pop->Delete($i);
}

sub kayakalpa {
    return unless @kayakalpa;
    my %needed = map { $_ => 1 } qw/
        fname
        lname
        home
        work
        cell
        pid
        email
        sdate
        edate
        progchoice
    /;
    my $fmt = "%A, %B %e, %Y";
    my $getprog = $dbh->prepare(<<"EOS");

    select title, sdate, edate, extradays
      from program
     where id = ?

EOS
    KK:
    for my $k (@kayakalpa) {
        my %vals;
        open my $in, "<", "$online/$k" or next KK;
        while (my $line = <$in>) {
            my ($key, $val) = $line =~ m{x_(\w+) => (.*)};
            if ($needed{$key}) {
                $vals{$key} = $val;
            }
        }
        close $in;
        my ($program, $p_sdate, $p_edate, $extradays, $arrive, $leave);
        if ($vals{pid} != 0) {
            $getprog->execute($vals{pid});
            ($program, $p_sdate, $p_edate, $extradays)
                = $getprog->fetchrow_array();
            $p_sdate = date($p_sdate);
            $p_edate = date($p_edate);
            if ($vals{progchoice} eq 'full') {
                $p_edate += $extradays;
            }
            $arrive = $p_sdate->format($fmt);
            $leave  = $p_edate->format($fmt);
        }
        else {
            $program = "Personal Retreat";
            $arrive = date($vals{sdate})->format($fmt);
            $leave = date($vals{edate})->format($fmt);
        }
        my $html;
        my $tt = Template->new()
            or my_die("template new error: " . Template->error());
        $tt->process(
            'kayakalpa.tt2',
            {
                name    => "$vals{fname} $vals{lname}",
                email   => $vals{email},
                home    => $vals{home},
                work    => $vals{work},
                cell    => $vals{cell},
                program => $program,
                arrive  => $arrive,
                leave   => $leave,
            },
            \$html,
        ) or my_die("template error: " . $tt->error());
        email_letter(
            to       => $string{kayakalpa_email},
            from     => 'Mount Madonna Center <reservations@mountmadonna.org>',
            subject  => "Massage/Bodywork Request",
            html     => $html,
        );
    }
}

sub temple {
    my $ftp = Net::FTP->new($string{ftp_hfs_site},
                            Passive => $string{ftp_passive})
        or my_die("cannot connect to $string{ftp_hfs_site}");    # not die???
    $ftp->login($string{ftp_hfs_user}, $string{ftp_hfs_password})
        or my_die("cannot login to hfs " . $ftp->message);
    $ftp->cwd($string{ftp_hfs_dir})
        or my_die("cannot cwd to $string{ftp_hfs_dir} " . $ftp->message);
    $ftp->ascii();
    TEMPLE_USER:
    for my $file ($ftp->ls()) {
        if ($file eq '.' || $file eq '..') {
            next TEMPLE_USER;
        }
        if (! $ftp->get($file, "$temple/$file")) {
            my_warn("no get of online temple user $file");
            next TEMPLE_USER;
        }
        # what to do with this record in $template/$file?
        # search the people table for existing records by last/first.
        # if none (the normal case) insert a new record
        # if one update it.
        # if more than one try to match cell phone and email address
        # else leave it be.
        #
        # example:  join the two into one line:
        #
        # Sridhar|Dasika|suridasika@gmail.com|4082205399|
        # 1529 timbercreek dr||San jose|CA|95131
        #
        my $action = "";
        open my $in, '<', "$temple/$file";
        my $line = <$in>;
        close $in;
        my ($first, $last, $email, $cell, $addr1, $addr2,
            $city, $state, $zip) = split m{\|}, $line;
        if ($cell =~ m{\A (\d\d\d) (\d\d\d) (\d\d\d\d) \z}msx) {
            $cell = "$1-$2-$3";
        }
        $sth_search_people->execute($first, $last);
        my @found = ();
        while (my ($id, $cell, $email) = $sth_search_people->fetchrow_array()) {
            push @found, {
                id    => $id, 
                cell  => $cell, 
                email => $email,
            };
        }
        my $year_mon_dir = today()->strftime("%Y-%m");
        mkdir "$temple\_done/$year_mon_dir" unless -d $year_mon_dir; 
        if (!@found || @found == 0) {
            # new
            $sth_insert_people->execute(
                $first, $last, $email,
                $cell, $addr1, $addr2,
                $city, $state, $zip,
            );
            my $person_id = $dbh->last_insert_id(undef, undef, undef, undef);
            $sth_ins_aff->execute(
                $temple_guest_affil_id,
                $person_id,
            );
            $action = "new";
            rename "$temple/$file", "$temple\_done/$year_mon_dir/$file";
        }
        elsif (@found == 1
               && (_digits($found[0]{cell}) eq _digits($cell)
                   ||
                    $found[0]{email} eq $email
                  )

        ) {
            # one to update - it matches cell or email so it's
            # not another person with the same first/last name.
            #
            $sth_update_people->execute(
                $first, $last, $email,
                $cell, $addr1, $addr2,
                $city, $state, $zip,
                $found[0]{id},
            );
            $action = "updated";
            rename "$temple/$file", "$temple\_done/$year_mon_dir/$file";
        }
        else {
            # more than one duplicate first/last - which to update?
            FOUND:
            for my $f (@found) {
                if (_digits($f->{cell}) eq _digits($cell) 
                    ||
                    $f->{email} eq $email
                ) {
                    $sth_update_people->execute(
                        $first, $last, $email,
                        $cell, $addr1, $addr2,
                        $city, $state, $zip,
                        $f->{id},
                    );
                    $action = "updated one of " . scalar(@found);
                    rename "$temple/$file", "$temple\_done/$year_mon_dir/$file";
                    last FOUND;
                }
            }
            # if no action was taken the record will remain
            # in the $temple directory to be dealt with by reception.

            #
            # ??? be smarter about matching address as well
            # and append a '2' to the other person to make
            # them unique.
            #
        }
        $Msg .= "temple: $file $action\n";
        $ftp->delete($file);
    }
}

# return only the digits
sub _digits {
    my ($s) = @_;
    $s =~ s{\D}{}g;
    $s;
}

sub finalities {
    if ($Msg) {
        # write to a file (uniquely named) and send a letter to Jon.
        #if (open my $out, ">", "error-" . time()) {
        #    print {$out} $Msg;
        #    close $out;
        #}
        if (1) {            # 1 or 0 - okay?
            $Msg =~ s{\n}{<br>\n}g;
            email_letter(
                to       => 'jon@logicalpoetry.com',
                from     =>
                    'Mount Madonna Center <reservations@mountmadonna.org>',
                subject  => "Grab New "
                            . ($Error? "Failure"
                               :       "Status"),
                html     => $Msg,
            );
        }
    }
    unlink $Run_File;
}
