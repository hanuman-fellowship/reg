#!/usr/bin/perl
use strict;
use warnings;
=comment

1) Ftp-get all transaction files from www.mountmadonna.org
created by the 'relay' program.  The names of these files
are the ids of the most recent authorize.net transactions.
Ensure that at least one minute has passed since the last
transaction file was created.  This will allow enough
time for the matching email (in 2) below) to have been received.

2) Get all email from authorize@hanumanfellowship.org.
This address is one of the recipients of the "Merchant Email Receipts"
sent by authorize.net after every transaction.

A. If a transaction id found within the email in 2) is NOT
among the transaction ids in 1) then synthesize
a transaction file from the info in the email.

B. report the following untoward things via an email
to jon@logicalpoetry.com:  

    - misformatted emails
    - transaction ids from 1) without an email.

C. Ensure that this program is never executed in parallel.

=cut
use DBI;
use Net::FTP;
use FindBin;


my $Msg = "";       # globals (capitalized to emphasize this)
my $Run_File = "grab_running";

chdir "$FindBin::Bin/..";


if (-f $Run_File) {
    my $t = (stat($Run_File))[9];
    if (time() - $t > 5*60) {
        #
        # a stale run file (older than 5 minutes).
        # it somehow got left behind from a previous run.
        # remove it and continue.
        #
        unlink $Run_File;
    }
    else {
        #
        # we have been invoked via "Grab New" in Reg.
        # but we are still validly running via cron!
        #
        exit;
    }
}
open my $run, ">", $Run_File;
close $run;

# we need some values from the database
# to know where to connect.
#
my $dbh = DBI->connect(undef, "sahadev", "JonB")
    or my_die("oh no DBI");
my $sth = $dbh->prepare("
    select the_key, value
    from string
    where the_key like 'ftp_%'
");
$sth->execute();
my %string;
while (my ($the_key, $value) = $sth->fetchrow_array()) {
    $string{$the_key} = $value;
}

my $ftp = Net::FTP->new($string{ftp_site}, Passive => $string{ftp_passive})
    or my_die("cannot connect to $string{ftp_site}");    # not die???
$ftp->login($string{ftp_login}, $string{ftp_password})
    or my_die("cannot login " . $ftp->message);
$ftp->cwd($string{ftp_transactions})
    or my_die("cannot cwd to $string{ftp_transactions} " . $ftp->message);
$ftp->ascii();

my %ids = ();

#
# get transaction files from www.mountmadonna.org/cgi-bin/transactions
#
TRANSACTION:
for my $f ($ftp->ls()) {
    if ($f eq '.' || $f eq '..') {
        next TRANSACTION;
    }
    $ids{$f} = 0;
    $ftp->get($f, "root/static/online/$f") or my_warn("no get of $f");
    $ftp->delete($f);
}

# we need to ensure that there has been sufficient time
# to receive the email from all transactions.
#
INF_LOOP:
while (1) {
    sleep 60;
    my $extra = 0;
    TRANS2:
    for my $f ($ftp->ls()) {
        if ($f eq '.' || $f eq '..') {
            next TRANS2;
        }
        ++$extra;
        $ids{$f} = 0;
        $ftp->get($f, "root/static/online/$f") or my_warn("no get of $f");
        $ftp->delete($f);
    }
    if ($extra == 0) {
        last INF_LOOP;
    }
    $Msg .= "extra transactions: $extra\n";
}
$ftp->quit();

my %mnum = qw/
    Jan 1
    Feb 2
    Mar 3
    Apr 4
    May 5
    Jun 6
    Jul 7
    Aug 8
    Sep 9
    Oct 10
    Nov 11
    Dec 12
/;

#
# get all email sent to authorize@hanumanfellowship.org.
#
use Mail::POP3Client;
my $pop = new Mail::POP3Client(
    USER     => "authorize+hanumanfellowship.org",
    PASSWORD => "Ashtanga!",
    HOST     => "mail.hanumanfellowship.org"
);
my_die("no pop") unless $pop;
LETTER:
for (my $i = 1; $i <= $pop->Count(); ++$i) {
    my ($from, $subj) = ("", "");
    for my $h ($pop->Head($i)) {
        if ($h =~ m{^From:\s+(.*)}i) {
            $from = $1;
        }
        elsif ($h =~ m{^Subject:\s+(.*)}i) {
            $subj = $1;
        }
    }
    if (! (
        $from && $from =~ m{emailreceipts\@authorize.net}
        &&
        $subj && $subj =~ m{Merchant Email Receipt}
        )
    ) {
        dump_it($i, "from/subj error");
        next LETTER;
    }
    my @lines = $pop->Body($i);
    #
    # First get the transaction id,
    # city, state, zip, country and the amount.
    # They're in a different section from the x_ vars.
    # We do unnecessarily go through the @lines twice.  It could
    # be optimized a little - but speed is not the issue here.
    #
    my ($trans_id, $city, $state, $zip, $country, $amount);
    my ($day, $mon, $year, $hour, $min, $sec, $ampm);

    for my $l (@lines) {
        if ($l =~ m{Transaction ID : (.*)}) {
            $trans_id = $1;
        }
        elsif ($l =~ m{City : (.*)}) {
            $city = $1;
        }
        elsif ($l =~ m{State/Province : (.*)}) {
            $state = $1;
        }
        elsif ($l =~ m{Zip/Postal Code : (.*)}) {
            $zip = $1;
        }
        elsif ($l =~ m{Country : (.*)}) {
            $country = $1;
            if ($country eq "USA") {
                $country = "";
            }
        }
        elsif ($l =~ m{Amount : (\d+)}) {
            $amount = $1;
        }
        elsif ($l =~ m{Date/Time : (.*)}) {
            my $date_time = $1;
            ($day, $mon, $year) = $date_time =~ m{(\d+)-(...)-(\d+)};
            $mon = $mnum{$mon};
            ($hour, $min, $sec, $ampm)
                = $date_time =~ m{(\d\d):(\d\d):(\d\d) (..)$};
            $hour = 0   if $hour == 12 && $ampm eq 'AM';
            $hour += 12 if $hour  < 12 && $ampm eq 'PM';
            --$hour if $hour > 0;       # not quite right but
                                    # I don't want to mess with a new day
                                    # in case we cross a day boundary.
                                    # shouldn't matter, right?

        }
    }
    for my $x (
        $trans_id, $city, $state, $zip,
        $country, $amount, $day, $mon,
        $year, $hour, $min, $sec, $ampm
    ) {
        if (! defined $x) {
            dump_it($i, "flaw in format: $x");
            next LETTER;
        }
    }

    if (exists $ids{$trans_id}) {
        $ids{$trans_id} = 1;
        #
        # no problem - normal behavior
        # this is what we hope.
        #
        next LETTER;
    }
    #
    # synthesize a transaction file
    #
    my $fname = "root/static/online/$trans_id";
    my $out;
    if (! open $out, ">", $fname) {
        dump_it($i, "could not open $fname");
        next LETTER;
    }
    printf {$out} "x_date => %d/%d/%d\n", $mon, $day, $year;
    printf {$out} "x_time => %02d:%02d\n", $hour, $min;
    print {$out} "x_trans_id => $trans_id\n";
    print {$out} "x_amount => $amount\n";
    print {$out} "x_state => $state\n";
    print {$out} "x_city => $city\n";
    print {$out} "x_country => $country\n";
    print {$out} "x_zip => $zip\n";
    print {$out} "x_synthesized => 1\n";        # to mark it for Reg
    for my $l (@lines) {
        if ($l =~ m{^x_(\w+)}) {
            my $type = $1;
            $l =~ s{:}{=>};
            if ($type =~ m{home|work|cell}) {
                my ($phone) = $l =~ m{=> (.*)};
                my $n = $phone =~ tr/0-9/0-9/;      # count digits
                if ($n == 10 && $phone =~ m{^[0-9\(\)-. /]+$}) {
                    #
                    # an American phone number
                    # reformat it in a standard way
                    #
                    $phone =~ s{[^0-9]}{}g;
                    $phone = substr($phone, 0, 3) . "-"
                           . substr($phone, 3, 3) . "-"
                           . substr($phone, 6, 4);
                    $l =~ s{=>.*}{=> $phone};
                }
            }
            print {$out} "$l\n";
        }
    }
    close $out;
    $pop->Delete($i);
}
for my $k (keys %ids) {
    if ($ids{$k} == 0) {
        $Msg .= "no email for $k\n";
    }
}
$pop->Close();
finalities();
exit;


#
# four utility functions
#

sub my_die {
    $Msg .= "@_\n";
    finalities();
    exit;
}

sub my_warn {
    $Msg .= "@_\n";
}

sub dump_it {
    my ($i, $err) = @_;

    $Msg .= "$err\n"; 
    my $s = scalar($pop->HeadAndBody($i));
    $s =~ s{\cM}{}g;
    $Msg .= $s;
    $pop->Delete($i);
}

sub finalities {
    if ($Msg) {
        # write to a file (uniquely named) and send a letter to Jon.
        if (open my $out, ">", "error-" . time()) {
            print {$out} $Msg;
            close $out;
        }
    }
    unlink $Run_File;
}
