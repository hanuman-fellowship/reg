#!/usr/bin/perl
use strict;
use warnings;
use DBI;
use Net::FTP;
use lib "lib";
use Date::Simple qw/
    today
    date
/;
use Util qw/
    slurp
    housing_types
/;
use FindBin;
chdir "$FindBin::Bin/..";

# we need several values from the string table
#
my $dbh = DBI->connect(undef, "sahadev", "JonB")
    or my_die("oh no DBI");
my $sth = $dbh->prepare("
    select the_key, value
    from string
    where the_key like 'ftp_%'
       or the_key like 'smtp_%'
       or the_key like 'long_%'
       or the_key like 'disc_pr%'
       or the_key like 'personal_template'
");
$sth->execute();
my %string;
while (my ($the_key, $value) = $sth->fetchrow_array()) {
    $string{$the_key} = $value;
}

#
# the personal retreat template is fixed - 'personal.html'
# it has only 3 tags to fill in: fee_table, current_date, current_year.
#
my $html = slurp("root/static/templates/web/$string{personal_template}.html");
my $today = today();
my $fom = $today - $today->day() + 1;     # first of month
my $fom_d8 = $fom->as_d8();
#
# find personal retreat programs now and in the future.
# get the housing cost for today and for the first PR
# in the future with a different housing cost.
#
# the only time this would not be correct is if
# there are two price changes within a period of time
# that someone would schedule a PR in advance.
# e.g. today's cost is $40.  In four months it changes to $45.
# in tens months it increases to $50.  today someone
# comes along and schedules a PR for a year hence.
# they would think the cost would be $45 whereas it is actually $50.
# this might make them unhappy.
#
# the past schedule of increases is every 2 years.
# If no one would schedule a PR more than 2 years in
# advance this mechanism will be fine and no one will
# be unhappy.  We should be okay.
#
$sth = $dbh->prepare("
    select p.sdate, p.housecost_id, cp.policy
      from program p, canpol cp
     where p.name like '%personal retreat%'
       and p.sdate >= $fom_d8
       and p.canpol_id = cp.id
     order by p.sdate
");
$sth->execute();
my ($sdate, $curr_hc, $next_hc);
my ($canpol, $dev_null);
($sdate, $curr_hc, $canpol) = $sth->fetchrow_array();
HOUSE_COST:
while (($sdate, $next_hc, $dev_null) = $sth->fetchrow_array()) {
    last HOUSE_COST if $next_hc != $curr_hc;
}
if (! $next_hc || $next_hc == $curr_hc) {
    # no increase in sight
    $next_hc = 0;
    $sdate = 0;     # cannot be '' => syntax error in 'do'
}

my ($curr, $next);
$sth = $dbh->prepare("
    select *
      from housecost
     where id = $curr_hc
");
$sth->execute();
$curr = $sth->fetchrow_hashref();
if ($next_hc) {
    $sth = $dbh->prepare("
        select *
          from housecost
         where id = $next_hc
    ");
    $sth->execute();
    $next = $sth->fetchrow_hashref();
}

sub fees {
    my ($fees) = @_;
    my $s = <<"EOH";
<table style="margin-bottom: .25in; margin-left: .5in;">
<tr>
<th align=left>Housing Type</th>
<th class=fee>Cost</th>
</tr>
EOH
    TYPE:
    for my $type (reverse housing_types(1)) {
        next TYPE if $type =~ m{^economy|dormitory|triple$};
        $s .= <<"EOH";
<tr>
<td>$string{"long_$type"}</td>
<td class=fee>$fees->{$type}</td>
</tr>
EOH
    }
    $s .= <<"EOH";
</table>
EOH
    return $s;
}

my $fee_table = "";
if ($next_hc) {
    my $through = date($sdate)->prev()->format("%B %e, %Y");
    $fee_table .= "<p>Arriving on and before <b>$through</b>:\n";
}
$fee_table .= fees($curr);
if ($next_hc) {
    my $on_after = date($sdate)->format("%B %e, %Y");
    $fee_table .= "<p>Arriving on and after <b>$on_after</b>:\n";
    $fee_table .= fees($next);
}

my $start_month = date($string{disc_pr_start})->format("%B");
my $end_month   = date($string{disc_pr_end})->format("%B");
my $disc_pct    = $string{disc_pr};

# should be using Template::Toolkit!
$html =~ s{<!-- T disc_pct -->}
          {$disc_pct}g;     # note the g
$html =~ s{<!-- T start_month -->}
          {$start_month};
$html =~ s{<!-- T end_month -->}
          {$end_month};
$html =~ s{<!-- T fee_table -->}
          {$fee_table};

open my $ind, ">", "index.html" or die "no index.html: $!\n";
print {$ind} $html;
close $ind;

#
# generate progtable appropriately.
# several things here are specific to PRs.
#
open my $prg, ">", "progtable" or die "no progtable: $!\n";
print {$prg} <<"EOS";
{
0 => {
    title         => 'Personal Retreat',
    dates         => '',
    leader_names  => '',
    name          => 'Personal Retreat',
    canpol        => q~$canpol~,
    plink         => 'http://www.mountmadonna.org/personal',
    image1        => '',
    image2        => '',
    basicfull     => '0',
    ndays         => '0',
    fulldays      => '0',
    disc_pr       => '$string{disc_pr}',
    disc_pr_start => '$string{disc_pr_start}',
    disc_pr_end   => '$string{disc_pr_end}',
    footnotes     => '',
    do_not_compute_costs => '0',
    dncc_why      => '',
    next_hc       => $next_hc,
    next_date     => $sdate,
    type          => 'Per Day',
EOS
TYPE:
for my $type (reverse housing_types(1)) {
    next TYPE if $type =~ m{^economy|dormitory|triple$};
    print {$prg} "    'basic $type' => $curr->{$type},\n";
    if ($next_hc) {
        print {$prg} "    'next $type' => $next->{$type},\n";
    }
}
print {$prg} "}\n";
print {$prg} "}\n";
close $prg;

#
# send index.html and progtable to mountmadonna.org/personal
#
my $ftp = Net::FTP->new($string{ftp_site}, Passive => $string{ftp_passive})
    or my_die("cannot connect to $string{ftp_site}");    # not die???
$ftp->login($string{ftp_login}, $string{ftp_password})
    or my_die("cannot login " . $ftp->message);
$ftp->cwd('www/personal')
    or my_die("cannot cwd to www/personal " . $ftp->message);
$ftp->ascii();
$ftp->put("index.html");
$ftp->put("progtable");
$ftp->quit();
