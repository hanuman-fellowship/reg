#!/usr/bin/env perl
use strict;
use warnings;
use lib 'lib';
use Util qw/
    email_letter
    db_init
    model
    get_grid_file
    commify
/;
use Date::Simple qw/
    date
/;
use RetreatCenterDB;

my ($sdate, $edate, $email) = @ARGV;
my $start = date($sdate);
my $end   = date($edate);
my $d = $start->as_d8() . '_' . $end->as_d8();
# dates have been validated

my $c = db_init();
my $csv_file = "/tmp/data_$d.csv";
my $header = join(',',
           'Name',
           'Type',
           'Start Date',
           'End Date',
           'Tuition',
           '# People',
           'Event Days',
           'People Days',
           'Double Cost',
           'Single/Bath Cost',
           'Total Paid',
         ) . "\n";
my ($PR_came, $PR_paid, $PR_people_days) = (0, 0, 0);
my ($SG_came, $SG_paid, $SG_people_days) = (0, 0, 0);
my ($MMI_nprog, $MMI_came,  $MMI_paid,
    $MMI_prog_days, $MMI_people_days)  = (0, 0, 0, 0, 0);
my ($MMC_nprog, $MMC_came, $MMC_paid,
    $MMC_prog_days, $MMC_people_days) = (0, 0, 0, 0, 0);

my %lines = (
    PR => [],
    SG => [],
    MMC => [],
    MMI => [],
    Rental => [],
);

my @progs = model($c, 'Program')->search(
                {
                    sdate => { between => [ $start->as_d8, $end->as_d8 ] },
                },
                {
                    order_by => 'sdate asc',
                }
            );
for my $prog (@progs) {
    my $name = $prog->name;
    my $n_came = 0;
    my $tot_paid = 0;
    my $tuition = $prog->tuition;
    my $people_days = 0;
    my $sdate = $prog->sdate_obj;
    my $edate = $prog->edate_obj;
    my $prog_days = $edate - $sdate;
    REG:
    for my $reg ($prog->registrations) {
        if ($reg->cancelled) {
            next REG;
        }
        ++$n_came;
        for my $pay ($reg->payments) {
            $tot_paid += $pay->amount;
        }
        for my $pay ($reg->mmi_payments) {
            $tot_paid += $pay->amount;
        }
        if ($tuition) {
            CHARGE:
            for my $charge ($reg->charges) {
                if ($charge->what =~ m{tuition}xmsi) {
                    $tot_paid -= $tuition;
                    last CHARGE;
                }
            }
        }
        $people_days += $reg->date_end_obj - $reg->date_start_obj;
    }
    my $code;
    if ($name =~ m{Personal\s+Retreat}xms) {
        $code = 'PR';
        $PR_came += $n_came;
        $PR_paid += $tot_paid;
        $PR_people_days += $people_days;
    }
    elsif ($name =~ m{Special\s+Guest}xms) {
        $code = 'SG';
        $SG_came += $n_came;
        $SG_paid += $tot_paid;
        $SG_people_days += $people_days;
    }
    elsif ($name =~ m{MMI|Institute|YTT}xmsi || $prog->school->mmi) {
        $code = 'MMI';
        ++$MMI_nprog;
        $MMI_came += $n_came;
        $MMI_paid += $tot_paid;
        $MMI_prog_days += $prog_days;
        $MMI_people_days += $people_days;
    }
    else {
        $code = 'MMC';
        ++$MMC_nprog;
        $MMC_came += $n_came;
        $MMC_paid += $tot_paid;
        $MMC_prog_days += $prog_days;
        $MMC_people_days += $people_days;
    }
    push @{$lines{$code}},
        join(',', $name,
                  $code,
                  $sdate->format("%D"),
                  $edate->format("%D"),
                  $prog->tuition,
                  $n_came,
                  $prog_days,
                  $people_days,
                  $prog->housecost->dble,
                  $prog->housecost->single_bath,
                  trim_pennies($tot_paid))
        . "\n";
}
my @rentals = model($c, 'Rental')->search(
    {
        sdate => { between => [ $start->as_d8, $end->as_d8 ] },
    },
    {
        order_by => 'sdate asc',
    }
);
my $RENT_nrentals = 0;
my $RENT_paid = 0;
my $RENT_days = 0;
my $RENT_n_people = 0;
my $RENT_n_people_days = 0;
RENTAL:
for my $rent (@rentals) {
    if ($rent->program_id) {
        # hybrid
        next RENTAL;
    }
    ++$RENT_nrentals;
    my $sdate = $rent->sdate_obj;
    my $edate = $rent->edate_obj;
    $RENT_days += $edate - $sdate;
    my $fgrid = get_grid_file($rent->grid_code());
    my $error = "";
    my $tot_paid = 0;
    my $n_people = 0;
    my $n_people_days = 0;
    if (open my $in, "<", $fgrid) {
        while (my $line = <$in>) {
            my @fields = split /\|/, $line;
            my $name_note = $fields[2];
            $name_note =~ s{\s+~~.*}{}xms;
            if ($name_note =~ m{\S}xms) {
                ++$n_people;
                $tot_paid += pop @fields;
                shift @fields;  # house id
                shift @fields;  # bed
                shift @fields;  # name/note
                for my $f (@fields) {
                    $n_people_days += $f;   # either 0 or 1
                }
            }
        }
    }
    $RENT_paid += $tot_paid;
    $RENT_n_people += $n_people;
    $RENT_n_people_days += $n_people_days;
    push @{$lines{Rental}},
        join(',',
             $rent->name,
             'Rental',
             $sdate->format("%D"),
             $edate->format("%D"),
             0,      # tuition (none)
             $n_people,
             $edate - $sdate,
             $n_people_days,
             $rent->housecost->dble,
             $rent->housecost->single_bath,
             trim_pennies($tot_paid))
        . "\n"
        ;
}

# CSV file
open my $csv, '>', $csv_file
    or die "can't open $csv_file: $!\n";
print {$csv} $header;
for my $type (qw/ PR SG MMC MMI Rentals /) {
    for my $line (@{$lines{$type}}) {
        print {$csv} $line;
    }
}
close $csv;

# Summary Table for email
my $html = <<"EOH";
<h2>Financial Activity from $start to $end</h2>
See the attached CSV file.
<p>
<table cellpadding=5 border=1>
<tr align=left>
<th>Type</th>
<th>Count</th>
<th>Total Days</th>
<th>People Count</th>
<th>Nights Stayed</th>
<th>Total Revenue</th>
</tr>
EOH

# MMC
my $disp = commify(trim_pennies($MMC_paid));
$html .= <<"EOH";
<tr align=right>
<td align=left>MMC</td>
<td>$MMC_nprog</td>
<td>$MMC_prog_days</td>
<td>$MMC_came</td>
<td>$MMC_people_days</td>
<td>$disp</td>
</tr>
EOH

# MMI
$disp = commify(trim_pennies($MMI_paid));
$html .= <<"EOH";
<tr align=right>
<td align=left>MMI</td>
<td>$MMI_nprog</td>
<td>$MMI_prog_days</td>
<td>$MMI_came</td>
<td>$MMI_people_days</td>
<td>$disp</td>
</tr>
EOH
$disp = commify(trim_pennies($RENT_paid));
$html .= <<"EOH";
<tr align=right>
<td align=left>Rentals</td>
<td>$RENT_nrentals</td>
<td>$RENT_days</td>
<td>$RENT_n_people</td>
<td>$RENT_n_people_days</td>
<td>$disp</td>
</tr>
EOH

# Personal Retreats
$disp = commify(trim_pennies($PR_paid));
$html .= <<"EOH";
<tr align=right>
<td align=left>PRs</td>
<td>&nbsp;</td>
<td>&nbsp</td>
<td>$PR_came</td>
<td>$PR_people_days</td>
<td>$disp</td>
</tr>
EOH

# Special Guests
$disp = commify(trim_pennies($SG_paid));
$html .= <<"EOH";
<tr align=right>
<td align=left>SGs</td>
<td>&nbsp;</td>
<td>&nbsp</td>
<td>$SG_came</td>
<td>$SG_people_days</td>
<td>$disp</td>
</tr>
EOH

$html .= <<"EOH";
</table>
<p>
EOH
email_letter($c,
    to      => $email,
    from    => 'jon.bjornstad@gmail.com',
    subject => "Summary of financial activity $start to $end",
    html    => $html,
    files_to_attach => [
        $csv_file,
    ],
);
sleep 5;   # to get the email sent??
unlink $csv_file;
# all done

sub trim_pennies {
    my $amt = shift;
    $amt =~ s{[.]\d+$}{}xms;
    return $amt;
}

