#!/usr/bin/perl
use strict;
use warnings;
use CGI qw/:standard/;
use CGI::Carp qw/fatalsToBrowser/;

my $test = param('test') || 0;
my $dir  = param('dir');
my $progpath = "/home/mmc/www/" . ($dir ? $dir:
                                   $test? "staging2":
                                          "live");

=comment

dreg1 takes a program id or name
and looks it up in the regtable to get the 
various attributes of a program.

it then fills in dreg1.html with
these various attributes and presents
it to the user.

if there is cookie information, it will also be used.

=cut

my %proginfo;

#
# get the id OR name
# of the program and fill in the proginfo hash
#
my $the_id   = param('id');
my $the_name = param('progname');

open my $regt, "<", "$progpath/regtable"
    or die "cannot open $progpath/regtable: $!";
my $found = 0;
while (<$regt>) {
    chomp;
    my ($k, $v) = split /\t/;
    if ($k eq "pid") {
        #
        # this is the beginning of a new program
        # was the _prior_ program the one we want?
        #
        if (($the_id   && $proginfo{pid}   eq $the_id) ||
            ($the_name && $proginfo{pname} eq $the_name)
        ) {
            $found = 1;
            last;
        }
        else {
            # clear the proginfo hash
            %proginfo = ();
        }
    }
	$v =~ s/NEWLINE/\n/g;		# for canpol
    $proginfo{$k} = $v;
}
close $regt;
if (($proginfo{pid}  eq $the_id) ||
    ($proginfo{pname}    eq $the_name)
) {
    # the last program is the one that matched
    $found = 1;
}
if (! $found) {
    print header;
    print "Could not find the program you requested.  Sorry.\n";
    exit;
}

# TODO: complain if you try to register for a program that has already happened.

open my $regtemp, "<", "dreg1.html"
    or die "cannot open dreg1.html: $!";
{
    local $/;
    $_ = <$regtemp>;
    close $regtemp;
}
s/ZZtestZZ/$test/g;
s/ZZdirZZ/$dir/g;
#
# an exception for personal retreats
#
if ($proginfo{desc} =~ /personal retreat/i) {
    $proginfo{dates} = "";
    $proginfo{leaders} = "";
    #
    # not sure why i had to put this in a td tag in order
    # to have the class reg1prog take proper effect.
    # with just a <span class="reg1prog"> it was not the
    # same. ??
    #
    s#ZZregisterForZZ#<table><tr><td class="reg1prog">Personal Retreat</td></tr></table>#g;
}
else {
    s#ZZregisterForZZ#
<table border=0 cellpadding=3>
<tr><th class="reg1title">Program</th><td class="reg1prog">$proginfo{desc}</td></tr>
<tr><th class="reg1title">Dates</th><td class="reg1prog">$proginfo{dates}</td></tr>
<tr><th class="reg1title">Presenter</th><td class="reg1prog">$proginfo{leaders}</td></tr>
</table>
#g;
}
for my $w (qw/pid desc dates leaders pname canpol/) {
    s/ZZ${w}ZZ/$proginfo{$w}/g;
}
my $basicfull = ($proginfo{ndays} != $proginfo{fulldays});
my $bdays = $proginfo{ndays};
my $fdays = $proginfo{fulldays};
my $choose;
if ($basicfull) {
    # muck with the dates
    my ($bdates, $fdates) = split /,/, $proginfo{dates};
    if ($fdates =~ /^\s*\d/) {
        my ($month) = $bdates =~ /([a-z]+)/i;
        $fdates = "$month " . $fdates;
    }
    $choose = <<EOH;
<h2>Length of Program</h2>
<span class="required">*</span> How many days do you want to attend?<br>
<ul>
<input type=radio name=progchoice value=basic> $bdays days from $bdates<br>
<input type=radio name=progchoice value=full > $fdays days from $fdates<br>
</ul>
EOH
}
elsif ($proginfo{desc} =~ /personal retreat/i) {
    $choose = <<EOH;
<input type=hidden name=progchoice value=basic>
<table>
<tr><td align=right><span class="required">*</span> Arrival Date:</td><td><input type=text name=arr_date size=10>&nbsp;&nbsp;&nbsp;Format dates like this: 06/17/05.&nbsp;&nbsp;6/17/5 is okay, too.</td></tr>
<tr><td align=right><span class="required">*</span> Departure Date:</td><td><input type=text name=dep_date size=10></td></tr>
</table>
EOH
}
else {
    $choose = "<input type=hidden name=progchoice value=basic>";
}
s{ZZprogchoiceZZ}{$choose};

#
# get cookies and use them
# CGI must do this for us - but ???
#
my %cookie;
my $cookies = $ENV{HTTP_COOKIE};
open TMP, ">/tmp/jon";
print TMP "cookies = '$cookies'\n";
$cookies =~ s{.*fname=}{fname=};
$cookies =~ s{'$}{};
for (split /\&/, $cookies) {
    my ($k, $v) = split /=/;
    $cookie{$k} = CGI::unescape($v);
}
for my $k (sort keys %cookie) {
    print TMP "$k => $cookie{$k}\n";
}
close TMP;
if ($cookie{gender} eq "female") {
    s{ZZfemaleZZ}{checked};
    s{ZZmaleZZ}{};
}
elsif ($cookie{gender} eq "male") {
    s{ZZmaleZZ}{checked};
    s{ZZfemaleZZ}{};
}
else {
    s{ZZmaleZZ}{checked};
    s{ZZfemaleZZ}{};
}
if ($cookie{cabinRoom} eq 'cabin') {
    s{ZZcabinZZ}{checked};
    s{ZZroomZZ} {};
}
else {
    s{ZZcabinZZ}{};
    s{ZZroomZZ} {checked};
}
s{ZZcarpoolZZ}       {$cookie{carpool       }? 'checked': ''}e;
s{ZZhascarZZ}        {$cookie{hascar        }? 'checked': ''}e;
s{ZZwithwhom_firstZZ}{$cookie{withwhom_first}};
s{ZZwithwhom_lastZZ} {$cookie{withwhom_last}};
s{ZZe_mailingsZZ}    {$cookie{e_mailings    }? 'checked': ''}e;
s{ZZsnail_mailingsZZ}{$cookie{snail_mailings}? 'checked': ''}e;
s{ZZshare_mailingsZZ}{$cookie{share_mailings}? 'checked': ''}e;
for my $w (qw/fname lname street1 street2
              city state zip country dphone ephone cphone email1/) {
    s{ZZ${w}ZZ}{$cookie{$w}}ge;
}
s{ZZemail2ZZ}{$cookie{email1}}ge;

my ($mft, $mftlic);
if ($proginfo{footnotes} =~ m{[*][*]}) {
    $mft = ", LMFT, or LCSW";
    $mftlic = ", MFT43210 or LSW31415";
}
else {
    $mft = "";
    $mftlic = "";
}
if ($proginfo{footnotes} =~ m{[*]}) {
	s{ZZceuZZ}{
<tr><td colspan=3 align=left>
If you are a nurse$mft and wish a CEU certificate:
</td></tr>

<tr>

<td align=right>License #</td>

<td>
<input type=text name=ceu_license value='$cookie{ceu_license}'
size=11 maxlength=11>
</td>

<td>
Like this: RN98765$mftlic<br>
If you only want a certificate of completion enter COMP for the license #.
</td>
</tr>

<tr><td colspan=3>&nbsp;</td></tr>
	}x;
}
else {
	s{ZZceuZZ}{};
}

#
# get the basic housing keys
#
my @housekeys = grep { /^basic / } keys %proginfo;

#
# generate the housing choices
#
my $housing .= <<EOH;
<table>
<tr>
<th valign=bottom>1st</th>
<th valign=bottom>2nd</th>
<th align=left valign=bottom>Housing Type</th>
EOH
if ($basicfull) {
    $housing .= <<EOH
<th align=right>$bdays days</th>
<th align=right>$fdays days</th>
EOH
}
else {
    $housing .= <<EOH;
<th align=right>Cost</th>
EOH
}
$housing .= "</tr>\n";
for my $k (sort { $proginfo{$a} <=> $proginfo{$b} } @housekeys) {
    my $nk = $k;
    $nk =~ s/basic //;
    my $kk = $k;
    $kk =~ s/basic //;
    $kk =~ s/(\w+)/\u\L$1/g;
    $kk =~ s/Dble/Double/;
    $kk =~ s!Bath!w/ Bath!;
    my $full = $k;
    $full =~ s/basic/full/;
    $housing .= <<EOH;
<tr>
<td><input type=radio name=house1 value='$nk'></td>
<td><input type=radio name=house2 value='$nk'></td>
<td>$kk</td>
<td align=right width=50>$proginfo{$k}</td>
EOH
    if ($basicfull) {
        $housing .= "<td align=right width=70>$proginfo{$full}</td>\n";
    }
    $housing .= "</tr>\n";
}
$housing .= "</table>\n";
$housing = "<ul>$housing</ul>";
s{ZZhousingZZ}{$housing};
print header;
print;
