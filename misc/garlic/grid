#!/usr/bin/perl
use strict;
use warnings;

use lib 'lib';
use Template;
use CGI qw/:standard/;
use CGI::Carp qw/fatalsToBrowser/;
print header;
use Date::Simple qw/
    date
/;
Date::Simple->default_format("%B %e '%q");
use File::Copy;

sub commify {
    my ($n) = @_;
    $n = reverse $n;
    $n =~ s/(\d\d\d)(?=\d)(?!\d*\.)/$1,/g;
    return scalar reverse $n;
}

my $code = param('code');
my $fname = "rental/$code.txt";
my $dname = "rental/$code-data.txt";
if (! -f $fname) {
    print "Sorry, Could not find a rental for the code $code.";
    # send an alert to the authorities!
    exit;
}
my (%hash, @houses);
open my $in, "<", $fname
    or die "cannot open $fname: $!";
while (my $line = <$in>) {
    chomp $line;
    if ($line =~ m{\|}) {
        # housing that has been assigned
        #
        my ($id, $name, $max, $bath, $tent, $own) = split m{\|}, $line;
        push @houses, {
            id   => $id,
            name => $name,
            max  => $max,
            bath => $bath,
            tent => $tent,
            own  => $own,
        };
    }
    else {
        # housing_type cost
        # also info about the rental like
        # name, id, first, last, sdate, edate
        #
        my ($k, $v) = $line =~ m{^(\S+)\s+(.*)$};
        $hash{$k} = $v;
    }
}
close $in;
#
# pay attention... this is bizarre and tricky.
#
# Own Van and Commuting is not kept track of in $fname
# since the maximum # of beds is dynamic - and it is controlled by the user
# not Reg which writes $fname.   If the user has changed
# the maximum # of beds they will appear in $dname.
# So look there (if it exists) for the max and append to @houses.
#
my %max = ();
$max{1001} = 5;
$max{1002} = 5;
if (-f $dname) {
    open my $in, "<", $dname
        or die "cannot open $dname: $!\n";
    while (my $line = <$in>) {
        if ($line =~ m{^(100[12])\|(\d+)}) {
            $max{$1} = $2;
        }
    }
    close $in;
}
for my $k (1001, 1002) {
    push @houses,
    {
        id   => $k,
        name => $k == 1001? 'Own Van'
                :           'Commuting',
        max  => $max{$k},
        bath => 0,
        tent => 0,
        own  => 0,
    };
}
my $sdate = date($hash{sdate});
my $edate = date($hash{edate});
my $nnights = $edate - $sdate;
my @days;
my $days = join '',
           map { "<th align=center>" . ($sdate + $_)->format("%s") . "</th>" }
           0 .. $nnights-1;

if (param('process')) {
    # get the input data
    #
    my %P;
    for my $p (param()) {
        $P{$p} = param($p);
    }
    # put it in a file while computing the costs
    #
    open my $out, ">", $dname
        or die "cannot create $dname: $!";
    my $gtotal = 0;
    HOUSE:
    for my $h (@houses) {
        my $id = $h->{id};
        if ($id >= 1001) {      # own van/commuting
            my $per_night = $hash{$id == 1001? "own_van": "commuting"};
            my $bed = 1;
            BED:
            while (exists $P{"p$id\_$bed"}) {
                my $name = $P{"p$id\_$bed"};
                print {$out} "$id|$bed|";
                $name ||= "";            # in case it is undef
                print {$out} "$name|";
                # how many people?
                my @peeps = split m{\&|\band\b}i, $name;
                my $npeeps = @peeps;
                my $totn = 0;
                for my $n (1 .. $nnights) {
                    my $occ = $P{"n$id\_$bed\_$n"} || 0;
                    print {$out} "$occ|";
                    $totn += $occ;
                }
                my $cost = $totn * $per_night * $npeeps;
                print {$out} "$cost\n";
                $P{"c$id\_$bed"} = $cost || "";
                $gtotal += $cost;
                ++$bed;
            }
            --$bed;     # we went one beyond
            #
            # we have $bed 'beds' in this category
            # this may be different from what is in $fname
            # in case the user added 'more'.   so we need
            # to update $fname appropriately.
            #
            if ($bed > $h->{max}) {
                open my $in, "<", $fname
                    or die "cannot open $fname: $!\n";
                open my $out, ">", "/tmp/grid"
                    or die "cannot open /tmp/grid: $!\n";
                while (my $line = <$in>) {
                    if ($line =~ m{^$id\|}) {
                        $line =~ s{^($id\|[^\|]*)\|\d+}{$1|$bed};
                    }
                    print {$out} $line;
                }
                close $in;
                close $out;
                rename "/tmp/grid", $fname;
                $h->{max} = $bed;       # don't forget this!
            }
            next HOUSE;
        }
        my $bath = ($h->{bath})? "_bath"
                  :              ""
                  ;
        for my $bed (1 .. $h->{max}) {
            my $override_np = 0;
            if ($P{"p$id\_$bed"} =~ m{-\s*([12347])\s*$}) {
                $override_np = $1;
            }
            print {$out} "$id|$bed|";
            print {$out} $P{"p$id\_$bed"} . '|';
            my $cost = 0;
            NIGHT:
            for my $n (1 .. $nnights) {
                my $occ = $P{"n$id\_$bed\_$n"} || 0;
                print {$out} "$occ|";
                if ($occ) {
                    if ($h->{tent}) {
                        $cost += ($h->{own})? $hash{own_tent}
                                :             $hash{center_tent}
                                ;
                        next NIGHT;
                    }
                    # how many people in this room this night?
                    #
                    my $np = 0;
                    for my $b (1 .. $h->{max}) {
                        if ($P{"n$id\_$b\_$n"}) {
                            ++$np;
                        }
                    }
                    if ($override_np) {
                        $np = $override_np;
                    }
                    $cost += ($np == 1            )? $hash{"single$bath"}
                            :($np == 2            )? $hash{"dble$bath"}
                            :($np == 3            )? $hash{triple}
                            :(4 <= $np && $np <= 7)? $hash{dormitory}
                            :                        $hash{economy}
                            ;
                }
            }
            #
            # handle more than one person in a tent
            # and children.
            #
            my $tot = 0;
            my $name = $P{"p$id\_$bed"};
            for my $p (split m{\&|\band\b}i, $name) {
                $tot += ($p =~ m{\bchild\b}i)? $cost/2
                        :                      $cost
                        ;
            }
            $cost = int($tot);
            print {$out} "$cost\n";

            $gtotal += $cost;
            if ($name !~ m{\S} && ! $cost) {
                $cost = "";
            }
            $P{"c$id\_$bed"} = $cost;
            if (($cost == 0 && $name)
                || $override_np
                || $name =~ m{\&}
                || $name =~ m{\bchild\b}
            ) {
                $P{"cl$id\_$bed"} = 1;
            }
            else {
                $P{"cl$id\_$bed"} = 0;
            }
        }
    }
    close $out;
    #
    # copy to the dir in which grab_new looks for changed data files
    #
    copy($dname, "rental/ftp_dir/$code-data.txt");

    # display it with costs
    #
    my $html = "";
    my $tt = Template->new({
        INCLUDE_PATH => 'rental',
        EVAL_PERL    => 0,
    });
    my $stash = {
        sdate   => $sdate,
        edate   => $edate,
        data    => \%P,
        hash    => \%hash,
        houses  => \@houses,
        nnights => $nnights,
        days    => $days,
        total   => commify($gtotal),
        code    => $code,
    };
    $tt->process(
        "sgrid.tt2", # template
        $stash,       # variables
        \$html,       # output
    );
    print $html;
    exit;
}

#
# present input form populated with the data file, if present
#
my %data = ();
if (open my $in, "<", $dname) {
    LINE:
    while (my $line = <$in>) {
        chomp $line;
        if ($line =~ m{^(own_van|commuting)\|(\d+)}) {
            $data{$1} = $2;
            next LINE;
        }
        my ($id, $bed, $name, @nights) = split m{\|}, $line;
        $data{"p$id\_$bed"} = $name;
        for my $n (1 .. $nnights) {
            $data{"n$id\_$bed\_$n"} = $nights[$n-1];
        }
    }
    close $in;
}
my $html = "";
my $tt = Template->new({
    INCLUDE_PATH => 'rental',
    EVAL_PERL    => 0,
});
my $stash = {
    code    => $code,
    sdate   => $sdate,
    edate   => $edate,
    data    => \%data,
    hash    => \%hash,
    houses  => \@houses,
    nnights => $nnights,
    days    => $days,
    hash    => \%hash,
};
$tt->process(
    "grid.tt2",  # template
    $stash,       # variables
    \$html,       # output
);
print $html;
