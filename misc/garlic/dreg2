#!/usr/bin/perl
use strict;
use warnings;
use CGI qw/:standard/;
use Date::Simple;

my $test = param('test') || 0;
my $dir  = param('dir');
my $progpath = "/home/mmc/www/" . ($dir ? $dir:
								   $test? 'staging2':
								   "live"           );

# for debugging
#open TMP, ">/tmp/jon";
#print TMP "progchoice '", param('progchoice'), "'\n";
#close TMP;

#
# gather all the form elements into a hash
#
my %form;
for my $w (param()) {
    $form{$w} = param($w);
    $form{$w} =~ s{^\s*|\s*$}{}g;       # trim it
}
if ($form{hascar}) {
    $form{carpool} = "yes";
}

#
# get the id of the program and fill in the proginfo hash
#
my %proginfo;
open my $regt, "<", "$progpath/regtable"
    or die "cannot open $progpath/regtable: $!";
while (<$regt>) {
    last if /^pid\t$form{pid}$/;
}
if (eof($regt)) {
    print header;
    print "Could not find the program you requested.  Sorry.\n";
    exit;
}
while (<$regt>) {
    chomp;
    last if /^pid/;
    my ($k, $v) = split /\t/;
    $proginfo{$k} = $v;
}
close $regt;

# now we're ready to examine the form elements.

my $err;

sub check {
    my ($field, $message) = @_;
    $err .= "<li>$message\n"
        unless exists $form{$field} and $form{$field} =~ /\S/;
}

check("progchoice", "Please choose how many days you want to attend.");
check("fname", "Missing first name");
check("lname", "Missing last name");
check("gender", "For housing purposes please specify whether you are male or female.");
unless ($form{street1} or $form{street2}) {
    $err .= "<li>Missing street address.\n";
} 
check("city", "Missing city.");
check("state", "Missing state.");
check("zip", "Missing zip code.");
unless ($form{dphone} or $form{ephone}) {
    $err .= "<li>Please fill out either the home or work phone.\n";
} 
check("email1", "Missing email address.");
unless ($form{email1} eq $form{email2}) {
    $err .= "<li>The two email addresses do not match.\n";
}
unless ($form{house1} and $form{house2}) {
    $err .= "<li>Please fill out both choices of housing.\n";
} 
my ($sdate, $edate, $ndays);		# only for Personal Retreats 
if ($form{pname} =~ m{personal retreat}i) {
	#
	# check dates for personal retreat
	#
	$sdate = $form{arr_date};
	if ($sdate =~ m#^\s*\d+/\d+/\d+\s*$#) {
		my ($m, $d, $y) = split '/', $sdate;
		$y += 2000;
		$sdate = Date::Simple->new($y, $m, $d);
		$err .= "<li>Illegal date for arrival date.\n"
			unless $sdate;
	}
    else {
		$err .= "<li>Bad date format for arrival date.\n";
	}
	$edate = $form{dep_date};
	if ($edate =~ m#^\s*\d+/\d+/\d+\s*$#) {
		my ($m, $d, $y) = split '/', $edate;
		$y += 2000;
		$edate = Date::Simple->new($y, $m, $d);
		$err .= "<li>Illegal date for departure date.\n"
			unless $edate;
	}
    else {
		$err .= "<li>Bad date format for departure date.\n";
	}
	$ndays = $edate-$sdate;
	$err .= "<li>Departure date is not after the arrival date!\n"
		unless $ndays >= 1;
}
if ($proginfo{footnotes} =~ /\*/
    && $form{ceu_license}
    && $form{ceu_license} !~ m{^comp$}i
) {
    my $begin = "<li>To qualify for a CEU certificate for this program"
              . " you must have a license number beginning with";
    if ($proginfo{footnotes} =~ /\*\*/) {
        if ($form{ceu_license} !~ m{^(RN|LSW|MFT)}) {
            $err .= "$begin RN, LSW or MFT.";
        }
    }
    elsif ($proginfo{footnotes} =~ /\*/) {
        if ($form{ceu_license} !~ m{^RN}) {
            $err .= "$begin RN.";
        }
    }
    else {
        # cannot happen
    }
}
if ($err) {
    print header;
    my $text;
    {
        open my $in, "<", "err.html"
            or die "cannot open err.html: $!";
        local $/;
        $text = <$in>;
        close $in;
    }
    $text =~ s/ZZerrZZ/$err/;
    print $text;
    exit;
}

#
# all is well.
# print the confirmation page and create the cookies
# some problem with using the CGI methods.
# i'm going to do it myself...
#
print "Content-type: text/html\n";
print "Set-Cookie: ";
print join('&',
            map("$_=" . CGI::escape($form{$_}),
	        qw/fname lname gender
               street1 street2 city state zip
               country
               ceu_license dphone ephone cphone email1
               carpool hascar
               cabinRoom
               withwhom_first withwhom_last
               e_mailings snail_mailings share_mailings
            /));
print "; expires=SUN, 26-OCT-50 15:45:30 GMT; path=/;\n";
print "\n";

#
# how much to charge??
# it depends on their house1 choice, progchoice, 
# and on colltot and deposit values.
#
my ($x_amount, $due);
my $key = $form{progchoice} . " " . $form{house1};
my $total = $proginfo{$key};
if ($form{pname} =~ m{personal retreat}i) {
	$total = $ndays*$total;
	$total -= 0.10*$total if $ndays >= 7;
	$total -= 0.10*$total if $ndays >= 30;
	$total = int($total);
	$x_amount = ($total <= 100)? $total: 100;
}
elsif ($proginfo{colltot}) {
	$x_amount = $total;
}
elsif ($proginfo{deposit}) {
	$x_amount = $proginfo{deposit};
}
else {
	$x_amount = 100;
}
$due = $total - $x_amount;

#
# Call subroutine that sets $fingerprint_html 
#
# Jamal's authorize.net code
#
use SimLib;
my $loginid = "x5aebjakm";
my $txnkey = "78QyCHfp69MP43bY";
my $x_currency_code = "USD";

my $fingerprint_html =
     SimLib::InsertFP($loginid, $txnkey, $x_amount, $x_currency_code);

#
# outputting the form
#

#
# create a readable description for the user
#
open my $regpr, "<", "dreg2.html"
    or die "cannot open dreg2.html: $!";
{
    local $/;
    $_ = <$regpr>;
    close $regpr;
}

s/ZZtestZZ/$test? "TRUE": "FALSE"/eg;
s/ZZfingerprint_htmlZZ/$fingerprint_html/;
s/ZZx_descriptionZZ/$form{pname}/g;
s/ZZloginidZZ/$loginid/g;
s/ZZx_amountZZ/$x_amount/g;

s/ZZx_firstnameZZ/$form{fname}/g;
s/ZZx_lastnameZZ/$form{lname}/g;
s/ZZx_addressZZ/$form{street1} $form{street2}/g;

if ($form{gender} eq "female") {
    s/ZZgenderZZ/Female/g;
}
elsif ($form{gender} eq "male") {
    s/ZZgenderZZ/Male/g;
}
if ($form{ephone}) {
    s!ZZephoneZZ!<tr><th align=right>Home phone:</th><td>$form{ephone}</td></tr>\n!;
}
else {
    s/ZZephoneZZ//g;
}

if ($form{dphone}) {
    s!ZZdphoneZZ!<tr><th align=right>Work phone:</th><td>$form{dphone}</td></tr>\n!;
}
else {
    s/ZZdphoneZZ//g;
}

if ($form{cphone}) {
    s!ZZcphoneZZ!<tr><th align=right>Cell phone:</th><td>$form{cphone}</td></tr>\n!;
}
else {
    s/ZZcphoneZZ//g;
}

if ($form{ceu_license}) {
    s{ZZceuZZ}{<tr><th align=right>CEU License #:</th><td>$form{ceu_license}</td></tr>\n};
	s{ZZceu_licenseZZ}{$form{ceu_license}};		# for passing on to reg...
}
else {
    s/ZZceuZZ//g;
	s{ZZceu_licenseZZ}{};		# for passing on to reg...
}

#
# optional field - cabin or room?
#
if ($form{cabinRoom}) {
    my $other = ($form{cabinRoom} =~ /room/)? "cabin": "room";
    s/ZZcabinroom_verboseZZ/<p>You would prefer a $form{cabinRoom}, if available, instead of a $other./g;
    s/ZZcabinroomZZ/$form{cabinRoom}/g;
} else {
    s/ZZcabinroom_verboseZZ//g;
    s/ZZcabinroomZZ//g;
}
my $howHeardResponse = "";
if ($form{howHeard} eq "web") {
     $howHeardResponse = "the web";
} elsif ($form{howHeard} eq "ad") {
     $howHeardResponse = "an ad";
     if ($form{advertiserName}) {
         $howHeardResponse .= " in " . $form{advertiserName};
     } 
} elsif ($form{howHeard} eq "brochure") {
     $howHeardResponse = "the Mount Madonna Center Brochure";
} elsif ($form{howHeard} eq "flyer") {
     $howHeardResponse = "a flyer";
} 

s/ZZhowheardZZ/$form{howHeard}/g;
s/ZZadvertisernameZZ/$form{advertiserName}/g;
if ($howHeardResponse) {
    s/ZZhowheard_verboseZZ/<p>You heard about this program through $howHeardResponse./g;
} else {
    s/ZZhowheard_verboseZZ//g;
}

if ($form{carpool}) {
    if ($form{hascar}) {
        s/ZZcarpool_verboseZZ/<p>You can offer a ride./g;
    }
    else {
        s/ZZcarpool_verboseZZ/<p>You would like a ride./g;
    }
} else {
    s/ZZcarpool_verboseZZ//g;
}

my $mv;
if ($form{e_mailings} || $form{snail_mailings}) {
     $mv = "<p>We will include you on occasional mailings via ";
     if ($form{e_mailings}) {
        $mv .= "email";
     }
     if ($form{snail_mailings}) {
        if ($form{e_mailings}) {
            $mv .= " and ";
        }
        $mv .= "snail mail";
     }
     $mv .= ".";
}
else {
    $mv = "<p>We will <b>not</b> include you on occasional mailings from MMC.";
}
$mv .= "<p>We will "
     . ($form{share_mailings}? "": "<b>not</b> ")
     . "share your contact information with MMC affiliates.";
s/ZZmailings_verboseZZ/$mv/eg;

my %house = (
    "commuting"    => "Commuting",
    "own tent"     => "Own Tent",
    "own van"      => "Own Van",
    "center tent"  => "Center Tent",
    "economy"      => "Economy",
    "dormitory"    => "Dormitory (4-7 per room)",
    "quad"         => "Quadruple Occupancy",
    "triple"       => "Triple Occupancy",
    "dble"         => "Double Occupancy",
    "dble bath"    => "Double Occupancy with Bath",
    "single"       => "Single Occupancy",
    "single bath"  => "Single Occupancy with Bath"
);
s/ZZhouse1_verboseZZ/$house{$form{house1}}/g;
s/ZZhouse2_verboseZZ/$house{$form{house2}}/g;
s/ZZhouse1ZZ/$form{house1}/g;
s/ZZhouse2ZZ/$form{house2}/g;
if ($form{withwhom_first} =~ /\S/) {
    s/ZZwithwhom_verboseZZ/<p>Sharing a room with $form{withwhom_first} $form{withwhom_last}./g;
}
else {
    s/ZZwithwhom_verboseZZ//g;
}

s/ZZrequestZZ/$form{request}/g;
if ($form{request}) {
    my $s = $form{request};
    $s =~ s/\n/<br>\n/g;
    s/ZZrequest_verboseZZ/<h2>Additional Requests<\/h2><BLOCKQUOTE>$s<\/BLOCKQUOTE>/g;
} else {
    s/ZZrequest_verboseZZ//g;
}
for my $name (qw/fname lname street1 street2 city state zip
                 country dphone ephone cphone email1 carpool hascar
                 e_mailings snail_mailings share_mailings
                 house1 house2 request withwhom_first withwhom_last
                 pid desc leaders pname progchoice/) {
    s/ZZ${name}ZZ/$form{$name}/ig;
}
#
# in addition to the street1, street2 above
# which are for the hidden fields we also have
# street_addr which is a special case.
#
my $street_addr = $form{street1};
if ($form{street2} =~ /\S/) {
    $street_addr .= "<br>$form{street2}";
}
s/ZZstreet_addrZZ/$street_addr/ig;

if ($form{pname} =~ m{personal retreat}i) {
	s#ZZsdateZZ#$sdate->format("%m/%d/%Y")#eg;
	s#ZZedateZZ#$edate->format("%m/%d/%Y")#eg;
} else {
	s/ZZsdateZZ//g;
	s/ZZedateZZ//g;
}
#
# what dates?
#
if ($form{dates} =~ /,/) {
    #
    # we need to look at the choice of program
    #
    my ($bdate, $fdate) = split /,/, $form{dates};
    $bdate =~ s/^\s*|\s*$//g;
    $fdate =~ s/^\s*|\s*$//g;
    if ($fdate =~ /^\d/) {
	my ($month) = $bdate =~ /^(\w+)/; 
	$fdate = $month . " " . $fdate;
    }
    s/ZZdatesZZ/($form{progchoice} eq "basic")? $bdate: $fdate/eg;
}
elsif ($form{pname} =~ m{personal retreat}i) {
	my $date = "$ndays day" . (($ndays > 1)? "s": "");
	$date .= " from ";
	$date .= $sdate->format("%A %B %e, %Y");
	$date .= " to ";
	$date .= $edate->format("%A %B %e, %Y");
	s/ZZdatesZZ/$date/g;
}
else {
    s/ZZdatesZZ/$form{dates}/g;
}

my $payment;
if ($proginfo{colltot}) {
    $payment = <<EOH;
<h2>Payment</h2>
For this program the total cost of \$$x_amount needs to be collected up front.
EOH
}
else {
    $payment = <<EOH;
<h2>Deposit Payment</h2>
The total cost of this program is \$$total.<br>
A deposit of \$$x_amount is required.<br>
The balance of \$$due is due at the time of registration.
EOH
}
s/ZZpaymentZZ/$payment/g;
s/ZZdueZZ/$due/g;
s/ZZcolltotZZ/$proginfo{colltot}/g;
s/ZZtotalZZ/$total/g;

print;
