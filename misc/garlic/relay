#!/usr/bin/perl
use strict;
use warnings;

use CGI qw/:standard :cgi-lib/;
$|++;               # unbuffer STDOUT
print header;       # so authorize.net knows we are alive

use CGI::Carp qw/fatalsToBrowser/;
use File::Copy;

use Mail::Sender;
use lib 'mylib/lib/perl5';
use Template;

sub touch {
    my ($fname) = @_;
    open my $out, '>', $fname;
    close $out;
}

# form parameters to a hash
# so it is interpolatable.
#
my %P = Vars();
my $id = $P{x_trans_id};

# ensure the first and last names look okay.
$P{x_fname} = normalize($P{x_fname});
$P{x_lname} = normalize($P{x_lname});

#
# was it a failed transaction?
#
if ((exists $P{x_response_code}  && $P{x_response_code} != 1)
    ||
    (! exists $P{x_trans_id})
) {
    print <<"EOH";
Sorry, the transaction failed for this reason:
<p>
$P{x_response_reason_text}
EOH
    exit;
}

if (exists $P{x_req_mmi_id}) {
    rename "req_mmi_dir/$P{x_req_mmi_code}", "req_mmi_dir/paid/$id";
    my $message;
    Template->new(INTERPOLATE => 1)->process(
        'req_mmi_message.tt2',
        \%P,
        \$message,
    );
    print $message;
    exit;
}
if (exists $P{x_member_id}) {
    my $amt = $P{x_amount};
    $amt =~ s{[.].*}{}xms;
    touch("omp_dir/$P{x_member_id}_$amt\_$id");
    my ($min, $hr, $d, $m, $y) = (localtime)[1..5];
    ++$m;
    $y += 1900;
    my $dir = sprintf "omp_archive/%d-%02d", $y, $m;
    mkdir $dir if ! -d $dir;
    touch("$dir/$P{x_member_id}_$amt\_$id");
    open my $out, '>>', "omp_log.txt";
    printf {$out} "%d-%02d-%02d %02d:%02d $id"
                 ." $P{x_fname} $P{x_lname} $P{x_amount} $P{x_category}\n",
                  $y, $m, $d, $hr, $min;
    close $out;
    Template->new(INTERPOLATE => 1)->process(
        'omp_thanks.tt2',
        \%P,
    );
    exit;
}

if (! exists $P{x_pid}) {
    exit;       # must be a refund - silently ignore it
}

open my $out, ">", "temp$id"
	or die "cannot create temp$id: $!\n";
my ($min, $hour, $d, $m, $y) = (localtime)[ 1..5 ];
++$m;
$y += 1900;
print {$out} "x_date => $m/$d/$y\n";
printf {$out} "x_time => %02d:%02d\n", $hour, $min;
PARAM:
for my $k (sort keys %P) {
    next PARAM unless $k =~ m{^x_};
    my $val = $P{$k};
	print {$out} "$k => " unless $k eq 'x_request';
	if ($k =~ m{home|work|cell}) {
		my $phone = $val;
        my $n = $phone =~ tr/0-9/0-9/;
        if ($n == 10 && $phone =~ m{^[0-9\(\)-. /]+$}) {
            #
            # an American phone number
            # reformat it in a standard way
            #
            $phone =~ s{[^0-9]}{}g;
            $phone = substr($phone, 0, 3) . "-"
                   . substr($phone, 3, 3) . "-"
                   . substr($phone, 6, 4);
        }
		print {$out} $phone;
    }
    elsif ($k eq 'x_country') {
        my $country = $val;
        $country =~ s{^\s*|\s*$}{}g;
        $country =~ s{[^\w ]}{}g;
        if ($country =~ /^us|usa|united states$/i) {
            $country = "";
            print {$out} $country;
        }
        else {
            print {$out} param($k);
        }
    }
    elsif ($k eq 'x_request') {
		my $request = $val;
		$request =~ s{\cM\n}{ }g;
		my $n = 1;
        my ($i, $first);
		while (length($request) > 70) {
			$i = rindex($request, ' ', 70);
			$first = substr($request, 0, $i);
			print {$out} "x_request$n => $first\n";
			++$n;
			$request = substr($request, $i+1);
		}
		print {$out} "x_request$n => $request\n" if length($request) > 0;
		next PARAM;		# no need for extra newline
	}
    elsif ($k =~ m{date}) {
        $val =~ s{4008}{2008};        # it HAS happened, not sure why
        print {$out} $val;
    }
    else {
		print {$out} $val;
	}
	print {$out} "\n";
}
close $out;

#
# we have prepared the file.
# now move it quickly to the transactions dirs.
#
rename "temp$id", "transactions/$id";

# as a backup and an archive:
my $dir = sprintf "trans_archive/$y-%02d", $m;
mkdir $dir unless -d $dir;
copy("transactions/$id", "$dir/$id");

# log the event for tracking purposes
open my $log, '>>', 'relay_log';
print {$log} scalar(localtime), " $id, $P{x_fname} $P{x_lname}, $P{x_email}, $P{x_title}\n";
close $log;

my $message;
Template->new()->process(
    'message.tt2',
    \%P,
    \$message,
);
print $message;

# put the script into the background to send the email
fork and exit;

#
# send an email with the info.
#
my $ms = Mail::Sender->new({
    smtp    => 'mail.suecenter.org',
    port    => 50,
    auth    => 'LOGIN',
    authid  => 'test@suecenter.org',
    authpwd => 'ABCdef108',
});
if (! $ms) {
    die "no mail sender: ";
}
$ms->Open({
    to       => "$P{x_fname} $P{x_lname} <$P{x_email}>",
    from     => 'Mount Madonna Center <reservations@mountmadonna.org>',
    subject  => "Online registration for $P{x_title}",
    ctype    => "text/html",
    encoding => "7bit",
})
    or die "no Mail::Sender->Open $Mail::Sender::Error";

my $email;
Template->new()->process(
    'email.tt2',
    \%P,
    \$email,
);
$ms->SendLineEnc($email);
$ms->Close() or die "error: $Mail::Sender::Error";

# and inform the program office of this online registration
my $msg = "Online registration - $P{x_fname} $P{x_lname} - $P{x_title}";
open my $in, '<', 'online_notify.txt';
my $people = <$in>;
close $in;
chomp $people;
$people ||= 'jon@suecenter.org';
$ms->Open({
    to       => $people,
    from     => 'Mount Madonna Center <reservations@mountmadonna.org>',
    subject  => $msg,
    ctype    => "text/html",
    encoding => "7bit",
})
    or die "no Mail::Sender->Open $Mail::Sender::Error";
$ms->SendLineEnc($msg);
$ms->Close() or die "error: $Mail::Sender::Error";

#
# hyphenated names need an extra capital
# SMITH-JOHNSON    => Smith-Johnson
# smith-johnson    => Smith-Johnson
# Mckenzie         => McKenzie
# mary jane-louise => Mary Jane-Louise
#
sub normalize {
    my ($s) = @_;
    if (! $s) {
        return "";
    }
    my $t = "";
    my @words = split m{[ ]}xms, $s;
    for my $w (@words) {
        $w = join '-',
             map { s{^Mc(.)}{Mc\u$1}; $_ }
             map { ucfirst lc }
             split m{-}, $w
             ;
    }
    return join ' ', @words;
}
