#!/usr/bin/perl
#
# this should serve both old and new reg purposes.
#
use strict;
use warnings;

use CGI qw/:standard/;

#
# while reg is in the process of getting
# existing transactions do not proceed.
# but if you have tried 30 times forget it!
#
chdir "/home/mmc/www/cgi-bin";
my $n = 0;
while (-f "transactions/getting") {
    sleep 1;
    ++$n;
    if ($n > 30) {
		unlink "transactions/getting";
		last;
    }
}

# translate housing type into what Jayanti likes
# first the old style, then the modern
# very confusing this is.  once it settles we can clarify.
my @vals = qw(
	centertent    ct
	commute       com
	dorm          dorm
	doubleocc     dbl
	doubleoccbath dbl/ba
	owntent       ot
	singleocc     sgl
	singleoccbath sgl/ba
	tripleocc     tpl
	van           van

	commuting     com
	own_van       ov
	own_tent      ot
	center_tent   ct
	dormitory     dorm
	economy       econ
	quad          quad
	triple        tpl
	double        dbl
	double_bath   dbl/ba
	dble          dbl
	dble_bath     dbl/ba
	single        sgl
	single_bath   sgl/ba
);
s/_/ / for @vals;
my %abbr = @vals;

#
# the filename can't be more than 8 chars
# because of FoxPro's limitations
#
my $id = substr(param("x_trans_id") || time(), -8);
open my $out, ">", "temp$id"
	or die "cannot create temp$id: $!\n";
my ($min, $hour, $d, $m, $y) = (localtime)[ 1..5 ];
++$m;
$y += 1900;
my $dreg = "";
print {$out} "x_date => $m/$d/$y\n";
printf {$out} "x_time => %02d:%02d\n", $hour, $min;
for my $k (param()) {
    if ($k eq "x_pid") {
        $dreg = "dreg_";      # the new reg
    }
	print {$out} "$k => " unless $k =~ /x_request/;
	if ($k =~ /phone/i) {
		my $phone = param($k);
        my $n = $phone =~ tr/0-9/0-9/;
        if ($n == 10 && $phone =~ m{^[0-9\(\)-. /]+$}) {
            #
            # an American phone number
            # reformat it in a standard way
            #
            $phone =~ s/[^0-9]//g;
            $phone = substr($phone, 0, 3) . "-"
                   . substr($phone, 3, 3) . "-"
                   . substr($phone, 6, 4);
        }
		print {$out} $phone;
    }
    elsif ($k =~ /x_country/) {
        my $country = param($k);
        $country =~ s{^\s*|\s*$}{}g;
        $country =~ s{[^\w ]}{}g;
        if ($country =~ /^us|usa|united states$/i) {
            $country = "";
            print {$out} $country;
        }
        else {
            print {$out} param($k);
        }
    }
    elsif ($k =~ /house\d/i) {
		my $house = param($k);
		print {$out} ((exists $abbr{$house})?
			       $abbr{$house}:
			       $house
			  );
	}
    elsif ($k =~ /x_request/i) {
		my $request = param($k);
		$request =~ s/\cM\n/ /g;
		my $n = 1;
        my ($i, $first);
		while (length($request) > 70) {
			$i = rindex($request, ' ', 70);
			$first = substr($request, 0, $i);
			print {$out} "x_request$n => $first\n";
			++$n;
			$request = substr($request, $i+1);
		}
		print {$out} "x_request$n => $request\n" if length($request) > 0;
		next;		# no need for extra newline
	}
    elsif ($k =~ /.*date/) {
        my $v = param($k);
        $v =~ s{4008}{2008};        # it HAS happened, not sure why
        print {$out} param($k);
    }
    else {
		print {$out} param($k);
	}
	print {$out} "\n";
}
close $out;
rename "temp$id", "${dreg}transactions/$id";
# as a backup and an archive:
system("cp ${dreg}transactions/$id ${dreg}trans_archive/$id");
# when should it be cleared out/purged???
