#!/usr/bin/perl
use strict;
use warnings;

use CGI qw/:standard :cgi-lib/;
use CGI::Carp qw/fatalsToBrowser/;
use DBI;
use lib 'mylib/lib/perl5';
use Template;

print header();
my %P = Vars();
my $go_back = <<'EOH';
<p>
<form name=form>
Please <input type="button" id=back value="Go Back" onclick="history.go(-1)"> and correct this.
</form>
<script>
document.form.back.focus();
</script>
EOH

my $tt = Template->new(
    INTERPOLATE => 1,
);

if ($P{first} !~ /\S/ || $P{last} !~ /\S/) {
    $tt->process(
        'update_msg.tt2',
        {
            msg => "You must give a first and a last name$go_back",
        },
    );
    exit;
}
if ($P{email} =~ /\S/
    && $P{email} !~ m{ \A\s* [a-z0-9._-]+[@][a-z0-9.-]+ \s*\z }xmsi
) {
    $tt->process(
        'update_msg.tt2',
        {
            msg => "Illegal format for the email address.$go_back",
        },
    );
    exit;
}

my $dbh = DBI->connect(
    'dbi:SQLite:dbname=people_data', '', '',
    { RaiseError => 1, AutoCommit => 1 }
) or die "cannot connect to database\n";

for my $f (qw/
    e_mailings
    snail_mailings
    mmi_e_mailings
    mmi_snail_mailings
    share_mailings
/) {
    if (! exists $P{$f}) {
        $P{$f} = '';
    }
}

#
# take the parameters, concatenate them,
# extract the digits in order and suffix
# them with the first letter.
#
# this is used during the efforts to locate
# a duplicate entry.   If an address is
# spelled differently or road instead of rd
# it will have the same nsquished value.
#
# this is a poor man's MD5.
# or an address-specific MD5.
#
sub nsquish {
    my ($addr1, $addr2, $zip) = @_;
    my $s = uc($addr1 . $addr2 . $zip);
    my $n = $s;
    $n =~ s{\D}{}g;
    $s =~ s{[^A-Z]}{}g;
    $s = substr($s, 0, 3);
    return ($n . $s);
}
$P{akey} = nsquish($P{addr1}, $P{addr2}, $P{zip_post});

my %interests;
my $sth = $dbh->prepare("
    select * from prog_affils;
");
$sth->execute();
while (my ($id, $descrip) = $sth->fetchrow_array()) {
    $interests{$id} = $descrip;
}

$sth = $dbh->prepare(
    "select * from people_data where secure_code = '$P{secure_code}'");
$sth->execute();
my $href = $sth->fetchrow_hashref();
if ($href->{secure_code} ne $P{secure_code}) {
    print "something is wrong!";
    exit;
}
my $changes = "";
my $sql = "update people_data set";
my @prog_affils;
FIELD:
for my $f (sort keys %P) {
    next FIELD if $f eq 'secure_code';
    if ($f =~ m{ \A a(\d+) \z }xms) {
        push @prog_affils, $1;
        next FIELD;
    }
    my $s = $P{$f};
    if (index($s, '"') != -1) {
        # no double quotes at all are allowed
        $s =~ s{"}{}xmsg;
    }
    $sql .= qq[ $f = "$s",];
    # log it
    if ($href->{$f} ne $P{$f}) {
        if ($f eq 'akey') {
            ;       # don't log this - internal
        }
        elsif ($f =~ m{mailings}) {
            my $s = $f;
            $s =~ s{_mailings}{};
            $s =~ s{e_}{email};
            if ($s !~ m{ \A (mmi_|share) }xms) {
                $s = "mmc_$s";
            }
            $changes .= "$s: " . ($P{$f}? $P{$f}: "no") . ", ";
        }
        elsif ($f =~ m{sex}xms) {
            $changes .= "$f: $P{$f}, ";
        }
        else {
            $changes .= "$f: $href->{$f} => $P{$f}, ";
        }
    }
}
$sql .= qq[ prog_affils = "@prog_affils", ];
$sql .= " status = 2 ";
$sql .= qq[ where secure_code = "$P{secure_code}"];
$sth = $dbh->prepare($sql) or die "oops";
$sth->execute();

# we had $href->{prog_affils} and now have "@prog_affils".
# what changed?  put it succinctly in $changes.
my @had = split ' ', $href->{prog_affils};
for my $a (@had) {
    if (! grep { $_ == $a } @prog_affils) {
        $changes .= "$interests{$a}: no, ";
    }
}
for my $a (@prog_affils) {
    if (! grep { $_ == $a } @had) {
        $changes .= "$interests{$a}: yes, ";
    }
}

if ($changes) {
    $changes =~ s{,\s*\z}{}xms;
    open my $log, '>>', 'update_log.txt';
    my ($min, $hour, $day, $mon) = (localtime)[1 .. 4];
    ++$mon;
    printf {$log} "%d/%d %02d:%02d $href->{first} $href->{last}: $changes\n",
                  $mon, $day, $hour, $min;
    close $log;
}

my $interests = join ', ',
                map { $interests{$_} }
                @prog_affils
                ;

my $prefs = "";
if ($P{e_mailings} || $P{snail_mailings}) {
     $prefs = "<p>We will include you on occasional mailings about MMC via ";
     if ($P{e_mailings}) {
        $prefs .= "e-mail";
     }
     if ($P{snail_mailings}) {
        if ($P{e_mailings}) {
            $prefs .= " and ";
        }
        $prefs .= "snail mail";
     }
     $prefs .= ".";
}
else {
    $prefs .= "<p>We will <b>not</b> include you on occasional mailings"
           .  " about MMC.";
}
if ($P{mmi_e_mailings} || $P{mmi_snail_mailings}) {
     $prefs .= "<p>We will include you on occasional mailings about MMI via ";
     if ($P{mmi_e_mailings}) {
        $prefs .= "e-mail";
     }
     if ($P{mmi_snail_mailings}) {
        if ($P{mmi_e_mailings}) {
            $prefs .= " and ";
        }
        $prefs .= "snail mail";
     }
     $prefs .= ".";
}
else {
    $prefs .= "<p>We will <b>not</b> include you on occasional mailings"
           .  " about MMI.";
}
$prefs .= "<p>We will "
     . ($P{share_mailings}? "": "<b>not</b> ")
     . "share your contact information with MMC affiliates.";
$tt->process(
    'update2.tt2',
    {
        p         => \%P,
        prefs     => $prefs,
        interests => $interests,
    },
);
