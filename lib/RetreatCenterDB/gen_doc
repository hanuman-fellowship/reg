#!/usr/bin/perl
use strict;
use warnings;

# naming quirks remedied
my %rename = qw/
    affilperson     AffilPerson
    affilprogram    AffilProgram
    affilreport     AffilReport
    canpol          CanPol
    confhistory     ConfHistory
    housecost       HouseCost
    leaderprogram   LeaderProgram
    meetingplace    MeetingPlace
    meeting_place   MeetingPlace
    mmipayment      MMIPayment
    nighthist       NightHist
    regcharge       RegCharge
    reghistory      RegHistory
    regpayment      RegPayment
    rentalbooking   RentalBooking
    rentalcharge    RentalCharge
    rentalpayment   RentalPayment
    requestedmmipayment RequestedMMIPayment
    residentnote    ResidentNote
    sponshist       SponsHist
    userrole        UserRole
    xaccount        XAccount
    xaccountpayment XAccountPayment
/;

my $line;
my $fname;
sub get_col {
    my ($in) = @_;

    my ($name, $doc);
    if (! $line) {
        $line = <$in>;
        if (! $line) {
            return;
        }
        chomp $line;
    }
    if ($line =~ m{\A __STRINGS__ \z}xms) {
        # beginning of documentation for strings in String.pm.
        # in effect, for this situation: EOF
        # see check_doc, as well.
        $line = <$in>;      # to prime the buffer
        return 'STRINGS', '';
    }
    if ($line =~ m{\A (\S+) \s+ - \s* (.*) \z}xms) {
        $name = $1;
        $doc = $2 || '';
    }
    else {
        print "$fname: no - in '$line'\n";
        $name = $doc = '';
    }
    while ($line = <$in>) {
        chomp $line;
        if ($line =~ m{\A \S}xms) {
            return ($name, $doc);
        }
        chomp $line;
        $line =~ s{\A \s+}{ }xms;
        $doc .= $line;
    }
    return ($name, $doc);
}

sub link_to {
    my ($name) = @_;
    my $lname = $rename{$name} || ucfirst $name;
    return "<a href=/static/help/schema/$lname.html>$name</a>";
}

my @files = sort
            map { s/[.]pm$//; $_ }
            <*.pm>;
for my $f (@files) {
    open my $in, '<', "$f.pm"
        or die "no $f.pm: $!\n";
    $fname = "$f.pm";
    my $table;
    my @relations;
    PRE:
    while (my $line = <$in>) {
        if ($line =~ m{table\('(\w+)}xms) {
            $table = $1;
        }
        if ($line =~ m{
                        (has_many|belongs_to|might_have)
                        \(
                        '?(\w+)'?
                        \s* => \s*
                        'RetreatCenterDB::
                        (\w+)
                     }xms
        ) {
            push @relations, {
                relation => $1,
                name     => $2,
                model    => lc $3,
            };
        }
        elsif ($line =~ m{(many_to_many)\(
                          (\w+)         # name
                          \s*=>\s* '
                          (\w+)         # rel1
                          '\s*,\s*'
                          (\w+)         # rel2
                          '}xms
        ) {
            push @relations, {
                relation => $1,
                name     => $2,
                model    => "$3 => $4",
            };
        }
        elsif ($line =~ m{\A(__END__|__DATA__)}xms) {
            last PRE;
        }
    }
    my ($name, $doc);
    ($name, $doc) = get_col($in);
    open my $out, '>', "../../root/static/help/schema/$f.html"
        or die "can't create $f.html\n";
    print {$out} <<"EOH";
<html>
<head>
<link rel="stylesheet" type="text/css" href="/static/help/help.css" />
</head>
<body>
<h2>$f
<span style="margin-left: 2in; font-size: 13pt; font-weight: normal"><a href=/static/help/schema/index.html>To Help for Developers</a>
</h2>
$doc
<p>
Table: $table
<dl>
EOH
    NAME_DOC:
    while (($name, $doc) = get_col($in)) {
        last NAME_DOC if $name eq 'STRINGS';
        print {$out} "<dt>$name</dt>\n";
        $doc =~ s{(foreign[ ]key[ ]to[ ])(\w+)}{ $1 . link_to($2) }xmse;
        print {$out} "<dd>$doc</dd>\n";
    }
    print {$out} "</dl>\n";
    if (@relations) {
        @relations = sort { $a->{name} cmp $b->{name} } @relations;
        print {$out} "<h2>Relations</h2>\n";
        print {$out} "<table cellpadding=5>\n";
        for my $r (@relations) {
            print {$out}
                  "<tr>",
                  "<td>$r->{name}</td>";
            if ($r->{relation} eq 'many_to_many') {
                print {$out}
                      "<td>$r->{model}</td>";
            }
            else {
                print {$out}
                      "<td>"
                      . link_to($r->{model})
                      . "</td>";
            }
            print {$out}
                  "<td>$r->{relation}</td>",
                  "</tr>\n";
        }
        print {$out} "</table>\n";
    }
    print {$out} "</body></html>\n";
    close $out;
    if (defined $name && $name eq 'STRINGS') {
        open my $str_doc, '>', "../../root/static/help/schema/str_doc.html"
            or die "cannot create str_doc.html: $!\n";
        print {$str_doc} <<'EOH';
<html>
<head>
<link rel="stylesheet" type="text/css" href="/static/help/help.css" />
</head>
<body>
<h2>String Definitions</h2>
<dl>
EOH
        while (($name, $doc) = get_col($in)) {
            print {$str_doc} "<dt>$name</dt>\n<dd>$doc</dd>\n";
        }
        print {$str_doc} "</dl></body></html>\n";
        close $str_doc;
    }
    close $in;
}

# now generate the top level page
my $nfiles = @files;
my $npercol = int($nfiles/4);
open my $out, '>', '../../root/static/help/schema/index.html'
    or die "no schema.html: $!\n";
print {$out} <<'EOH';
<html>
<head>
<link rel="stylesheet" type="text/css" href="/static/help/help.css" />
<style>
td {
    font-size: 13pt;
}
</style>
</head>
<body>
<h2>Help For Developers</h2>
<h3>Database Schema</h3>
<table cellpadding=5>
EOH
for my $i (0 .. $npercol-1) {
    print {$out} "<tr>\n";
    for my $j (0 .. 3) {
        my $f = $files[$i+$j*$npercol];
        if (defined $f) {
            print {$out} "<td><a href=/static/help/schema/$f.html>$f</a></td>\n";
        }
        else {
            print {$out} "<td>&nbsp;</td>\n";
        }
    }
    print {$out} "</tr>\n\n";
}
print {$out} <<'EOH';
</table>
<p>
<a href=/static/help/schema/data_types.html>Data Types in Reg</a><p>
<a href=/static/help/schema/schema1.png>Overview Schema Diagram</a><p>
<a href=/static/help/schema/new_column.html>Adding a New Column</a><p>
<a href=/static/help/schema/str_doc.html>Configuration &gt; Strings Documentation</a>
</body>
</html>
EOH
