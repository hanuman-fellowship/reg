#!/usr/local/bin/perl
use strict;
use warnings;
use DBI;
use Data::Dumper;
use Test::More;

# naming quirks remedied
my %repl_file = qw/
    affil        affils
    affil_person affil_people
    affil_report affil_reports
    can_pol      canpol
    checkout     check_out
    conf_note    confnote
    house_cost   housecost
    mmipayment   mmi_payment
    person       people
    report       reports
    requested_mmipayment req_mmi_payment
/;
my %repl_pm = qw/
    Canpol      CanPol
    Housecost   HouseCost
    Xaccount    XAccount
/;


my $database;
my $mysql = -d "/home/sahadev";
my $dbh = DBI->connect(undef, "sahadev", "JonB")
    or die "oh no\n";
my @tables = grep { !m{sqlite}xms && $_ ne 'omp' }
             map  { substr($_, 1, -1) }     # chop quotes front and back.
             $dbh->tables;                  #   why are they there?
@tables = map { s/(main|temp)"."//; $_ } @tables;
my $ntables = @tables;
for my $t (@tables) {
    my @cols;
    if ($mysql) {
        my $sth = $dbh->column_info(undef, 'reg2', $t, '%');
        while (my @arr = $sth->fetchrow_array()) {
           push @cols, $arr[3]
        }
    }
    else {
        my $sth = $dbh->prepare("pragma table_info($t)");
        $sth->execute();
        while (my @arr = $sth->fetchrow_array()) {
            push @cols, $arr[1]
                unless $t eq 'program' && $arr[1] eq 'resident';
        }
    }
    @cols = sort @cols;
    $database->{$t} = \@cols;
}
my $num_cols  = 0;
my $num_nodoc = 0;
my $num_strs  = 0;

my $str_doc_err = 0;

my $model;
FILE:
for my $f (<*.pm>) {
    my @cols;
    my $table;
    open my $in, '<', $f
        or die "cannot open $f: $!\n";
    PRE_ADD:
    while (my $line = <$in>) {
        # __PACKAGE__->table('req_mmi_payment');
        if ($line =~ m{->table\('(\w+)}xms) {
            $table = $1;
            my $file = $f;
            $file =~ s{[.]pm\z}{}xms;
            $file =~ s{([a-z])([A-Z])}{$1_\u$2}xmsg;
            $file = lc $file;
            $file = $repl_file{$file} if exists $repl_file{$file};

            if ($table ne $file) {
                print "file $file <!> table $table\n";
            }
        }
        if ($line =~ m{add_columns}xms) {
            last PRE_ADD;
        }
    }
    COLS:
    while (my $line = <$in>) {
        next unless $line =~ m{\S}xms;
        if ($line =~ m{\A /}xms) {
            last COLS;
        }
        chomp $line;
        $line =~ s{\A \s* | \s* \z}{}xmsg;
        push @cols, $line;
    }
    @cols = sort @cols;
    $model->{$table} = \@cols;

    TO_END:
    while (my $line = <$in>) {
        if ($line =~ m{\A __(END|DATA)__}xms) {
            last TO_END;
        }
    }
    my @doc_cols;
    my $line;
    DOC:
    while ($line = <$in>) {
        chomp $line;
        next DOC if $line =~ m{\A \s}xms;   # doc continuation
        last DOC if $line =~ m{ \A __STRINGS__ \z}xms;
        ++$num_cols;
        if ($line =~ m{\A \w+ \s+ - \s+ \z}xms) {
            print "** missing doc for '$line' in $f\n";
            ++$num_nodoc;
        }
        if ($line =~ m{foreign[ ]key[ ]to[ ](\w+)}xms) {
            my $pm = ucfirst $1;
            $pm =~ s{_(.)}{\u$1}xms;
            $pm = $repl_pm{$pm} if exists $repl_pm{$pm};
            $pm .= ".pm";
            if (! -e $pm) {
                print "$f: no such file: $pm\n";
            }
        }
        $line =~ s{[ ]-.*}{}xms;
        push @doc_cols, $line;
    }
    if ($line && $line =~ m{\A __STRINGS__ \z}xms) {
        my %str_doc;
        STR_LINE:
        while (my $line = <$in>) {
            chomp $line;
            if ($line =~ m{\A \s }xms) {
                next STR_LINE;
            }
            my ($key, $doc) = $line =~ m{\A (\S+) \s*-\s* (.*) \z}xms;
            ++$num_strs;
            if ($doc !~ m{\S}xms || $doc eq 'doc') {
                print "empty documentation for string '$key'\n";
                $str_doc_err = 1;
            }
            $str_doc{$key} = $doc;
        }
        my $sth = $dbh->prepare("select the_key from string order by the_key");
        $sth->execute();
        my %str_row;
        while (my ($key) = $sth->fetchrow_array()) {
            $str_row{$key} = 1;
            if (! exists $str_doc{$key}) {
                print "no documentation line for string '$key'\n";
                $str_doc_err = 1;
            }
        }
        for my $key (sort keys %str_doc) {
            if (! exists $str_row{$key}) {
                print "no row in db for string '$key'\n";
                $str_doc_err = 1;
            }
        }
    }
    close $in;
    if ((scalar(@cols)+1) != scalar(@doc_cols)) {
        # +1 above for the 'overview'
        print "mismatch in doc cols for $f\n";
    }
    my %cols = map { $_ => 1 } @cols;
    my %doc_cols = map { $_ => 1 } @doc_cols;
    for my $c (@cols) {
        if (! exists $doc_cols{$c}) {
            print "$table: no documentation for column $c\n";
        }
    }
    for my $c (@doc_cols) {
        if ($c ne 'overview' && ! exists $cols{$c}) {
            print "no table column for doc column $c\n";
        }
    }
}
print "$ntables tables\n";
print "$num_cols columns\n";
print "$num_strs strings\n";
plan tests => 3;
is_deeply($database, $model, 'the database matches the model exactly');
is($num_nodoc, 0, 'all columns have documentation');
is($str_doc_err, 0, 'all strings are present and have documentation');
