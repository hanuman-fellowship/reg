#!/usr/local/bin/perl

=comment
a careful read-only examination of the config table

requirements for the hcck program:
    1- for every house id for every day from today to
        sys_last_config_date we have one and only one config record.
    2- there are the same number of distinct house_id's
        in config as there are houses.
    3- for every rental_booking record there is the proper config records
        with curmax equal to cur and both <= house->max, sex is R,
        rental_id matches, program_id is 0 
    4- for config records with a non-zero cur and a program id
        of non-zero there are exactly cur registration records
        with different reg ids for that date and that house.
        you may need to add blocks to the reg records.
    5- in all config records curmax should not be > house->max
       and curmax should be a digit (not blank).
    6- cannot have both rental_id != 0 and program_id != 0
    7- if rental_id or program_id is non-zero then there
       should be a valid rental or program with that id.

=cut
use warnings;
use strict;
$|++;       # unbuffer STDOUT

use lib "lib";
use DBI;
use Date::Simple qw/
    date
    today
/;
my $dbh = DBI->connect(undef, "sahadev", "JonB")
    or die "oh no\n";
my $sth = $dbh->prepare("
    select value
    from string
    where the_key = 'sys_last_config_date'
");
$sth->execute();
my ($lfd) = $sth->fetchrow_array();
print "    last is $lfd\n";

$sth = $dbh->prepare("select max(edate) from rental");
$sth->execute();
my ($rent_max) = $sth->fetchrow_array();
print "rent max is $rent_max\n";

$sth = $dbh->prepare("select edate, extradays from program");
$sth->execute();
my $prog_max = 0;
while (my ($edate, $extra) = $sth->fetchrow_array()) {
    my $dt = date($edate) + $extra;
    my $dt8 = $dt->as_d8();
    if ($prog_max < $dt8) {
        $prog_max = $dt8;
    }
}

my $dt = date($prog_max) + 30;
$prog_max = $dt->as_d8();
print "prog max is $prog_max\n";

my $max = ($prog_max > $rent_max)? $prog_max: $rent_max;
if ($lfd > $max) {
    $max = $lfd;
}
my $today = today()->as_d8();

my $ndays = date($max)-date($today) + 1;
print "$today to $max = $ndays days\n";

$sth = $dbh->prepare("select id, max, name from house");
$sth->execute();
my (@h_id, %h_max, %h_name);
while (my ($id, $max, $name) = $sth->fetchrow_array()) {
   push @h_id, $id;
    $h_max{$id} = $max;
    $h_name{$id} = $name;
}
my $nhouses = @h_id;
print "got $nhouses houses\n";

# requirement #2
$sth = $dbh->prepare("
    select count(distinct house_id)
    from config;
");
$sth->execute();
my ($ndistinct) = $sth->fetchrow_array();
if ($nhouses != $ndistinct) {
    print "** expected $nhouses house ids in config but got $ndistinct\n";
}
else {
    print "nhouses sync\n";
}

# requirement #1
# config records should all be present...
$sth = $dbh->prepare("
    select count(distinct the_date)
    from config
    where house_id = ?
      and the_date >= $today
");
my $err = 0;
for my $id (@h_id) {
    $sth->execute($id);
    my $n = $sth->fetchrow_array();
    if ($n != $ndays) {
        print "** mismatch $n vs $ndays for house $id = $h_name{$id}\n";
        ++$err;
    }
}
if (! $err) {
    print "all config records present\n";
}

# requirement #3
# rental_booking:
#   rental_id 
#   date_start
#   date_end
#   house_id
#   h_type

# config:
#   house_id
#   the_date
#   sex
#   curmax
#   cur
#   program_id
#   rental_id
#
$sth = $dbh->prepare("
    select *
    from rental_booking
");
$sth->execute();
$err = 0;
my $sth2;
while (my $rb_ref = $sth->fetchrow_hashref()) {
    $sth2 = $dbh->prepare("
        select *
        from config
        where house_id = $rb_ref->{house_id}
          and the_date between $rb_ref->{date_start} and $rb_ref->{date_end}
    ");
    $sth2->execute();
    while (my $cf_ref = $sth2->fetchrow_hashref()) {
        my $note = "for house $cf_ref->{house_id}, date $cf_ref->{the_date}";
        my $max = $h_max{$rb_ref->{house_id}};
        if ($cf_ref->{curmax} != $cf_ref->{cur}
            || $cf_ref->{curmax} > $max       )
        {
            print "** curmax != max or either > $max $note\n";
            ++$err;
        }
        if ($cf_ref->{sex} ne 'R') {
            print "** sex should be R $note\n";
            ++$err;
        }
        if ($cf_ref->{rental_id} != $rb_ref->{rental_id}) {
            print "** rental id $cf_ref->{rental_id} should be "
                . "$rb_ref->{rental_id} $note\n";
            ++$err;
        }
        if ($cf_ref->{program_id} != 0) {
            print "** program id should be 0 $note\n";
            ++$err;
        }
    }
}
if (! $err) {
    print "all rental_booking records correct\n";
}

# requirement #4
# reg housing.
$sth = $dbh->prepare("
    select cur, house_id, the_date
    from config
    where cur != 0
      and program_id != 0
    order by the_date
");
$sth->execute();
$sth2 = $dbh->prepare("
    select count(distinct id)
    from registration
    where house_id = ?
      and date_start <= ?
      and date_end   >  ?
");
my $sth3 = $dbh->prepare("
    select nbeds
      from block
     where house_id = ?
       and sdate <= ? and ? < edate
");
$err = 0;
while (my ($cur, $house_id, $the_date) = $sth->fetchrow_array()) {
    $sth2->execute($house_id, $the_date, $the_date);     
    my ($count) = $sth2->fetchrow_array();
    if ($count != $cur) {
        # could there be a block on this day to account
        # for the difference?
        $sth3->execute($house_id, $the_date, $the_date);
        my ($nbeds) = $sth3->fetchrow_array();
        $nbeds ||= 0;
        if ($count + $nbeds != $cur) {
            print "** reg/block mismatch ($count != $cur) for house $house_id date $the_date\n";
        }
        ++$err;
    }
}
if (! $err) {
    print "all reg reservation records are correct\n";
}

# requirement #5
$sth = $dbh->prepare("
    select c.*, h.max, h.tent
    from config c, house h
    where c.house_id = h.id
      and (c.cur > h.max or c.curmax > h.max)
      -- and h.tent != 'yes'
");
$sth->execute();
$err = 0;
while (my (@data) = $sth->fetchrow_array()) {
    for my $d (@data) {
        if (! defined($d)) {
            $d = "-";
        }
    }
    #   h.tent                 c.cur
    if ($data[8] eq 'yes' && $data[4] > 0) {
        # okay. don't print at all, please.
        # print "++ curmax or max > house_max: $h_name{$data[0]}: @data - but tent so okay\n";
    }
    else {
        print "** curmax or max > house_max: $h_name{$data[0]}: @data\n";
        ++$err;
    }
}
if (! $err) {
    print "no max or cur max > house_max\n";
}
# a blank curmax will eval to 0, yes?
# yes but an _undef_ curmax makes trouble - why?
$sth = $dbh->prepare("
    select c.*, h.tent
    from config c, house h
    where c.house_id = h.id
      and (not (c.curmax >= 1 or c.curmax = '0'))
");
$sth->execute();
$err = 0;
while (my (@data) = $sth->fetchrow_array()) {
    for my $d (@data) {
        if (! defined($d)) {
            $d = "-";
        }
    }
    print "** bad curmax: @data\n";
    ++$err;
}
if (! $err) {
    print "no bad curmax\n";
}

# requirement #6 - no records with both program_id and rental_id being non-zero
#
$sth = $dbh->prepare("
    select house_id, the_date, rental_id, program_id
    from config
    where rental_id != 0 and program_id != 0
");
$sth->execute();
$err = 0;
while (my ($house_id, $the_date, $rental_id, $program_id)
    = $sth->fetchrow_array()
) {
    print "** both program and rental: $house_id, $the_date, $program_id, $rental_id\n";
    ++$err;
}
if (! $err) {
    print "no doubled program/rental\n";
}

# requirement #7 - good program_id, rental_id
#
my $sql = <<EOS;
select house_id, h.name, the_date, cur, program_id
from config c, house h
where c.house_id = h.id
  and program_id != 0
  and (select count(*)
       from program where id = program_id)
      = 0
order by c.house_id
EOS
$sth = $dbh->prepare($sql);
$sth->execute();
$err = 0;
while (my ($hid, $hname, $date, $cur, $prog_id) = $sth->fetchrow_array()) {
    ++$err;
    print "** bad prog id: house $hid = $hname, $date, cur $cur, prog_id = $prog_id\n";
}
if (! $err) {
    print "no bad prog id\n";
}
$sql =~ s{program}{rental}g;
$sth = $dbh->prepare($sql);
$sth->execute();
$err = 0;
while (my ($hid, $hname, $date, $cur, $rent_id) = $sth->fetchrow_array()) {
    ++$err;
    print "** bad rent id: house $hid = $hname, $date, cur $cur, rent_id = $rent_id\n";
}
if (! $err) {
    print "no bad rent id\n";
}
